// new module script
DynamicSprite *debsprite;

//*******************************************************************************
//* get_char_width
//* returns a char's width
//*
//*******************************************************************************
static int INFO::get_char_width (Character *a)
{
  ViewFrame *frame = Game.GetViewFrame(a.View, a.Loop, a.Frame);
  int graphic=frame.Graphic;
  return (Game.SpriteWidth[graphic]/2);
}

//*******************************************************************************
//* get_char_height
//* returns a char's height
//*
//*******************************************************************************
static int INFO::get_char_height (Character *a)
{
  if (a.ID == player.ID) return 31;
  else {
    ViewFrame *frame = Game.GetViewFrame(a.View, a.Loop, a.Frame);
    int graphic=frame.Graphic;
    return (Game.SpriteHeight[graphic]);
  }
}

//*******************************************************************************
//* SortIntst
//* sorts dynamic integer array
//*
//*******************************************************************************
int [] SortInts(int a[],  int length, eOrder order) 
{
  if (length < 2) return a;
  int i, j, swap;
  while (i < length - 1) {
	j = i + 1;
	while (j < length) {
	   if ((order == eOrderAscending && a[i] > a[j]) ||
		   (order == eOrderDescending && a[i] < a[j])) {
		 swap = a[i];
		 a[i] = a[j];
		 a[j] = swap;
	   }
	   j++;
	}
	i++;
  }
  return a;
}

//*******************************************************************************
//* DrawPointDebug
//* Draws a dot on the debugging surface
//*
//*******************************************************************************

static void INFO::draw_debug_dot(int xpos, int ypos, int color)
{
  if (debsprite == null) debsprite = DynamicSprite.Create(Screen.Width, Screen.Height);
  DrawingSurface *debsurf = debsprite.GetDrawingSurface();
  debsurf.DrawingColor = color;
  debsurf.DrawPixel(xpos, ypos);
  debsurf.Release();
  btnDebugBG.NormalGraphic = debsprite.Graphic;
  
}

//*******************************************************************************
//* total
//* always returns the positive value
//*
//*******************************************************************************
static int INFO::total(int number) 
{
  if ( number > 0)  return number;
  else              return number*(-1);
}

// new module script
//*******************************************************************************
//* RACR::increase
//* 
//*******************************************************************************
static float Util::increase(float start,  float increment,  float max) 
{
  float result = start + increment;
  while (result >= max) {
    result -= max;
  }
  
  while (result < 0.0)
  result += max;
  
  return result;
}

//*******************************************************************************
//* RACR::accelerate
//* 
//*******************************************************************************
static float Util::accelerate(float v, float accel, float dt)
{
  return v + (accel * dt);
}
//*******************************************************************************
//* ClampFloat
//* 
//*******************************************************************************
static float Util::clampFloat(float f, float lower, float upper) 
{
    if (f < lower) return lower;
  else if (f > upper) return upper;
  else return f;

}

//*******************************************************************************
//* ClampInt
//* 
//*******************************************************************************
static int Util::clampInt(int f, int lower, int upper) 
{
  if (f < lower) return lower;
  else if (f > upper) return upper;
  else return f;  
}

//*******************************************************************************
//* ClampFloat
//* 
//*******************************************************************************
static float Util::fMod(float val1,  float val2) {
  int result = FloatToInt( val1 / val2 );
  float mod = val1 - IntToFloat(result) * val2;
  return mod;

}
//*******************************************************************************
//* max_f
//* 
//*******************************************************************************
static float Util::max_f (float val1, float val2) {
  if (val1 > val2) return val1;
  else return val2;
}
//*******************************************************************************
//* max_i
//* 
//*******************************************************************************
static int Util::max_i (int val1, int val2) {
  if (val1 > val2) return val1;
  else return val2;
}
//*******************************************************************************
//* min_f
//* 
//*******************************************************************************
static float Util::min_f (float val1, float val2) {
  if (val1 > val2) return val2;
  else return val1;
}
//*******************************************************************************
//* min_i
//* 
//*******************************************************************************
static int Util::min_i (int val1, int val2) {
  if (val1 > val2) return val2;
  else return val1;
}
//*******************************************************************************
//* distance
//* 
//*******************************************************************************
static int Util::distance(int x1, int y1, int x2,  int y2)
{
  int below_root = ((x2 - x1)*(x2 - x1)) + ((y2 - y1)+(y2 - y1));
  if (below_root < 0) below_root = below_root * (-1);
  int dist = FloatToInt(Maths.Sqrt(IntToFloat(below_root)));
  
  return dist;  
}
//*******************************************************************************
//* easeIn
//* 
//*******************************************************************************
static float Util::easeIn(float a, float b, float percent){
  float result =  a + (b-a) * Maths.RaiseToPower(percent,2.0);
  return result;
}
//*******************************************************************************
//* easeOut
//* 
//*******************************************************************************
static float Util::easeOut(float a, float b, float percent){
  float result = a + (b-a)*(1.0-Maths.RaiseToPower(1.0-percent,2.0)); 
  return result;
}
//*******************************************************************************
//* easeInOut
//* 
//*******************************************************************************
static float Util::easeInOut(float a, float b, float percent){

  return a + (b - a ) * ( (-Maths.Cos(percent*Maths.Pi)/2.0) + 0.5 );
  
  
}
//*******************************************************************************
//* percentRemaining
//* 
//*******************************************************************************
static float Util::percentRemaining(float n, float total)          
{ 
  
  return Util.fMod(n, total) / (total);
}
//*******************************************************************************
//* interpolate
//* 
//*******************************************************************************
static float Util::interpolate(float a,float b,float percent)      
{ 
  return a + (b-a)*percent; 
}

//*******************************************************************************
//* interpolate
//* 
//*******************************************************************************
static int Util::colorToRGB(int color, int channel)
{
  bool highBit = false; //or false, you decide
 
  if (color > 65535) color -= 65536;
  int rgb[ ] = new int[3];
  rgb[0] = ((color >> 11) & 31) << 3;
  rgb[1] = ((color >> 6) & 31) << 3;
  rgb[2] = (color & 31) << 3;
  if (highBit)
  {
    rgb[0] = rgb[0] | 7;
    rgb[1] = rgb[1] | 3;
    rgb[2] = rgb[2] | 7;
  }
  
  return rgb[channel];
}


//*******************************************************************************
//* randomFloat
//* 
//*******************************************************************************  
static float Util::randomFloat(float max) 
{
  int huge =  32767;
  float f = IntToFloat(Random(huge)) / IntToFloat(huge);  // 0.0 - 1.0
  return f * max;
}

//*******************************************************************************
//* randomHighInt
//* 
//*******************************************************************************  
static int Util::randomHighInt(int max)
{
  int huge =  32767;
  int iterations = FloatToInt(IntToFloat( max)/ IntToFloat(huge), eRoundNearest);
  int result = 0;
  int i;
  
  while (i < iterations)
  {
    result += Random(huge);
    i++;
  }
  return result;
}

//*******************************************************************************
//* overlap on x axis, t x1 is the middle of the sprite
//* 
//******************************************************************************* 
static bool Util::overlap(float x1, float w1, float x2, float w2, float percent)
{
  bool result;
  
  if (percent == 0.0) percent = 1.0;
  float half = percent / 2.0;
  float min1 = x1 - (w1*half);
  float max1 = x1 + (w1*half);
  float min2 = x2 - (w2*half);
  float max2 = x2 + (w2*half);
  
  if ((max1 < min2) || (min1 > max2)) result = true;
  return !result;
}

//*******************************************************************************
//* overlap on x axis, x is leftmost coordinate, tolerance makes the hitbox smaller
//* 
//******************************************************************************* 
static bool Util::overlap2(int x1, int w1, int x2, int w2, int tolerance)
{
  bool result;
  
  int min1 = x1 + tolerance;
  int max1 = x1 + w1 - tolerance;
  int min2 = x2 + tolerance;
  int max2 = x2 + w2 - tolerance;
  
  if ((max1 < min2) || (min1 > max2)) result = true;
  return !result;
}
