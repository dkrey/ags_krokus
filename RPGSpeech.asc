// Snarky's Portrait Speech

#define TEXT_LABEL lblSpeechFront // The label where the text will be written
#define TEXT_LABEL2 lblSpeechFront2 // The label where the text will be written
//#define TEXT_TITLE SpeakerNameLabel // The label where the name caption is written
#define TEXT_GUI gSpeech // The gui the text is on
//#define TEXT_BGGUI gSpeechback // The gui the text is on
#define TIMER_CLOSE 20 // The timer that will be used to close the gui.
#define TIMER_SPEECH 19

#define BG_BUFFER 30;
#define SPEECHFONT eFontVolter
#define LABELFONT eFontVolter
 
#define SPEED_INSTANT   9999.0
#define SPEED_VERY_FAST 2.0
#define SPEED_FAST      1.2
#define SPEED_NORMAL    0.7
#define SPEED_SLOW      0.4
#define SPEED_VERY_SLOW 0.2
 
bool newtext = false;           // If there's a new text bit visible, don't remove the window

int tim;

struct cBGSpeech
{
  int char_i;
  float char_j;
  String text;
  String old_text;
  Character* speaker;
  float speed;
  int timeout;
  int timeout_cnt;
  bool append;
  bool done;
};


//cBGSpeech bg_text[BG_BUFFER];
cBGSpeech bg_text;

import short game_cycle;
import bool in_speech;
import bool always_skip_speech;

bool in_bgspeech;

bool isInteractDown, isSpaceDown;
bool prevent_doubleinteract;

String old_text;                // Text from last command, for use when appending
ViewFrame *firstFrame;

float GetSpeed(TextSpeed speed)
{
  if(speed == Instant)
    return SPEED_INSTANT;
  else if(speed == VeryFast)
    return SPEED_VERY_FAST;
  else if(speed == Fast)
    return SPEED_FAST;
  else if(speed == Normal)
    return SPEED_NORMAL;
  else if(speed == Slow)
    return SPEED_SLOW;
  else
    return SPEED_VERY_SLOW;
}

void StopAnimation(Character* speaker)
{
  if (speaker.SpeechView != 0)
  {
    btnSpeechPort.NormalGraphic = firstFrame.Graphic;
  }
 
}
String RemoveFirst(this String*, int a) {
  int l = this.Length;
  return this.Substring(a, l-a);
}

String FormatIntoLines(this String*, int width, FontType font) {
  
  int words, lines;
  String word[100], line[10];
  int wc, sp;
  String message = this;
  
  while (message.IndexOf(" ") > -1) {
    sp = message.IndexOf(" ");
    word[wc] = message.Substring(0, sp);
    message = message.RemoveFirst(sp+1);
    if (!String.IsNullOrEmpty(word[wc])) wc++;
  }
  word[wc] = message;
  words = wc+1;
 
  String cline = "";
  int cl; // current line dex
  int nw;
  while(nw < words) {
    // end line at [ or line width > width-16
    if (word[nw] == "[" || GetTextWidth(cline.Append(String.Format(" %s", word[nw])), font) + 32 > width) {
      line[cl] = cline;
      cline = "";
      cl++;
      if (word[nw] == "[") nw++;
    }
    else {
      if (cline == "") cline = word[nw];
      else cline = cline.Append(String.Format(" %s", word[nw]));
      nw++;
    }
  }
  line[cl] = cline;
  lines = cl + 1;
  String finaltext = "";
  int i;
  while (i < lines)
  {
    String temp = String.Format ("%s[",line[i]);
    finaltext = finaltext.Append (temp);
    i++;
  }
  return finaltext;
}
    
function EndSpeak()
{
  in_speech = false;
  in_bgspeech = false;
  newtext = false;
  btnSpeechArrow.Visible=false;
  TEXT_GUI.Transparency = 100;
  prevent_doubleinteract = false;
  SetTimer(TIMER_CLOSE, GetGameSpeed()/5);
  TEXT_LABEL.Text  = "";
  TEXT_LABEL2.Text  = "";
  CDG.prevent_doubleinteract();
}


function UpdateBGText()
{
  // Type the text out letter by letter
  if (!bg_text.done && (bg_text.char_i <= bg_text.text.Length))
  {
    bg_text.char_i = FloatToInt(bg_text.char_j, eRoundNearest);
   
    if (always_skip_speech)
    {
      bg_text.char_i = bg_text.text.Length+1;
      bg_text.char_j = IntToFloat(bg_text.char_i);
    }
       
    TEXT_LABEL.Text  = bg_text.text.Truncate(bg_text.char_i);   // Set the label to display the first 'i' characters of the text
    TEXT_LABEL2.Text = bg_text.text.Truncate(bg_text.char_i);   // Set the label to display the first 'i' characters of the text
   
    bg_text.char_j += bg_text.speed;                           // Add 'speed' to the number of characters displayed next loop
 
    // Speed adjustment for punctuation: Pause at the end of sentences and after commas
    if(bg_text.char_i> 0 && bg_text.text.Chars[bg_text.char_i] == ' ')
    {
      if(bg_text.text.Chars[bg_text.char_i-1] == '.' || bg_text.text.Chars[bg_text.char_i-1] == '?' || bg_text.text.Chars[bg_text.char_i-1] == '!')
        bg_text.char_j -= 9.0 * bg_text.speed/10.0; // Wait 10 times as long after the end of a sentence
      else if(bg_text.text.Chars[bg_text.char_i-1] == ',')
        bg_text.char_j -= 2.0 * bg_text.speed/3.0;  // ...and 3 times as long after a comma
    }
    
  } 
  else {
    bg_text.done = true;
    StopAnimation(bg_text.speaker);
    bg_text.old_text = bg_text.text;
  }
  
  if (bg_text.done) {
    if (bg_text.timeout_cnt <  bg_text.timeout) bg_text.timeout_cnt ++;
    else {
      bg_text.timeout_cnt = 0;
      EndSpeak();
    }
  }
 
}


function WriteText(String text, Character* speaker, float speed, int timeout, bool append)
{
  //int oldMode = Mouse.Mode;
  //Mouse.Mode = eModeWait;
  //gDebugConsole.Visible = true;
  int i;
  float j;
  bool skiptyping = false;        // Whether to skip the gradual typing of the text and display it all at once
 
  if (append) // Add this text to the last line
  {
    text = String.Format("%s%s",old_text, text);
    i = old_text.Length;
    j = IntToFloat(i);
  }
 
  // Type the text out letter by letter
  while (i <= text.Length && !Game.SkippingCutscene)
  {
    i = FloatToInt(j, eRoundNearest);
   
    //Skip the typing, I want to read it now!
    if (skiptyping || always_skip_speech)
    {
      i = text.Length+1;
      j = IntToFloat(i);
    }
    
 
    TEXT_LABEL.Text = text.Truncate(i);   // Set the label to display the first 'i' characters of the text
    TEXT_LABEL2.Text = text.Truncate(i);   // Set the label to display the first 'i' characters of the text
   
    j += speed;                           // Add 'speed' to the number of characters displayed next loop
 
    // Speed adjustment for punctuation: Pause at the end of sentences and after commas
    if(i> 0 && text.Chars[i] == ' ')
   {
      if(text.Chars[i-1] == '.' || text.Chars[i-1] == '?' || text.Chars[i-1] == '!')
       j -= 9.0*speed/10.0; // Wait 10 times as long after the end of a sentence
      else if(text.Chars[i-1] == ',')
       j -= 2.0*speed/3.0;  // ...and 3 times as long after a comma
    }
           
    if (prevent_doubleinteract) {
      if (!IsKeyPressed(eKeySpace) && !CTRL.isControlInteract()) {
        isSpaceDown = false;
        isInteractDown = false;
        prevent_doubleinteract = false;
      }
      else Wait(1);
    }
    else {    
      if ( (isSpaceDown &&!IsKeyPressed(eKeySpace)) || (isInteractDown && !CTRL.isControlInteract())){

        skiptyping = true;
        
      } 
      else {
        isSpaceDown = IsKeyPressed(eKeySpace);
        isInteractDown = CTRL.isControlInteract();      
        CDG.prevent_doubleinteract();
        Wait(1);
      }
    }
    
  }
 
  // Typing is done, so stop the animation
  
  StopAnimation(speaker);
  old_text = text;
  btnSpeechArrow.Visible=true;
  
  isSpaceDown= false;
  isInteractDown = false;
  if(timeout>0 && !Game.SkippingCutscene)
  {
    Wait(timeout);
  }

  else while(true && !Game.SkippingCutscene)
  {

    if (prevent_doubleinteract) {
      if (!IsKeyPressed(eKeySpace) && !CTRL.isControlInteract()) {
        isSpaceDown = false;
        isInteractDown = false;
        prevent_doubleinteract = false;
      }
      else Wait(1);
    }
    else {
      if ( (isSpaceDown &&!IsKeyPressed(eKeySpace)) || (isInteractDown && !CTRL.isControlInteract()) ){
        EndSpeak();
        isSpaceDown = IsKeyPressed(eKeySpace);
        isInteractDown = CTRL.isControlInteract();
        return; 
      }
      else {
          isSpaceDown  = IsKeyPressed(eKeySpace);
          isInteractDown = CTRL.isControlInteract();      
          Wait(1);
      }
    }

  }
  EndSpeak();
}

function Speak(this Character*, String say, int loop, TextSpeed speed,  int timeout, bool append, bool hidePortrait, bool bgspeech)
{
  
  btnSpeechArrow.Visible=false;
  newtext = true;

  if (!TEXT_GUI.Visible) {
    TEXT_GUI.Visible = true;

  }  

  TEXT_LABEL.TextColor = this.SpeechColor;
  TEXT_GUI.Transparency = 0;
  lblSpeechFront.Font   = SPEECHFONT;
  lblSpeechFront2.Font  = lblSpeechFront.Font;
  lblSpeechlbl.Font     = LABELFONT;
  lblSpeechlbl2.Font    = lblSpeechlbl.Font;
  
  if (this.SpeechView != 0)
  {
    firstFrame = Game.GetViewFrame(this.SpeechView, loop, 0);
    btnSpeechPort.NormalGraphic = firstFrame.Graphic;
    btnSpeechPort.Animate(this.SpeechView, loop, this.SpeechAnimationDelay, eRepeat);
  }
  else hidePortrait = true;

  if (hidePortrait) {
    btnSpeechPort.Visible     = false;
    btnSpeechLblLeft.Visible  = false;
    btnSpeechLblMid.Visible   = false;
    btnSpeechLblRight.Visible = false;
    lblSpeechlbl.Visible      = false;
    lblSpeechlbl2.Visible     = false;
    lblSpeechFront.X          = btnSpeechPort.X+2;
    lblSpeechFront.Width      = 300;
    lblSpeechFront2.X         = btnSpeechPort.X+2;
    lblSpeechFront2.Width     = 300;    
  }
  else {
    btnSpeechPort.Visible     = true;
    btnSpeechLblLeft.Visible  = true;
    btnSpeechLblMid.Visible   = true;
    btnSpeechLblRight.Visible = true;
    lblSpeechlbl.Visible      = true;
    lblSpeechlbl2.Visible     = true;
    lblSpeechFront.X          = 47;
    lblSpeechFront.Width      = 280;
    lblSpeechFront2.X         = 47;
    lblSpeechFront2.Width     = 280;    
  }

  //Update Label
  lblSpeechlbl.Text = this.Name;
  lblSpeechlbl2.Text = this.Name;
  btnSpeechLblMid.Width = GetTextWidth(this.Name, LABELFONT);
  btnSpeechLblRight.X = btnSpeechLblLeft.X + 6 + btnSpeechLblMid.Width;
  say = say.FormatIntoLines(lblSpeechFront.Width, SPEECHFONT);

  in_bgspeech  = false;
  bg_text.done = true;
  bg_text.text = "";
  bg_text.timeout_cnt = 0;
  
  if (bgspeech) {
    gSpeech.Y = 20;
    bg_text.speaker    = this;
    bg_text.speed      = GetSpeed(speed);
    bg_text.timeout    = timeout;
    bg_text.append     = append;
    bg_text.done       = false;
    
    bg_text.text      = say;
    bg_text.old_text  = "";    
    bg_text.char_i    = 0;
    bg_text.char_j    = 0.0;    

    in_bgspeech = true;
  }
  else {
    gSpeech.Y = 126;
    in_speech = true;
    prevent_doubleinteract = true;
    WriteText(say, this, GetSpeed(speed), timeout, append);
  }
 
}

function SpeakBackground(this Character*, String say, int loop, int timeout, bool hidePortrait)
{
  this.Speak(say, loop, Fast, timeout,false, hidePortrait,true);
}

function repeatedly_execute_always()
{

  if (in_bgspeech ) {
    if (IsTimerExpired(TIMER_SPEECH)) UpdateBGText();
    else SetTimer(TIMER_SPEECH, 1);  
  }
  
  if(IsTimerExpired(TIMER_CLOSE) && !newtext) {
    TEXT_GUI.Visible = false;
    CDG.prevent_doubleinteract();
    tim=0;
  }
  

  if (btnSpeechArrow.Visible==true) {
    if (tim > 10) {
      if (btnSpeechArrow.Y == 64) btnSpeechArrow.Y = 65;
      else btnSpeechArrow.Y = 64;
      tim=0;
    }
    tim++;
    
  }
}