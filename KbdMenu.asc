// Keyboardmenu from AoD by dkh
#define MENUFONT eFontCapsOut
#define OPTIONFONT eFontCaps

enum MenuState
{
	MenuState_Main,
	MenuState_Start, 
	MenuState_Options, 
	MenuState_Controls, 
	MenuState_Ingame, 
	MenuState_Save, 
	MenuState_Quit
};


DynamicSprite *sceneBuffer;
MenuState state;
float mainMenuPosition, mainMenuVelocity;
float startMenuPosition, startMenuVelocity;
float optionsMenuPosition, optionsMenuVelocity;
float controlsMenuPosition, controlsMenuVelocity;
float ingameMenuPosition, ingameMenuVelocity;
float saveMenuPosition, saveMenuVelocity;
float quitMenuPosition, quitMenuVelocity;
int selectedItem = 0;
float arrowAnimation;
int immediateControlOverwriteHackTimer;

bool isUpDown, isDownDown, isRightDown, isLeftDown, isSelectDown, isSpaceDown, isReturnDown, isBackspaceDown, isEscDown, isJumpDown;
bool preventDoubleInteract;
bool ingame;
bool save_available;

int menu_bg = 384;
int key_bg  = 251;
int joy_bg  = 251;
int selector_sprite = 385;

int font_normal_col;
int font_active_col = 55980;
int font_bg_col = 8454;
int font_btn_col = 2;
float menu_xpos = 120.0;
float menu_ypos = 126.0;
float menu_velocity = 16.0;
float menu_hidepos = 200.0;


void reset_menu() {
  // starting menu stuff
	mainMenuPosition = menu_hidepos;
	mainMenuVelocity = menu_velocity;
	
	startMenuPosition = menu_hidepos;
	startMenuVelocity = menu_velocity;
	
	optionsMenuPosition = menu_hidepos;
	optionsMenuVelocity = menu_velocity;
	
	controlsMenuPosition = menu_hidepos;
	controlsMenuVelocity = menu_velocity;
  
	ingameMenuPosition = menu_hidepos;
	ingameMenuVelocity = menu_velocity;  
	
	saveMenuPosition = menu_hidepos;
	saveMenuVelocity = menu_velocity;  

	quitMenuPosition = menu_hidepos;
	quitMenuVelocity = menu_velocity;  
	arrowAnimation = 0.0;  
}


function game_start()
{
  sceneBuffer = DynamicSprite.Create(Screen.Width, Screen.Height, false);
}


void show_menu(bool is_ingame)
{
  
  save_available = !String.IsNullOrEmpty(Game.GetSaveSlotDescription(1));
  ingame =is_ingame;
  arrowAnimation = 0.0;
  
  if (ingame) {
    game.text_shadow_color=0; 
    font_normal_col = 13072;
    gKbdMenu.BackgroundGraphic = 329;
    
    state = MenuState_Ingame;
    menu_velocity = 24.0;
    menu_ypos = 56.0;
    menu_hidepos = 200.0;
    ingameMenuPosition = menu_ypos;
    ingameMenuVelocity = 0.0;
  }
  else {
    game.text_shadow_color=Game.GetColorFromRGB(34, 32, 52); 
    font_normal_col = Game.GetColorFromRGB(91,110,225);
    //font_normal_col = Game.GetColorFromRGB(217,160,102);
    gKbdMenu.BackgroundGraphic = 379;
    state = MenuState_Main;
    menu_hidepos = 400.0;
    menu_velocity = 56.0;
    menu_ypos = 126.0;
  }
  reset_menu();
  selectedItem = 0;
  gKbdMenu.Visible= true;
}

void hide_menu()
{
  arrowAnimation = 0.0;
  selectedItem = 0;
  game.text_shadow_color=0;
  gKbdMenu.Visible= false;
  
}

void handleInput()
{
  if (isUpDown && !CTRL.isControlUp())
  {
    selectedItem--;
    
    // Menus up
    if (state == MenuState_Main && selectedItem < 0)
      selectedItem = 3;
    else if ((state == MenuState_Quit) && selectedItem < 0)
      selectedItem = 1;
    else if ((state == MenuState_Options ) && selectedItem < 0)
      selectedItem = 4;      
    else if (state == MenuState_Start && selectedItem <0) {
      if (save_available)  selectedItem = 1;
      else  selectedItem = 0;
    }
    else if (state == MenuState_Controls)
    {
      if (selectedItem < 0)
        selectedItem = 8;
      else if (selectedItem == 8)
        selectedItem = 14;
    }
    else if (state == MenuState_Ingame && selectedItem < 0) 
      selectedItem = 4;
  }
  else if (isDownDown && !CTRL.isControlDown())
  {
    selectedItem++;
    
    // Menus down
    if ((state == MenuState_Main && selectedItem > 3) || (state == MenuState_Quit && selectedItem > 1) )
      selectedItem = 0;
    else if (state == MenuState_Options  && selectedItem > 4) selectedItem = 0;
    else if (state == MenuState_Start) {
      if (save_available && selectedItem > 1)  selectedItem = 0;
      else if (!save_available && selectedItem > 0)selectedItem = 0;
    }      
    else if (state == MenuState_Controls)
    {
      if (selectedItem > 14)
        selectedItem = 9;
      else if (selectedItem == 9)
        selectedItem = 0;
    }
    else if (state == MenuState_Ingame && selectedItem > 4) selectedItem = 0;
  }
  else if (isLeftDown && !CTRL.isControlLeft())
  {
    // Menus left
    if (state == MenuState_Controls) {
      if (selectedItem >= 9)
        selectedItem -= 9;
    }
    else if (state == MenuState_Options) {
      if (selectedItem == 2) {
        bool skipstyle = Settings.get_skip_speech();
        Settings.set_skip_speech(!skipstyle);
      }
      else if (selectedItem == 3) {
        bool skippyframes = Settings.get_skippy_frames();
        Settings.set_skippy_frames(!skippyframes);
      }
      else if (selectedItem == 4) {
        bool dis_para = Settings.get_disable_parallax();
        Settings.set_disable_parallax(!dis_para);
      }      
    }

    
  }
  else if (isRightDown && !CTRL.isControlRight())
  {
    if (state == MenuState_Controls){
      if (selectedItem <= 5)  selectedItem += 9;
      else if (selectedItem >5) selectedItem = 9;
    }
    else if (state == MenuState_Options) {
      if (selectedItem == 2) {
        bool skipstyle = Settings.get_skip_speech();
        Settings.set_skip_speech(!skipstyle);
      }
      else if (selectedItem == 3) {
        bool skippyframes = Settings.get_skippy_frames();
        Settings.set_skippy_frames(!skippyframes);
      }
      else if (selectedItem == 4) {
        bool dis_para = Settings.get_disable_parallax();
        Settings.set_disable_parallax(!dis_para);
      }         
    }   
  }
  else if (CTRL.isControlLeft())
  {
    if (state == MenuState_Options)
    {
      if (selectedItem == 0)
      {
        Settings.setMusicVolume(Settings.getMusicVolume() - 1);
        
        if (Settings.getMusicVolume() < 0)
          Settings.setMusicVolume(0);
          
        Game.SetAudioTypeVolume(eAudioTypeMusic, Settings.getMusicVolume(), eVolExistingAndFuture);
      }
      else if (selectedItem == 1)
      {
        Settings.setSoundVolume(Settings.getSoundVolume() - 1);
        
        if (Settings.getSoundVolume() < 0)
          Settings.setSoundVolume(0);
          
        Game.SetAudioTypeVolume(eAudioTypeSound, Settings.getSoundVolume(), eVolExistingAndFuture);
      }
    }
  }
  else if (CTRL.isControlRight())
  {
    if (state == MenuState_Options)
    {
      if (selectedItem == 0)
      {
        Settings.setMusicVolume(Settings.getMusicVolume() + 1);
        
        if (Settings.getMusicVolume() > 100)
          Settings.setMusicVolume(100);
          
        Game.SetAudioTypeVolume(eAudioTypeMusic, Settings.getMusicVolume(), eVolExistingAndFuture);
      }
      else if (selectedItem == 1)
      {
        Settings.setSoundVolume(Settings.getSoundVolume() + 1);
        
        if (Settings.getSoundVolume() > 100)
          Settings.setSoundVolume(100);
          
        Game.SetAudioTypeVolume(eAudioTypeSound, Settings.getSoundVolume(), eVolExistingAndFuture);
      }
    }
  }
  // Select a thing
  else if ((isSpaceDown && !IsKeyPressed(eKeySpace)) || (isReturnDown && !IsKeyPressed(eKeyReturn)) || (isSelectDown && !CTRL.isControlInteract()) )
  {
    if (state == MenuState_Main)
    {
      if (selectedItem == 0)
      {
        selectedItem = 0;
        startMenuVelocity = menu_velocity;
        state = MenuState_Start;
      }
      // Options
      else if (selectedItem == 1)
      {
        selectedItem = 0;
        optionsMenuVelocity = menu_velocity;
        state = MenuState_Options;
      }
      // Controls
      else if (selectedItem == 2)
      {
        selectedItem = 0;
        controlsMenuVelocity = menu_velocity;
        state = MenuState_Controls;
      }        
      else if (selectedItem == 3)
      {
        selectedItem = 0;
        quitMenuVelocity = menu_velocity;
        state = MenuState_Quit;  
      }

    }
    else if (state == MenuState_Start)
    {
      if (selectedItem == 0){
        hide_menu();
        player.ChangeRoom(302);
        
      }
      else if (selectedItem == 1) {
        if (String.IsNullOrEmpty(Game.GetSaveSlotDescription(1))) Display ("No game to continue.");
        else RestoreGameSlot (1);  
      }
    }
    else if (state == MenuState_Quit)
    {
      if (selectedItem == 0)
      {
        if (ingame) {
          selectedItem = 4;
          quitMenuVelocity = menu_velocity;
          state = MenuState_Ingame;          
        }
        else {
          selectedItem = 3;
          quitMenuVelocity = menu_velocity;
          state = MenuState_Main;          
        }

      }
      else if (selectedItem == 1) {
        if (ingame) {
          gLoading.Visible = true;
          player.x = -100;
          player.y = -100;
          leveledit = "";
          hide_menu();
          player.ChangeRoom(1);
        }
        else {
          QuitGame(0);
        }
      }
    }
    else if (state == MenuState_Controls) {
      
      // Joystick
      if (selectedItem >= 9) {
        if (selectedItem == 9) {
          MapJoy.Get_free_joystick();
        }
        else MapJoy.Get_joy_menu(selectedItem);
      }
      // Keyboard
      else {
        preventDoubleInteract = true;
        KeySwap.GetKeyMenu(selectedItem);
      }
    }
    // Ingame Menu
    else if (state == MenuState_Ingame) 
    {
      // Resume
      if (selectedItem == 0) hide_menu();
      // Options
      else if (selectedItem == 1) {
        selectedItem = 0;
        optionsMenuVelocity = menu_velocity;
        state = MenuState_Options;        
      }
      // Controls
      else if (selectedItem == 2)
      {
        selectedItem = 0;
        controlsMenuVelocity = menu_velocity;
        state = MenuState_Controls;
      }
      //Save
      else if (selectedItem == 3)
      {
        SaveGameSlot(1,"Autosave");
        selectedItem = 0; 
        state = MenuState_Save;
        saveMenuVelocity = menu_velocity;
      }
      //quit
      else if (selectedItem == 4)
      {
        selectedItem = 0;
        quitMenuVelocity = menu_velocity;
        state = MenuState_Quit;  
      }
      
    }
    else if (state == MenuState_Save) 
    {
        selectedItem = 3;
        saveMenuVelocity = menu_velocity;
        state = MenuState_Ingame;      
    }
  }
  else if ((isJumpDown && !CTRL.isControlJump()) || (isEscDown && !IsKeyPressed(eKeyEscape)) || (isBackspaceDown && !IsKeyPressed(eKeyBackspace)) )
  {
    if (state == MenuState_Start)
    {
      selectedItem = 0;
      startMenuVelocity = 8.1;
      state = MenuState_Main;
    }
    else if (state == MenuState_Options)
    {
      Settings.save();
      selectedItem = 1;
      optionsMenuVelocity = 8.1;
      if (ingame) state = MenuState_Ingame;
      else state = MenuState_Main;
    }
    else if (state == MenuState_Controls)
    {
      KeySwap.Save();
      MapJoy.Save();
      CTRL.init_controls();
      selectedItem = 2;
      controlsMenuVelocity = 8.1;
      if (ingame) state = MenuState_Ingame;
      else state = MenuState_Main;
    }
    else if (state == MenuState_Quit)
    {
      quitMenuVelocity = 8.1;
      if (ingame) { 
        selectedItem = 4;
        state = MenuState_Ingame;
      }
      else {
        selectedItem = 3;
        state = MenuState_Main;
      }
    }
  }
}



function updateStartMenu()
{
	if (state == MenuState_Start)
	{
		if (startMenuPosition == menu_ypos)
			return;
		
		startMenuPosition -= startMenuVelocity;
		startMenuVelocity = startMenuVelocity * 0.9;
		
		if (startMenuVelocity < 0.1)
			startMenuVelocity = 0.1;
		
		if (startMenuPosition < menu_ypos)
			startMenuPosition = menu_ypos;
	}
	else
	{
		if (startMenuPosition == menu_hidepos)
			return;
		
		startMenuPosition += startMenuVelocity;
		startMenuVelocity = startMenuVelocity * 1.1;
		
		if (startMenuVelocity > menu_velocity)
			startMenuVelocity = menu_velocity;
		
		if (startMenuPosition > menu_hidepos)
			startMenuPosition = menu_hidepos;
	}
}

function updateOptionsMenu()
{
	if (state == MenuState_Options)
	{
		if (optionsMenuPosition == menu_ypos)
			return;
		
		optionsMenuPosition -= optionsMenuVelocity;
		optionsMenuVelocity = optionsMenuVelocity * 0.9;
		
		if (optionsMenuVelocity < 0.1)
			optionsMenuVelocity = 0.1;
		
		if (optionsMenuPosition < menu_ypos)
			optionsMenuPosition = menu_ypos;
	}
	else
	{
		if (optionsMenuPosition == menu_hidepos)
			return;
		
		optionsMenuPosition += optionsMenuVelocity;
		optionsMenuVelocity = optionsMenuVelocity * 1.1;
		
		if (optionsMenuVelocity > menu_velocity)
			optionsMenuVelocity = menu_velocity;
		
		if (optionsMenuPosition > menu_hidepos)
			optionsMenuPosition = menu_hidepos;
	}
}

function updateControlsMenu()
{
	if (state == MenuState_Controls)
	{
    float extra_ypos = 50.0;
    if (ingame) extra_ypos = 0.0;
    
		if (controlsMenuPosition == menu_ypos-extra_ypos)
			return;
		
		controlsMenuPosition -= controlsMenuVelocity;
		controlsMenuVelocity = controlsMenuVelocity * 0.9;
		
		if (controlsMenuVelocity < 0.1)
			controlsMenuVelocity = 0.1;
		
		if (controlsMenuPosition < menu_ypos-extra_ypos)
			controlsMenuPosition = menu_ypos-extra_ypos;
	}
	else
	{
		if (controlsMenuPosition == menu_hidepos)
			return;
		
		controlsMenuPosition += controlsMenuVelocity;
		controlsMenuVelocity = controlsMenuVelocity * 1.1;
		
		if (controlsMenuVelocity > menu_velocity)
			controlsMenuVelocity = menu_velocity;
		
		if (controlsMenuPosition > menu_hidepos)
			controlsMenuPosition = menu_hidepos;
	}
}

function updateMainMenu()
{
	if (state == MenuState_Main)
	{
		if (mainMenuPosition == menu_ypos)
			return;
		
		mainMenuPosition -= mainMenuVelocity;
		mainMenuVelocity = mainMenuVelocity * 0.9;
		
		if (mainMenuVelocity < 0.1)
			mainMenuVelocity = 0.1;
		
		if (mainMenuPosition < menu_ypos)
			mainMenuPosition = menu_ypos;
	}
	else
	{
		if (mainMenuPosition == menu_hidepos)
			return;
		
		mainMenuPosition += mainMenuVelocity;
		mainMenuVelocity = mainMenuVelocity * 1.1;
		
		if (mainMenuVelocity > menu_velocity)
			mainMenuVelocity = menu_velocity;
		
		if (mainMenuPosition > menu_hidepos)
			mainMenuPosition =  menu_hidepos;
	}
}


function updateQuitMenu()
{
	if (state == MenuState_Quit)
	{
		if (quitMenuPosition == menu_ypos)
			return;
		
		quitMenuPosition -= quitMenuVelocity;
		quitMenuVelocity = quitMenuVelocity * 0.9;
		
		if (quitMenuVelocity < 0.1)
			quitMenuVelocity = 0.1;
		
		if (quitMenuPosition < menu_ypos)
			quitMenuPosition = menu_ypos;
	}
	else
	{
		if (quitMenuPosition == menu_hidepos)
			return;
		
		quitMenuPosition += quitMenuVelocity;
		quitMenuVelocity = quitMenuVelocity * 1.1;
		
		if (quitMenuVelocity > menu_velocity)
			quitMenuVelocity = menu_velocity;
		
		if (quitMenuPosition > menu_hidepos)
			quitMenuPosition =  menu_hidepos;
	}
}

function updateSaveMenu()
{
	if (state == MenuState_Save)
	{
		if (saveMenuPosition == menu_ypos)
			return;
		
		saveMenuPosition -= saveMenuVelocity;
		saveMenuVelocity = saveMenuVelocity * 0.9;
		
		if (saveMenuVelocity < 0.1)
			saveMenuVelocity = 0.1;
		
		if (saveMenuPosition < menu_ypos)
			saveMenuPosition = menu_ypos;
	}
	else
	{
		if (saveMenuPosition == menu_hidepos)
			return;
		
		saveMenuPosition += saveMenuVelocity;
		saveMenuVelocity = saveMenuVelocity * 1.1;
		
		if (saveMenuVelocity > menu_velocity)
			saveMenuVelocity = menu_velocity;
		
		if (saveMenuPosition > menu_hidepos)
			saveMenuPosition =  menu_hidepos;
	}
}

function updateIngameMenu()
{
	if (state == MenuState_Ingame)
	{
		if (mainMenuPosition == menu_ypos)
			return;
		
		ingameMenuPosition -= ingameMenuVelocity;
    
		ingameMenuVelocity = ingameMenuVelocity * 0.9;
		
		if (ingameMenuVelocity < 0.1)
			ingameMenuVelocity = 0.1;
		
		if (ingameMenuPosition < menu_ypos)
			ingameMenuPosition = menu_ypos;
	}
	else
	{
		if (ingameMenuPosition == menu_hidepos)
			return;
		
		ingameMenuPosition += ingameMenuVelocity;
		ingameMenuVelocity = ingameMenuVelocity * 1.1;
		
		if (ingameMenuVelocity > menu_velocity)
			ingameMenuVelocity = menu_velocity;
		
		if (ingameMenuPosition > menu_hidepos)
			ingameMenuPosition =  menu_hidepos;
	}
}

function updateAnimationTimer()
{
	arrowAnimation += 0.2;
}

function drawMainMenu(DrawingSurface *surface)
{	

	int guiX = FloatToInt(menu_xpos);
	int guiY = FloatToInt(mainMenuPosition);
  
	String strings[4];
	strings[0] = "Start";
	strings[1] = "Options";
	strings[2] = "Controls";
	strings[3] = "Quit";
	
	int i = 0;
	while (i < 4)
	{    
		surface.DrawingColor = font_normal_col;
		
		if (i == selectedItem && state == MenuState_Main)
			surface.DrawingColor = font_active_col;
		
		surface.DrawString(guiX + 16, guiY - 11 + 12 * (2 + i), MENUFONT, strings[i]);

		
		i++;
	}
	
	if (state == MenuState_Main)
		surface.DrawImage(guiX + 0 + FloatToInt(Maths.Sin(arrowAnimation) * 2.0), guiY - 10 + 12 * (2 + selectedItem), selector_sprite);
}


function drawIngameMenu(DrawingSurface *surface)
{	

	int guiX = FloatToInt(menu_xpos);
	int guiY = FloatToInt(ingameMenuPosition);

	String strings[5];
	strings[0] = "Resume";
	strings[1] = "Options";
	strings[2] = "Controls";
	strings[3] = "Save";
	strings[4] = "Quit To Title";
	
	int i = 0;
	while (i < 5)
	{    
		surface.DrawingColor = font_normal_col;
		
		if (i == selectedItem && state == MenuState_Ingame)
			surface.DrawingColor = font_active_col;
		
		surface.DrawString(guiX + 16, guiY - 11 + 12 * (2 + i), MENUFONT, strings[i]);

		
		i++;
	}
	
	if (state == MenuState_Ingame)
		surface.DrawImage(guiX + 0 + FloatToInt(Maths.Sin(arrowAnimation) * 2.0), guiY - 10 + 12 * (2 + selectedItem), selector_sprite);
}


function drawStartMenu(DrawingSurface *surface)
{
  
  int guiX = FloatToInt(menu_xpos);
	int guiY = FloatToInt(startMenuPosition);

	
	String strings[2];
	strings[0] = "New Game";
	strings[1] = "Continue";
	
  int option_count = 1+save_available;
	int i = 0;
	while (i < option_count )
	{
		surface.DrawingColor = font_normal_col;
		
		if (i == selectedItem && state == MenuState_Start)
			surface.DrawingColor = font_active_col;

		surface.DrawString(guiX + 16, guiY - 5 + 12 * (2 + i), MENUFONT, strings[i]);
		
		i++;
	}
	
	if (state == MenuState_Start)
		surface.DrawImage(guiX + 0 + FloatToInt(Maths.Sin(arrowAnimation) * 2.0), guiY - 4 + 12 * (2 + selectedItem), selector_sprite);
}

function drawOptionsMenu(DrawingSurface *surface)
{
  int guiX = FloatToInt(menu_xpos);
	int guiY = FloatToInt(optionsMenuPosition);
		
	String strings[5];
	strings[0] = String.Format("Music: %d%", Settings.getMusicVolume());
	strings[1] = String.Format("Sound: %d%", Settings.getSoundVolume());
  if (Settings.get_skip_speech()) {
    strings[2] = "Show Speech: Instant";
  }
  else strings[2] = "Show Speech: Typewriter";
  
  if (Settings.get_skippy_frames()) {
    strings[3] = "Smooth Scrolling: off";
  }
  else strings[3] = "Smooth Scrolling: on";
  
  if (Settings.get_disable_parallax()) {
    strings[4] = "Disable Parallax: yes";
  }
  else strings[4] = "Disable Parallax: no";
	
	int i = 0;
	while (i < 5)
	{
		surface.DrawingColor = font_normal_col;
		
		if (i == selectedItem && state == MenuState_Options)
			surface.DrawingColor = font_active_col;
			
		surface.DrawString(guiX + 16, guiY - 5 + 12 * (2 + i), MENUFONT, strings[i]);
		
		i++;
	}
	
	if (state == MenuState_Options)
		surface.DrawImage(guiX + 0 + FloatToInt(Maths.Sin(arrowAnimation) * 2.0), guiY - 4 + 12 * (2 + selectedItem), selector_sprite);
}



function drawControlsMenu(DrawingSurface *surface)
{
  int guiX = FloatToInt(menu_xpos);
	int guiY = FloatToInt(controlsMenuPosition);
	
  surface.DrawingColor = 15;
  surface.DrawString(guiX -59, guiY  , eFontBold, "Keyboard");
  surface.DrawString(guiX +66, guiY , eFontBold, "Joystick");
  
	String strings[15];
	
	// keyboard
	strings[0] = String.Format("Left: %s",      KeySwap.GetKeyDesc(eMKLeft));
	strings[1] = String.Format("Right: %s",     KeySwap.GetKeyDesc(eMKRight));
	strings[2] = String.Format("Up: %s",        KeySwap.GetKeyDesc(eMKUp));
	strings[3] = String.Format("Down: %s",      KeySwap.GetKeyDesc(eMKDown));
	strings[4] = String.Format("Jump: %s",      KeySwap.GetKeyDesc(eMKJump));
	strings[5] = String.Format("Attack: %s",    KeySwap.GetKeyDesc(eMKShoot));
	strings[6] = String.Format("Interact: %s",  KeySwap.GetKeyDesc(eMKInteract));
	strings[7] = String.Format("Inventory: %s", KeySwap.GetKeyDesc(eMKInv));
	strings[8] = String.Format("Pause: %s",     KeySwap.GetKeyDesc(eMKPause));
	
	// controller
	strings[9] = String.Format("Device: %s",    MapJoy.GetJoyName());
	strings[10] = String.Format("Jump: %s",     MapJoy.GetJoyDesc(eJoyJump));
	strings[11] = String.Format("Attack: %s",   MapJoy.GetJoyDesc(eJoyShoot));
	strings[12] = String.Format("Interact: %s", MapJoy.GetJoyDesc(eJoyInteract));
	strings[13] = String.Format("Inventory: %s",MapJoy.GetJoyDesc(eJoyInv));
	strings[14] = String.Format("Pause: %s",    MapJoy.GetJoyDesc(eJoyPause));
	
	int i = 0;
	while (i < 9)
	// keyboard
	{
		surface.DrawingColor = font_normal_col;
		
		if (i == selectedItem && state == MenuState_Controls)
			surface.DrawingColor = font_active_col;
			
		surface.DrawString(guiX + 16 - 75, guiY - 11 + 12 * (2 + i), MENUFONT, strings[i]);
		
		i++;
	}
	
	i = 0;
	while (i < 6)
	// gamepad
	{
		surface.DrawingColor = font_normal_col;
		
		if (i + 9 == selectedItem && state == MenuState_Controls)
			surface.DrawingColor = font_active_col;
			
		surface.DrawString(guiX + 16 + 50, guiY - 11 + 12 * (2 + i), MENUFONT, strings[i + 9]);
		
		i++;
	}
	
	if (state == MenuState_Controls)
	{
		if (selectedItem <= 8)
		// keyboard column
			surface.DrawImage(guiX + 0 - 75 + FloatToInt(Maths.Sin(arrowAnimation) * 2.0), guiY - 10 + 12 * (2 + selectedItem), selector_sprite);
		else
		// controller column
			surface.DrawImage(guiX + 0 + 50 + FloatToInt(Maths.Sin(arrowAnimation) * 2.0), guiY - 10 + 12 * (2 + (selectedItem - 9)), selector_sprite);
	}
}

function drawQuitMenu(DrawingSurface *surface)
{
  int guiX = FloatToInt(menu_xpos);
  int guiY = FloatToInt(quitMenuPosition);

  surface.DrawingColor = font_normal_col;
  if (ingame) surface.DrawString(guiX + 16, guiY - 5 + 24, MENUFONT, "Back to title?");
  else surface.DrawString(guiX + 16, guiY - 5 + 24, MENUFONT, "Quit Game?");
  
  String strings[2];
  strings[0] = "No";
  strings[1] = "Yes";
  
  int i = 0;
  while (i < 2)
  {
    
    surface.DrawingColor = font_normal_col;
    
    if (i == selectedItem && state == MenuState_Quit)
      surface.DrawingColor = font_active_col;
      
    surface.DrawString(guiX + 16, guiY + 15 + 12 * (2 + i), MENUFONT, strings[i]);
    
    i++;
  }
  
  if (state == MenuState_Quit)
    surface.DrawImage(guiX + 0 + FloatToInt(Maths.Sin(arrowAnimation) * 2.0), guiY + 16 + 12 * (2 + selectedItem), selector_sprite);

}

function drawSaveMenu(DrawingSurface *surface)
{
  int guiX = FloatToInt(menu_xpos);
  int guiY = FloatToInt(saveMenuPosition);

  surface.DrawingColor = 15;
  surface.DrawString(guiX + 16, guiY - 5 + 24, eFontBold, "Game Saved");
  
  surface.DrawingColor = font_active_col;
    
  surface.DrawString(guiX + 16, guiY + 15 + 12 * 2, MENUFONT, "Okay");

  if (state == MenuState_Save)
    surface.DrawImage(guiX + 0 + FloatToInt(Maths.Sin(arrowAnimation) * 2.0), guiY + 16 + 12 * 2, selector_sprite);
  
}

function render()
{
	DrawingSurface *surface = sceneBuffer.GetDrawingSurface();
	surface.Clear();
  
  if (ingame) {
    //surface.DrawImage(0, 0, 670);
    surface.DrawImage(20, 20, 684);
  }
		
	if (mainMenuPosition < menu_hidepos)   drawMainMenu(surface);
  if (ingameMenuPosition < menu_hidepos) drawIngameMenu(surface);
	if (startMenuPosition < menu_hidepos)  drawStartMenu(surface);
	if (optionsMenuPosition < menu_hidepos) drawOptionsMenu(surface);
	if (controlsMenuPosition < menu_hidepos)drawControlsMenu(surface);
  if (saveMenuPosition < menu_hidepos)   drawSaveMenu(surface);
	if (quitMenuPosition < menu_hidepos)   drawQuitMenu(surface);
	
	surface.Release();
  btnKbdMenuBg.NormalGraphic = sceneBuffer.Graphic;
}

function update()
{

	updateMainMenu();
  updateIngameMenu();
	updateStartMenu();
	updateOptionsMenu();
	updateControlsMenu();
	updateQuitMenu();  
  updateSaveMenu();
	updateAnimationTimer();
  
	if (!gJoyPopup.Visible && !gKSPopup.Visible && !preventDoubleInteract) {
    handleInput();
    isSpaceDown  = IsKeyPressed(eKeySpace);
    isReturnDown = IsKeyPressed(eKeyReturn);
    isEscDown    = IsKeyPressed(eKeyEscape);
    isBackspaceDown = IsKeyPressed(eKeyBackspace);
    
    isUpDown     = CTRL.isControlUp();
    isDownDown   = CTRL.isControlDown();
    isRightDown  = CTRL.isControlRight();
    isLeftDown   = CTRL.isControlLeft();
    isSelectDown = CTRL.isControlInteract();
    isJumpDown   = CTRL.isControlJump();
  }
  
  if (preventDoubleInteract && !gJoyPopup.Visible && !gKSPopup.Visible) {
    if (!CTRL.isControlUp() && !CTRL.isControlDown() &&  !CTRL.isControlRight() && !CTRL.isControlLeft() && !CTRL.isControlInteract()
        && !CTRL.isControlJump() && !IsKeyPressed(eKeySpace) && !IsKeyPressed(eKeyReturn) && !IsKeyPressed(eKeyEscape) 
    && !IsKeyPressed(eKeyBackspace)) {
      preventDoubleInteract = false;
    }
       
  }
}


function repeatedly_execute() {
  if (gKbdMenu.Visible == true) {
    update();
    render();
  }
}