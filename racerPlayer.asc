// new module script
import cRacerVars rv;
import cSpritePlayer player_sprites;

bool player_flashing;
bool block_controls;
bool reset_player;


//*******************************************************************************
//* PLAYR::animate_player
//* 
//*******************************************************************************
static void PLAYR::animate() 
{
  int frame;
  int ani_speed = FloatToInt((rv.speed/rv.maxSpeed)*IntToFloat(rv.fps), eRoundDown);
  
  // Define delay per frame
  if (ani_speed ==0)  player_sprites.frame_delay = 0;
  else if (ani_speed > 0 && ani_speed < 25)  player_sprites.frame_delay = 20;
  else if (ani_speed > 25 && ani_speed < 50) player_sprites.frame_delay = 10;
  else if (ani_speed > 50) player_sprites.frame_delay = 5;
  
  // set loop by direction
  if (player_sprites.dir == eDirectionLeft) player_sprites.loop = 1;  
  else if (player_sprites.dir ==eDirectionRight) player_sprites.loop = 2;
  else player_sprites.loop = 0;
  
  
  int frmcount = Game.GetFrameCountForLoop(player_sprites.view,  player_sprites.loop);
  player_sprites.vf = Game.GetViewFrame(player_sprites.view, player_sprites.loop, player_sprites.frame);
  

  // Animation delay
  if (player_sprites.frame_delay > 0 && player_sprites.frame_cnt > player_sprites.frame_delay) 
  { 
    //Frame progression
    if (player_sprites.frame >= frmcount-1) player_sprites.frame = 0;
    else player_sprites.frame ++;

    player_sprites.vf = Game.GetViewFrame(player_sprites.view, player_sprites.loop, player_sprites.frame);
    player_sprites.current_sprite = player_sprites.vf.Graphic;

    player_sprites.frame_cnt  = 0;
  }
  else {
    player_sprites.frame_cnt++;
  }

  
}


//*******************************************************************************
//* handle_player_invincibility
//* makes the player flashing
//*
//*******************************************************************************
static void PLAYR::handle_invincibility()
{
  if (player_sprites.s_invincible) {
    ViewFrame *CurrentFrame = Game.GetViewFrame(player_sprites.view, player_sprites.loop, player_sprites.frame); 
    player_sprites.overlay  = DynamicSprite.CreateFromExistingSprite(player_sprites.dither);
    
    player_sprites.overlay.Crop(0, 0, Game.SpriteWidth[CurrentFrame.Graphic], Game.SpriteHeight[CurrentFrame.Graphic]);
    player_sprites.overlay.CopyTransparencyMask(CurrentFrame.Graphic);
    
  }
}

//*******************************************************************************
//* RACR::reset_player_position
//* 
//*******************************************************************************
static void PLAYR::set_invincible() {
  player_sprites.s_invincible = true;
  player_sprites.invincible_cnt = 0;
  player_sprites.invincible_timer = 200;
}


//*******************************************************************************
//* RACR::reset_player_position
//* 
//*******************************************************************************
static void PLAYR::reset() {
  if (rv.playerX != 0.0) {
    
    if (rv.playerX > 0.0) {
      rv.playerX -= 0.04;
      if (rv.playerX < 0.0) rv.playerX = 0.0;
    }
    else {
      rv.playerX += 0.04;
      if (rv.playerX > 0.0) rv.playerX = 0.0;      
    }
    reset_player = true;
  }
  else {
    reset_player = false;
  }
}


//*******************************************************************************
//* RACR::render_player
//* 
//*******************************************************************************
static void PLAYR::render()
{
  
  PLAYR.animate();
  
  
  // Calc scaled dimension for player sprite and send to renderer
  int spriteW = Game.SpriteWidth[player_sprites.current_sprite];
  int spriteH = Game.SpriteHeight[player_sprites.current_sprite];
  
  float scale = rv.cameraDepth/IntToFloat(rv.playerZ);
  
  int destW  = FloatToInt((IntToFloat(spriteW) * scale * IntToFloat(rv.width) / 2.0) * (rv.sprite_scale * IntToFloat(rv.roadWidth)));
  int destH  = FloatToInt((IntToFloat(spriteH) * scale * IntToFloat(rv.width) / 2.0) * (rv.sprite_scale * IntToFloat(rv.roadWidth)));
  

  int destX = rv.width/2 + FloatToInt((IntToFloat(destW) * (-0.5)));
  int destY = rv.height + FloatToInt((IntToFloat(destH) * (-1.0)));
  
  rv.destX = destX;
  rv.destW = destW;
  PLAYR.handle_invincibility();
  Render.simple_sprite(rv.ds, player_sprites.current_sprite, destX, destY, destW, destH, 0);
  
  if (player_sprites.s_invincible) {
    if (player_sprites.invincible_cnt < player_sprites.invincible_timer) {
      
      if (player_sprites.flash_timer <= 6 )  {
        Render.simple_sprite(rv.ds, player_sprites.overlay.Graphic, destX, destY, destW, destH, 0);
      }
      else Render.simple_sprite(rv.ds, player_sprites.current_sprite, destX, destY, destW, destH, 0);
      
      if (player_sprites.flash_timer > 12) player_sprites.flash_timer = -1;
      
      
      player_sprites.flash_timer++;
      player_sprites.invincible_cnt++;
    }
    else {
      player_sprites.s_invincible = false;
      Render.simple_sprite(rv.ds, player_sprites.current_sprite, destX, destY, destW, destH, 0);
    }
  }
  else Render.simple_sprite(rv.ds, player_sprites.current_sprite, destX, destY, destW, destH, 0);

}

export block_controls;
export reset_player;