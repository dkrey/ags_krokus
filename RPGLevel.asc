// new module script
/*
struct rpg_level
int level,
int exp_needed,
int add_health,
int add_vigor,
int add_armor
*/

#define MAX_RPG_LEVELS 4

struct cRPG_levelstats
{
  short exp_needed;
  short add_health;
  short add_vigor;
  short add_armor;
};

cRPG_levelstats RPG_level[MAX_RPG_LEVELS];


static function RPGLevel::init_levels()
{
  RPG_level[0].exp_needed = 0;
  RPG_level[0].add_health = 0;
  RPG_level[0].add_vigor  = 0;
  RPG_level[0].add_armor  = 0;
  
  RPG_level[1].exp_needed = 10;
  RPG_level[1].add_health = 0;
  RPG_level[1].add_vigor  = 1;
  RPG_level[1].add_armor  = 2;
  
  RPG_level[2].exp_needed = 50;
  RPG_level[2].add_health = 0;
  RPG_level[2].add_vigor  = 2;
  RPG_level[2].add_armor  = 1;
  
  RPG_level[3].exp_needed = 100;
  RPG_level[3].add_health = 5;
  RPG_level[3].add_vigor  = 2;
  RPG_level[3].add_armor  = 2;     
}


static int RPGLevel::get_next_exp()
{
  /*
  int i;
  while (i < MAX_RPG_LEVELS) {
    if (ego_stats.exp < RPG_level[i].exp_needed) return RPG_level[i].exp_needed;
    i++;
  }
  */
  if (ego_stats.rpg_level > MAX_RPG_LEVELS) return 999999;
  else return RPG_level[ego_stats.rpg_level+1].exp_needed;
}

static int RPGLevel::get_current_exp()
{
  return RPG_level[ego_stats.rpg_level].exp_needed;
}

static function RPGLevel::level_up()
{
  if (ego_stats.rpg_level+1 < MAX_RPG_LEVELS && ego_stats.exp > RPG_level[ego_stats.rpg_level+1].exp_needed) {
    ego_stats.rpg_level  +=1;
    ego_stats.rpg_armor  += RPG_level[ego_stats.rpg_level].add_armor;
    ego_stats.rpg_vigor  += RPG_level[ego_stats.rpg_level].add_vigor;
    ego_stats.max_health += RPG_level[ego_stats.rpg_level].add_health;
    ego_stats.health = ego_stats.max_health;
    PART.show_lvlup();
  }
}

static function RPGLevel::calc_attack(int vigor, int attack, int defense)
{
  //Random(player_bullet[counter].damage-ego_stats.skill)+ego_stats.skill;
  int damage;
  /*
  damage = attack + vigor * 2;
  damage = FloatToInt(IntToFloat(damage) * IntToFloat(224+Random(31)) / 256.0) + 1; //randomize attack
  damage = FloatToInt(IntToFloat(damage) * IntToFloat(255-defense) / 256.0)    + 1;  // calc defense
  */
  
  damage = vigor  + FloatToInt((IntToFloat(attack) /2.0), eRoundNearest) + Random(attack); // attack
  damage = damage - FloatToInt((IntToFloat(defense) /2.0), eRoundNearest) + Random(defense); // defense
  return damage;
}