// new module script

cBullets player_bullet[MAX_BULLETS];
cBullets enemy_bullet[MAX_BULLETS];

// enemy shooting
bool enemy_shot;
short enemy_active_shots = 0;

import cWeapons weapon[eWLastWeapon];
import cpeople people[MAX_PEOPLE];
import short people_index;
import ctile tile[NUM_MAX_TILES];
import citems item[MAX_ITEMS];
import bool in_speech;

import DynamicSprite *Foreground; // Layer 2

int total(int number) 
{
  if ( number > 0)  return number;
  else              return number*(-1);
}

//*******************************************************************************
//* cBullets::Length()
//* determines the distance a bullet has to travel
//* 
//*******************************************************************************
float cBullets::Length() {
  return Maths.Sqrt(this.vector_x * this.vector_x + this.vector_y * this.vector_y);
}

//*******************************************************************************
//* cBullets::Normalize()
//* Vector helper
//* 
//*******************************************************************************
void cBullets::Normalize ()
{
   float l = this.Length ();

   if ( l == 1.0 || l == 0.0 )
      return;

   float tmp = 1.0 / l;
   this.vector_x = this.vector_x * tmp;
   this.vector_y = this.vector_y * tmp;
}



//*******************************************************************************
//* clear_all_bullets
//*
//*******************************************************************************
static function BULLET::clear_all_bullets()
{
  int counter;
  while (counter < MAX_BULLETS) {
    player_bullet[counter].active    = false;
    player_bullet[counter].x    = 0.0;
    player_bullet[counter].y    = 0.0;
    player_bullet[counter].vector_x    = 0.0;
    player_bullet[counter].vector_y    = 0.0;
    player_bullet[counter].sprite    = 0;
    player_bullet[counter].hitsprite = 0;
    player_bullet[counter].speed     = 0;
    player_bullet[counter].damage    = 0;
    player_bullet[counter].remove_cnt= 0; 
    player_bullet[counter].distance  = 0; 
    
    enemy_bullet[counter].active    = false;
    enemy_bullet[counter].x    = 0.0;
    enemy_bullet[counter].y    = 0.0;
    enemy_bullet[counter].vector_x    = 0.0;
    enemy_bullet[counter].vector_y    = 0.0;
    enemy_bullet[counter].sprite    = 0;
    enemy_bullet[counter].hitsprite = 0;
    enemy_bullet[counter].speed     = 0;
    enemy_bullet[counter].damage    = 0;
    enemy_bullet[counter].remove_cnt= 0;  
    enemy_bullet[counter].distance  = 0;  
    
    counter++;
  }
}


//*******************************************************************************
//* get_free_bullet
//* return a free bullet index if there is one
//* 
//*******************************************************************************
static function BULLET::get_free_bullet (bool from_player)
{
  int counter = MAX_BULLETS;
  
  if (from_player) {
    while (counter > 0) {
      counter --;
      if ( !player_bullet[counter].active) return counter;
    }
    return -1;
  }
  if (! from_player) {
    while (counter > 0) {
      counter --;
      if ( !enemy_bullet[counter].active) return counter;
      }
    return -1;
  }

}

//*******************************************************************************
//* shoot_player_bullet
//* tries to shoot a bullet and determines the bullet vector
//* 
//*******************************************************************************
static function BULLET::shoot_player_bullet(float vector_x, float vector_y) 
{
  int xpos;
  int ypos;
  
  int nextFree;
  
  if (weapon[ego_stats.active_weapon].ammo > 0) {
    
    nextFree = BULLET.get_free_bullet (true);
    
    // if there's a free bullet, shoot
    if (nextFree > -1) {
      
      xpos = player.x ;
      
      ypos = player.y - (INFO.get_char_height(player)/2)- Game.SpriteHeight[weapon[ego_stats.active_weapon].bullet_sprite]/2 - 5;
      if (ego_stats.Ducks) ypos+=8;
      
      player_bullet[nextFree].x = IntToFloat(xpos);
      player_bullet[nextFree].y = IntToFloat(ypos);

      player_bullet[nextFree].vector_x = vector_x;
      player_bullet[nextFree].vector_y = vector_y;

      // adjust the starting position of the bullet
      // right and left
      if (ego_stats.direction == eTengDirRight) {
        player_bullet[nextFree].x += IntToFloat(INFO.get_char_width(player)/2);
        player_bullet[nextFree].x += IntToFloat(Game.SpriteWidth[weapon[ego_stats.active_weapon].bullet_sprite]/2);
      } 
      else {
        player_bullet[nextFree].x -=IntToFloat(INFO.get_char_width(player)/2);  
        player_bullet[nextFree].x -= IntToFloat(Game.SpriteWidth[weapon[ego_stats.active_weapon].bullet_sprite]/2);
      }   
      
      // up and down
      if (player_bullet[nextFree].vector_y < -0.7) {
        if (ego_stats.direction == eTengDirRight) player_bullet[nextFree].x -= 2.0;
        else player_bullet[nextFree].x += 2.0;
        player_bullet[nextFree].y -= IntToFloat(INFO.get_char_height(player)/2);
        player_bullet[nextFree].y -= IntToFloat(Game.SpriteHeight[weapon[ego_stats.active_weapon].bullet_sprite]/2);
        
      }
      else if (player_bullet[nextFree].vector_y > 0.7) {
        if (ego_stats.direction == eTengDirRight) player_bullet[nextFree].x -= 12.0;
        else player_bullet[nextFree].x += 7.0;
        player_bullet[nextFree].y += IntToFloat(INFO.get_char_height(player)/2);
        player_bullet[nextFree].y += IntToFloat(Game.SpriteHeight[weapon[ego_stats.active_weapon].bullet_sprite]/2);
        
      }

      // finally shoot that thing if the vector is valid
      if ( !(player_bullet[nextFree].vector_x == 0.0 && player_bullet[nextFree].vector_y == 0.0) ) {
        player_bullet[nextFree].sprite    = weapon[ego_stats.active_weapon].bullet_sprite;
        player_bullet[nextFree].hitsprite = weapon[ego_stats.active_weapon].bullet_hitsprite;
        player_bullet[nextFree].speed     = weapon[ego_stats.active_weapon].speed;
        player_bullet[nextFree].damage    = weapon[ego_stats.active_weapon].damage;
        player_bullet[nextFree].distance  = weapon[ego_stats.active_weapon].distance;
        player_bullet[nextFree].remove_cnt= -1;        
        player_bullet[nextFree].active    = true;
        
        if (weapon[ego_stats.active_weapon].sound != null) weapon[ego_stats.active_weapon].sound.Play();
        ego_stats.shot =true;
        ego_stats.ShotTimer = 0;  
        ego_stats.anicounter_attack = 0;
        ego_stats.frame_attack = 0;
        PART.show_bullet_shell(IntToFloat(player.x), IntToFloat(player.y-INFO.get_char_height(player)+ego_stats.footwidth*2), ego_stats.direction);
       
        ego_stats.active_shots ++;
        weapon[ego_stats.active_weapon].ammo--;
      }
    }
  }
}

//*******************************************************************************
//* shoot_enemy_bullet
//* tries to shoot a bullet and determines the bullet vector
//* 
//*******************************************************************************
static function BULLET::shoot_enemy_bullet(int x,  int y, int i)
{
  int xpos;
  int ypos;
  
  int nextFree;
  
  if (weapon[people[i].active_weapon].ammo > 0) {
    
    nextFree = BULLET.get_free_bullet ();

    // if there's a free bullet, shoot
    if (nextFree > -1) {
      
      if (people[i].direction == eTengDirRight) 
          xpos = character[people[i].char_id].x + (INFO.get_char_width(character[people[i].char_id]) / 2);
      else xpos = character[people[i].char_id].x - (INFO.get_char_width(character[people[i].char_id]) / 2);
      
      ypos = character[people[i].char_id].y - (INFO.get_char_height(character[people[i].char_id])/2)- Game.SpriteHeight[weapon[people[i].active_weapon].bullet_sprite]/2;

      enemy_bullet[nextFree].x = IntToFloat(xpos);
      enemy_bullet[nextFree].y = IntToFloat(ypos); 
      
      enemy_bullet[nextFree].vector_x = IntToFloat(x - xpos);
      enemy_bullet[nextFree].vector_y = IntToFloat(y - ypos);
      enemy_bullet[nextFree].Normalize(); 

      // Finally shoot
      if ( !(enemy_bullet[nextFree].vector_x == 0.0 && enemy_bullet[nextFree].vector_y == 0.0) ) {
        
        character[people[i].char_id].Animate(people[i].loop, character[people[i].char_id].AnimationSpeed, eOnce, eNoBlock, eForwards);
        
        enemy_bullet[nextFree].sprite    = weapon[people[i].active_weapon].bullet_sprite;
        enemy_bullet[nextFree].hitsprite = weapon[people[i].active_weapon].bullet_hitsprite;
        enemy_bullet[nextFree].speed     = weapon[people[i].active_weapon].speed;
        enemy_bullet[nextFree].damage    = weapon[people[i].active_weapon].damage;
        enemy_bullet[nextFree].distance  = weapon[people[i].active_weapon].distance;
        enemy_bullet[nextFree].remove_cnt= -1;        
        enemy_bullet[nextFree].active    = true;
        people[i].ShotTimer = 80;
        
        if (weapon[people[i].active_weapon].sound != null) weapon[people[i].active_weapon].sound.Play();
        enemy_shot = true;   
        enemy_active_shots ++;
      }
    }
  }
}


//*******************************************************************************
//* draw_bullets
//* draws active bullets on gSurface
//* 
//*******************************************************************************
static function BULLET::draw_bullets() 
{
 
  DrawingSurface *surface = Foreground.GetDrawingSurface();
  
  int counter = 0;
  
  if (ego_stats.shot) {
    // draw player_bullets
    while (counter < MAX_BULLETS) {
      if (player_bullet[counter].active) {
        
        player_bullet[counter].x += player_bullet[counter].vector_x * IntToFloat(player_bullet[counter].speed);
        player_bullet[counter].y += player_bullet[counter].vector_y * IntToFloat(player_bullet[counter].speed);
        surface.DrawImage(FloatToInt(player_bullet[counter].x), FloatToInt(player_bullet[counter].y), player_bullet[counter].sprite);
      }
      counter ++;
    }
  }
  counter = 0;
  
  // draw player_bullets
  if (enemy_shot) {
    while (counter < MAX_BULLETS) {
      if (enemy_bullet[counter].active) {
        
        enemy_bullet[counter].x += enemy_bullet[counter].vector_x * IntToFloat(enemy_bullet[counter].speed);
        enemy_bullet[counter].y += enemy_bullet[counter].vector_y * IntToFloat(enemy_bullet[counter].speed);
        surface.DrawImage(FloatToInt(enemy_bullet[counter].x), FloatToInt(enemy_bullet[counter].y), enemy_bullet[counter].sprite);
      }
      counter ++;
    }  
  }
  surface.Release();
}

//*******************************************************************************
//* handle_player_bullets
//* moves bullets and see if enemies or tiles are being hit
//*
//*******************************************************************************
static function BULLET::handle_player_bullets() 
{
  int counter = 0;
  int index = 0;
  int index2 = 0;
  int index_itm1;
  int index_itm2;
  int l = 0;
  int i = 0;
  
  if (ego_stats.shot) {
    while (counter < MAX_BULLETS) {
      
      if (player_bullet[counter].active && player_bullet[counter].remove_cnt == -1) {
        // check for screen borders
        if (player_bullet[counter].x > IntToFloat(Screen.Width+16)  || player_bullet[counter].x < 16.0)  player_bullet[counter].active=false;
        if (player_bullet[counter].y > IntToFloat(Screen.Height+16) || player_bullet[counter].y < 16.0)  player_bullet[counter].active=false;
      
        i = 0;
        // check for Enemy hits
        while (i < people_index) {
          if (people[i].onscreen && people[i].is_hostile && !people[i].is_invincible && people[i].health > 0){
            if (COLL.check_char_coll(FloatToInt(player_bullet[counter].x), FloatToInt(player_bullet[counter].y), Game.SpriteWidth[player_bullet[counter].sprite], Game.SpriteHeight[player_bullet[counter].sprite],character[people[i].char_id], true))  
            {
              int damage = RPGLevel.calc_attack(ego_stats.rpg_vigor,player_bullet[counter].damage, people[i].armor);
              
              if (player_bullet[counter].vector_x >0.2)
                PART.show_hit(player_bullet[counter].x, player_bullet[counter].y, eHitPart_Enemy, eTengDirRight);
              else 
                PART.show_hit(player_bullet[counter].x, player_bullet[counter].y, eHitPart_Enemy, eTengDirLeft);
                
              PART.show_damage(IntToFloat(character[people[i].char_id].x) , IntToFloat(character[people[i].char_id].y - INFO.get_char_height(character[people[i].char_id])), damage);
              
              people[i].health -= damage;
              people[i].hit_timer = 20;
              people[i].healthbar_timer = 30;
              player_bullet[counter].sprite = player_bullet[counter].hitsprite;
              player_bullet[counter].speed = 0;
              player_bullet[counter].remove_cnt = BULLET_REMOVAL;  
              
              if (people[i].is_alarmable) {
                people[i].alarm_timer = 150;
                if ( !people[i].alarmed ) people[i].alarmed = true; 
                if (player_bullet[counter].x < IntToFloat(people[i].x)) people[i].direction = eTengDirLeft;
                else people[i].direction = eTengDirRight;
              }

              i = people_index;
              
            }
          }
          i++;
        }
        
        // check tile collisions
        index  = TILES.get_tile_at(FloatToInt(player_bullet[counter].x), FloatToInt(player_bullet[counter].y ));
        index2 = TILES.get_tile_at(FloatToInt(player_bullet[counter].x)+ Game.SpriteWidth[player_bullet[counter].sprite]/2, FloatToInt(player_bullet[counter].y ) + Game.SpriteHeight[player_bullet[counter].sprite]);
        
        index_itm1 = ITM.get_item_at(FloatToInt(player_bullet[counter].x), FloatToInt(player_bullet[counter].y ));
        index_itm2 = ITM.get_item_at(FloatToInt(player_bullet[counter].x)+ Game.SpriteWidth[player_bullet[counter].sprite] / 2, FloatToInt(player_bullet[counter].y ) + Game.SpriteHeight[player_bullet[counter].sprite]/2);

        if (!tile[index].is_platform[l] && !tile[index].is_platform[l] && (tile[index].is_solid[l] || tile[index].is_ramp_support[l] || tile[index2].is_solid[l] || tile[index2].is_ramp_support[l])) {
          player_bullet[counter].sprite = player_bullet[counter].hitsprite;
          player_bullet[counter].speed = 0;
          player_bullet[counter].remove_cnt = BULLET_REMOVAL;
        }
        else if ( (index_itm1 > -1 && item[index_itm1].is_solid) || (index_itm2 > -1 && item[index_itm2].is_solid) ) {
          player_bullet[counter].sprite = player_bullet[counter].hitsprite;
          player_bullet[counter].speed = 0;
          player_bullet[counter].remove_cnt = BULLET_REMOVAL;
        }
        // check distance a bullet can travel
        if (player_bullet[counter].distance <=0) {
            player_bullet[counter].sprite = player_bullet[counter].hitsprite;
            player_bullet[counter].speed = 0;
            player_bullet[counter].remove_cnt = BULLET_REMOVAL;        
        }
        player_bullet[counter].distance -= total(player_bullet[counter].speed);
      }
      
      
      if (player_bullet[counter].remove_cnt > 0) {
        player_bullet[counter].remove_cnt --;
      }
      else if (player_bullet[counter].remove_cnt == 0) {
        player_bullet[counter].active = false;
        player_bullet[counter].remove_cnt = -1;
        ego_stats.active_shots --;      
      }
      
      counter ++;
      
    }
    if (ego_stats.active_shots == 0) ego_stats.shot = false;
  }

}

//*******************************************************************************
//* handle_enemy_bullets
//* moves bullets and see if player or tiles are being hit
//*
//*******************************************************************************
static function BULLET::handle_enemy_bullets() 
{
  int counter = 0;
  int index = 0;
  int index2 = 0;
  int index_itm1;
  int index_itm2;
  int l = 0;
  
  int i = 0;
  
  if (enemy_shot) {
    while (counter < MAX_BULLETS) {
      
      if (enemy_bullet[counter].active && enemy_bullet[counter].remove_cnt == -1) {
        // check for screen borders
        if (enemy_bullet[counter].x > IntToFloat(Screen.Width +30) || enemy_bullet[counter].x < -30.0)  enemy_bullet[counter].active=false;
        if (enemy_bullet[counter].y > IntToFloat(Screen.Height+20) || enemy_bullet[counter].y < -20.0)  enemy_bullet[counter].active=false;
      
        // check tile collisions
        index  = TILES.get_tile_at(FloatToInt(enemy_bullet[counter].x), FloatToInt(enemy_bullet[counter].y ));
        index2 = TILES.get_tile_at(FloatToInt(enemy_bullet[counter].x)+ Game.SpriteWidth[enemy_bullet[counter].sprite]/2, FloatToInt(enemy_bullet[counter].y ) + Game.SpriteHeight[enemy_bullet[counter].sprite]);
        
        index_itm1 = ITM.get_item_at(FloatToInt(enemy_bullet[counter].x), FloatToInt(enemy_bullet[counter].y ));
        index_itm2 = ITM.get_item_at(FloatToInt(enemy_bullet[counter].x)+ Game.SpriteWidth[enemy_bullet[counter].sprite]/2, FloatToInt(enemy_bullet[counter].y ) + Game.SpriteHeight[enemy_bullet[counter].sprite]);

        if (!tile[index].is_platform[l] && !tile[index2].is_platform[l]  && (tile[index].is_solid[l] || tile[index].is_ramp_support[l] || tile[index2].is_solid[l] || tile[index2].is_ramp_support[l])) {
          enemy_bullet[counter].sprite = enemy_bullet[counter].hitsprite;
          enemy_bullet[counter].speed = 0;
          enemy_bullet[counter].remove_cnt = BULLET_REMOVAL;
        }
        else if ( (index_itm1 > -1 && item[index_itm1].is_solid) || (index_itm2 > -1 && item[index_itm2].is_solid) ) {
          enemy_bullet[counter].sprite = enemy_bullet[counter].hitsprite;
          enemy_bullet[counter].speed = 0;
          enemy_bullet[counter].remove_cnt = BULLET_REMOVAL;
        }
        // Check player hit
        if (COLL.check_char_coll(FloatToInt(enemy_bullet[counter].x), FloatToInt(enemy_bullet[counter].y), Game.SpriteWidth[enemy_bullet[counter].sprite], Game.SpriteHeight[enemy_bullet[counter].sprite],player, true))  
        {
          if (!ego_stats.s_invincible && !in_speech) {
            int damage;
            //damage = Random (enemy_bullet[counter].damage /2) + enemy_bullet[counter].damage/2;
            damage = RPGLevel.calc_attack(enemy_bullet[counter].damage/2, enemy_bullet[counter].damage, ego_stats.rpg_armor);
            PART.show_damage(IntToFloat(player.x) ,IntToFloat(player.y-INFO.get_char_height(player)), damage, true); 
            
            ego_stats.invincible_timer = 80;
            ego_stats.invincible_cnt = 0;
            ego_stats.s_invincible = true;
            ego_stats.health -=  damage; 
            enemy_bullet[counter].sprite = enemy_bullet[counter].hitsprite;
            enemy_bullet[counter].speed = 0;
            enemy_bullet[counter].remove_cnt = BULLET_REMOVAL;            
          }
          if (enemy_bullet[counter].distance <=0) {
              enemy_bullet[counter].sprite = enemy_bullet[counter].hitsprite;
              enemy_bullet[counter].speed = 0;
              enemy_bullet[counter].remove_cnt = BULLET_REMOVAL;        
          }
          enemy_bullet[counter].distance-= total(enemy_bullet[counter].speed);          
        }
        
      }

      if (enemy_bullet[counter].remove_cnt > 0) {
        enemy_bullet[counter].remove_cnt --;
      }
      else if (enemy_bullet[counter].remove_cnt == 0) {
        enemy_bullet[counter].active = false;
        enemy_bullet[counter].remove_cnt = -1;

      }
      
      counter ++;
    }
  }
  
  if (enemy_active_shots == 0) enemy_shot = false;
}

export player_bullet;
export enemy_bullet;