// new module script
//teleport vars
short beam_dist_x;
short beam_dist_y;
short beam_spd_x;
short beam_spd_y;
int calc_scroll_x;
float scroll_remain_x;
float scroll_delta_x;

int calc_scroll_y;
float scroll_remain_y;
float scroll_delta_y;

  
import int cam_scroll_x;
import int cam_scroll_y;

import int mapwidth;
import int mapheight;

import int size_tile_x, size_tile_y;
import int tile_offset_x, tile_offset_y;
import short tile_limit_x, tile_limit_y;
import int num_tiles_x, num_tiles_y;
import int tile_scrolling_edge_h, tile_scrolling_edge_v;

import cpeople people[MAX_PEOPLE];
import short people_index;

import short itm_index;
import citems item[MAX_ITEMS];

import cplatforms platform[MAX_PLATFORMS];
import short pf_index;

import short t_hotspot_id[MAX_HOTSPOTS];
import ct_hotspot t_hotspot[MAX_HOTSPOTS];
import cBullets player_bullet[MAX_BULLETS];
import cBullets enemy_bullet[MAX_BULLETS];
import bool topdown_mode;
  
int total(int number) 
{
  if ( number > 0)  return number;
  else              return number*(-1);
}

//*******************************************************************************
//* center_screen_on_player
//* Center the "cam" on player
//*
//*******************************************************************************
static void CAM::center_screen_on_player() 
{

  int j;
  
  int xoff = player.x - (Screen.Width  / 2 ); 
	int yoff = player.y - Screen.Height + (Screen.Height-tile_scrolling_edge_v) ;

  int screenborder_x;
  int screenborder_y;
  
  // Adjust people, platform and items horizontally
	if ( xoff != 0 ) {
    
    screenborder_x = (num_tiles_x*size_tile_x) -  (Screen.Width  / 2 );
    if (screenborder_x < 0) xoff += screenborder_x;
   
		tile_offset_x -= xoff;
		j = 0;
		while ( j < people_index ) {
			people[j].x -= xoff;
			j++;
		}
    
    j=0;
		while ( j < pf_index ) {
			platform[j].x -= xoff;
			j++;
		}
    
    j=0;
		while ( j < itm_index ) {
			item[j].x -= xoff;
			j++;
		}     
		player.x -= xoff;
	}
  // Adjust people, platforms and items vertically
	if ( yoff != 0 ) {
    
    screenborder_y = (num_tiles_y*size_tile_y) -  tile_scrolling_edge_v ;
    
    if (screenborder_y < 0) yoff += screenborder_y;
    
		tile_offset_y -= yoff;
    
		j = 0;
		while ( j < people_index ) {
			people[j].y -= yoff;
			j++;
		}
    
    j=0;
		while ( j < pf_index ) {
			platform[j].y -= yoff;
			j++;
		}
    
    j=0;
		while ( j < itm_index ) {
			item[j].y -= yoff;
			j++;
		}     
    
		player.y -= yoff;
	}


}

//*******************************************************************************
//* scroll
//* Scrolls the screen and all particle systems
//*
//*******************************************************************************
static function CAM::scroll(int direction,  int amount)
{
  int k;
  
  if (direction == eScroll_vertical) 
  {
    tile_offset_y -= amount;
		player.y -= amount;
    Particle.set_offset (0, amount);
    
		while ( k < people_index )
		{
      if (people[k].active) {
        people[k].y -= amount;
        if (people[k].char_id>0)character[people[k].char_id].y -=amount;
      }
			k++;
		}
    k = 0;
		while ( k < pf_index )
		{
      platform[k].y -= amount;
			k++;
		}
    k = 0;
		while ( k < itm_index )
		{
      item[k].y -= amount;
			k++;
		}
    k=0;
    
    while (k < MAX_BULLETS) 
    {
      if (player_bullet[k].active) {        
        player_bullet[k].y -= IntToFloat(amount);
      }
      if (enemy_bullet[k].active) {
        enemy_bullet[k].y -= IntToFloat(amount);
      }
      k ++;
    }    
    
  }
  else if (direction == eScroll_horizontal)
  {
    tile_offset_x -= amount;
	  player.x -= amount;
    Particle.set_offset (amount, 0);

    k = 0;
    
		while ( k < people_index )
		{
      if (people[k].active) {
        people[k].x -= amount;
        if (people[k].char_id>0)character[people[k].char_id].x -=amount;
      }
			k++;
		}
    k = 0;
    
		while ( k < pf_index )
		{
      platform[k].x -= amount;
			k++;
		}
    k = 0;
    
		while ( k < itm_index )
		{
      item[k].x -= amount;
			k++;
		}
    k=0;
    
    while (k < MAX_BULLETS) 
    {
      if (player_bullet[k].active) {        
        enemy_bullet[k].x -= IntToFloat(amount);
      }
      if (player_bullet[k].active) {        
        enemy_bullet[k].x -= IntToFloat(amount);
      }      
      k ++;
    }    
  }
}


//*******************************************************************************
//* handle_scrolling
//*
//* determines the amount of scrolling
//*******************************************************************************

static function CAM::handle_scrolling(bool editor ) 
{
	int i = 0;
  int j = 0;
  int k = 0;
  
  int bounce_y =0;
  int platform_xoff =0;
  int platform_yoff =0;
  
  int scroll_x = 0;
  int scroll_y = 0;
  
  int screenborder_x = 0;
  int screenborder_y = 0;
  
  ViewFrame *vf;
  
  //plaform speed
  if (ego_stats.platform_id > -1 && platform[ego_stats.platform_id].timer == -1) {
    
    if (platform[ego_stats.platform_id].facing > 0) {
      platform_xoff= platform[ego_stats.platform_id].xspeed;
      platform_yoff= platform[ego_stats.platform_id].yspeed;
    }
    else {
      platform_xoff= platform[ego_stats.platform_id].xspeed * (-1);
      platform_yoff= platform[ego_stats.platform_id].yspeed * (-1);
    }
  }  
  
  // Teleport speed
  if (beam_dist_x > 0) {
    if (beam_spd_x > beam_dist_x) beam_spd_x -= beam_dist_x;
    beam_dist_x -= beam_spd_x;
  }
  else beam_dist_x = 0;
  
  if (beam_dist_y > 0) {
    if (beam_spd_y > beam_dist_y) beam_spd_y -= beam_dist_y;
    beam_dist_y -= beam_spd_y;
  }
  else beam_dist_y = 0;  
  

  
  if (ego_stats.beam && beam_dist_y == 0 && beam_dist_x == 0) {
    ego_stats.beam = false;
  }
  int toffScreen_x = tile_offset_x - Screen.Width;
  int toffScreen_y = tile_offset_y - Screen.Height;
  int mapwidth_x = mapwidth - Screen.Width;
  int mapwidth_y = mapheight - Screen.Height;
  screenborder_x = mapwidth + toffScreen_x;
  screenborder_y = mapheight + toffScreen_y;  
  
  // Scroll left
  if (!editor) {  
    if (ego_stats.x_speed != 0.0) {
      calc_scroll_x = ego_stats.scroll_x;
    }
    if (ego_stats.y_speed != 0.0) {
      scroll_delta_y  = ego_stats.y_speed;
      scroll_delta_y += scroll_remain_y;
      scroll_remain_y = scroll_delta_y - IntToFloat(FloatToInt(scroll_delta_y, eRoundDown)); 
      calc_scroll_y = FloatToInt(scroll_delta_y, eRoundDown);        
    }
    
    if ( player.x < tile_scrolling_edge_h && tile_offset_x < 0 ) {
      if (platform_xoff != 0)             scroll_x = calc_scroll_x + platform_xoff ;
      //else if (ego_stats.grabscroll_x!=0) scroll_x = ego_stats.grabscroll_x;
      else if (beam_dist_x > 0)           scroll_x = beam_spd_x * (-1);
      else if (ego_stats.x_speed==0.0)    scroll_x = -1;
      else                                scroll_x = calc_scroll_x;
    }
    // Scroll right
    else if ( player.x > tile_scrolling_edge_h && screenborder_x > 0) {
      if (platform_xoff != 0)             scroll_x = calc_scroll_x+ platform_xoff ;
      //else if (ego_stats.grabscroll_x!=0) scroll_x = ego_stats.grabscroll_x;
      else if (beam_dist_x > 0)           scroll_x = beam_spd_x;
      else if (ego_stats.x_speed==0.0)    scroll_x = 1;
      else                                scroll_x = calc_scroll_x;  
      
    }
    
    // Scroll up
    if ( player.y  < tile_scrolling_edge_v && ( tile_offset_y - 1 ) < 0 ) {
      if (platform_yoff != 0)                            scroll_y = calc_scroll_y + platform_yoff;
      else if (ego_stats.y_speed == 0.0 && ego_stats.OnRamp) scroll_y = total(calc_scroll_x) * (-1) ;
      //else if (ego_stats.grabscroll_y!=0)                scroll_y = ego_stats.grabscroll_y;
      else if (beam_dist_y > 0)                          scroll_y = beam_spd_y * (-1);
      else if (ego_stats.y_speed == 0.0)                 scroll_y = -1;
      else if (topdown_mode)                             scroll_y = FloatToInt(ego_stats.y_speed );
      else                                               scroll_y = calc_scroll_y; 
      
    }
    // scroll down
    else if ( player.y > tile_scrolling_edge_v && screenborder_y>0) {      
      if (platform_yoff != 0)                            scroll_y = FloatToInt(ego_stats.y_speed) + platform_yoff;
      else if (ego_stats.y_speed == 0.0 && ego_stats.OnRamp) scroll_y = total(calc_scroll_x) ;
      //else if (ego_stats.grabscroll_y!=0)                scroll_y = ego_stats.grabscroll_y;
      else if (beam_dist_y > 0)                          scroll_y = beam_spd_y;
      else if (ego_stats.y_speed == 0.0)                 scroll_y = 1;
      else if (topdown_mode)                             scroll_y = FloatToInt(ego_stats.y_speed );      
      else                                               scroll_y = calc_scroll_y; 
    }
  }
  
  
  //Scroll the map in editor
  if (editor) {
    //left / right scrolling
    if (mouse.x < 10 && tile_offset_x < -1 ) scroll_x = -5;
    else if (mouse.x > (Screen.Width-10) && screenborder_x > 0 ) scroll_x = 5;
    // top/down scrolling
    if (mouse.y < 10 && ( tile_offset_y - 1 ) < 0  ) scroll_y = -5;
    
    else if (mouse.y > (Screen.Height-10) && screenborder_y > 0 ) scroll_y= 5; 
    if (screenborder_x -scroll_x < 0 ) scroll_x = screenborder_x;
    else if (tile_offset_x -scroll_x > 0 ) scroll_x = Screen.Width+toffScreen_x; 
    //Limit Top border - glitchy in game mode
    if (tile_offset_y -scroll_y > 0 )scroll_y = Screen.Height+toffScreen_y;
  }
  //limit bottom border
  if (screenborder_y -scroll_y < 0 ) {
    scroll_y = screenborder_y;
    beam_dist_y =0;
    beam_spd_y =0;
  }
  //limit left
  if (screenborder_x -scroll_x < 0) {
    scroll_x = screenborder_x;
    beam_dist_x = 0;
    beam_spd_x = 0;
    ego_stats.beam = false;
  }
  //limit right
  else if (tile_offset_x -scroll_x > 0 ) {
    scroll_x = Screen.Width+toffScreen_x; 
    beam_dist_x = 0;
    beam_spd_x = 0;
    ego_stats.beam = false;
  }  
  
  cam_scroll_x = scroll_x;
  cam_scroll_y = scroll_y;

  if (scroll_x != 0 ) CAM.scroll(eScroll_horizontal,scroll_x);
  if (scroll_y != 0 ) CAM.scroll(eScroll_vertical,  scroll_y);   
 
}


//*******************************************************************************
//* beam_to_place
//* put the given character to the given tile coordinates if no hotspot_id
//* is given
//*
//*******************************************************************************
static function CAM::beam_to_place(Character *ch, int hsp_id, int tile_idx, bool instant)
{
  int xspeed  = 8;
  int yspeed = 4;
  int xpos, ypos;

  if (hsp_id == 0) {
    xpos = TILES.getTileIndexXFromIndex(tile_idx);
    ypos = TILES.getTileIndexYFromIndex(tile_idx);
  }
 
  else {
    xpos = t_hotspot[t_hotspot_id[hsp_id]].x;
    ypos = t_hotspot[t_hotspot_id[hsp_id]].y;
  }
  
  int xoff = 0;
  int sourceX = ch.x; 
  
  int sourceY = ch.y; 
  int destX = xpos * size_tile_x + (size_tile_x/2) + tile_offset_x;
  int destY = ypos * size_tile_y + (size_tile_y+1) + tile_offset_y; 

  ch.x = destX;
  ch.y = destY;
  
  if (instant) {
    if (ch.ID == player.ID) {
      ego_stats.current_tile = TILES.get_tile_at(xpos, ypos);
      BULLET.clear_all_bullets();
      CAM.center_screen_on_player();
    }
  }
  else {
    if (ch.ID == player.ID) {
      ego_stats.current_tile = ypos * num_tiles_x + xpos;
      ego_stats.NoControl = true;
      ego_stats.beam = true;
      
      beam_dist_x = destX - sourceX;
      beam_dist_y = destY - sourceY;
      beam_dist_x = total(beam_dist_x) + (Screen.Width - tile_scrolling_edge_h);
      beam_dist_y = total(beam_dist_y) - (Screen.Height - tile_scrolling_edge_v);
      
      beam_spd_x = xspeed;
      beam_spd_y = yspeed;  
    }
  }
}