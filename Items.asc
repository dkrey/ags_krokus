// new module script
short itm_index = 1;
short t_object_id[MAX_ITEMS];
citems item[MAX_ITEMS];
citem_types item_types[MAX_ITEMS];
DynamicSprite *ItemRaster;
import DynamicSprite *Foreground; 

import ctile tile[NUM_MAX_TILES];
import int size_tile_x, size_tile_y;
import int tile_offset_x, tile_offset_y;
import ctile_set tile_set;

import short platform_screen_limit;
import cWeapons weapon[eWLastWeapon];


int total(int number) 
{
  if ( number > 0)  return number;
  else              return number*(-1);
}

//*******************************************************************************
//* clear_item
//*
//*******************************************************************************
static function ITM::clear_item (int index) {
  if (item[index].obj_id> 0) t_object_id[item[index].obj_id] = 0;
  item[index].sound  = null;
  item[index].name = "";
  item[index].shown_name = "";
  item[index].is_solid = false;
  
  item[index].active = false;
	item[index].ignore_gravity = false;
  item[index].hidden = false;
  item[index].sound = null;
	item[index].type = 0;
	item[index].x  = 0;
	item[index].y = 0;
  item[index].obj_id = 0;
  item[index].obj_sprite = 0;
	item[index].img = 0;
	item[index].quantity = 0;
  
  item[index].ani_done = false;
  item[index].usable = false;
  
  item[index].ani_repeat = 0;
  item[index].ani_direction = 0;
  item[index].ani_speed  = 0;
  
  item[index].vf = null;
  item[index].loop = 0;
  item[index].view = 0; 
  item[index].frame_counter = 0;
	item[index].ani_delay = 0;
  item[index].ani_delay_counter = 0;
  
  item[index].xspeed = 0;
  item[index].yspeed = 0;
  item[index].distance = 0;
  item[index].speed_delay = 0;
  item[index].speed_delay_cnt = 0;
  item[index].facing = -1;  
  item[index].midair = false;
  item[index].current_tile = 0;

}

//*******************************************************************************
//* clear_all_items
//*
//*******************************************************************************
static function ITM::clear_all_items()
{
  int i;
  while (i < MAX_ITEMS) {
    t_object_id[i] = 0;
    ITM.clear_item(i);
    i++;
  }  
  itm_index = 1;
}

static int ITM::get_free_item()
{
  short return_idx = 0;
  short i=1;

  while (i < itm_index) {
    if (!item[i].active) {
      return_idx = i;
      return return_idx;
    }
    i++;
  }
  if (itm_index > MAX_ITEMS) return -1;
  return_idx = itm_index;
  
  
  
  itm_index++;
  return return_idx;
  
}

static function ITM::init_item_types()
{
  
  item_types[itm_grow].name = "PowerShroom";
  item_types[itm_grow].loop = 1;
  item_types[itm_grow].xspeed = 1;
  item_types[itm_grow].sound = null;
  item_types[itm_grow].ignore_gravity = false;
  item_types[itm_grow].is_solid = false;
  
  item_types[itm_gun].name = "Gun";
  item_types[itm_gun].loop = 3;
  item_types[itm_gun].xspeed = 0;
  item_types[itm_gun].sound = null;
  item_types[itm_gun].ignore_gravity = false;
  item_types[itm_gun].is_solid = false;
  
  item_types[itm_pistol_ammo10].name = "Gun Ammo";
  item_types[itm_pistol_ammo10].loop = 6;
  item_types[itm_pistol_ammo10].xspeed = 0;
  item_types[itm_pistol_ammo10].sound = null;
  item_types[itm_pistol_ammo10].ignore_gravity = false;
  item_types[itm_pistol_ammo10].is_solid = false;
  
  item_types[itm_arcanium].name = "Arcanium";
  item_types[itm_arcanium].loop = 7;
  item_types[itm_arcanium].xspeed = 0;
  item_types[itm_arcanium].quantity = 1;
  item_types[itm_arcanium].sound = null;
  item_types[itm_arcanium].ignore_gravity = false;
  item_types[itm_arcanium].is_solid = false;  

}

//*******************************************************************************
//* define_items
//* Define items or adds object placeholders 
//* Objects are itmes with an attrib > 50
//*
//*******************************************************************************
static function ITM::define_items(int index, int xpos, int ypos, int loop, int flag, int attrib, eItem_type type, int xspeed)
{
  if (index >= MAX_ITEMS) {
    Display ("Item limit reached");
    return 0;
  }
  item[index].x = xpos;
  item[index].y = ypos;
  item[index].active     = true;
  // generic items aka powerups
  if (attrib < 50 ) {       
    if (flag == 1) item[index].hidden =true;
    
    if (attrib == 0 && type != itm_nothing) {
      item[index].type = type;
    }
    else {
      if (attrib == 11)      item[index].type       = itm_grow;
      else if (attrib == 12) item[index].type       = itm_gun;
      else if (attrib == 13) item[index].type       = itm_pistol_ammo10;      
      else if (attrib == 14) item[index].type       = itm_arcanium;      
    }
    item[index].view       = tile_set.item_view;
    item[index].vf         = Game.GetViewFrame(tile_set.item_view, item[index].loop, item[index].frame_counter);
    item[index].ani_delay  = 20;
    item[index].facing     = 1;
    item[index].speed_delay= 1;    
    item[index].obj_id     = -1;     
    
    item[index].name          = item_types[item[index].type].name;
    item[index].loop          = item_types[item[index].type].loop;
    item[index].sound         = item_types[item[index].type].sound;
    item[index].xspeed        = item_types[item[index].type].xspeed;
    
    //arcanium deceleration
    if (item[index].type == itm_arcanium) {
      item[index].speed_delay = 2;
      item[index].xspeed = xspeed;
      item[index].distance = 4;
    }
    
    if (item[index].quantity == 0) item[index].quantity = item_types[item[index].type].quantity;
  }
  // Items: Objects from 51 to 99
  else if (attrib > 50) {
    item[index].loop       = loop;
    item[index].obj_id     = attrib - 50;
    item[index].type       = itm_object; 
    t_object_id[item[index].obj_id] = index;
    
  }  
}


//*******************************************************************************
//* spawn_item
//* Spawns an item
//*
//*******************************************************************************
static function ITM::spawn_item(int tile_index, int loop, int attrib, eItem_type type, bool hidden, bool centered, int xspeed, int quantity) {
  int xpos = tile[tile_index].x[1] + tile_offset_x;
  int ypos = tile[tile_index].y[1] + tile_offset_y;
  int idx = ITM.get_free_item();
  
  if (centered) {
    xpos += size_tile_x / 2;
    ypos += size_tile_y / 2;
  }

  ITM.clear_item(idx);
  item[idx].current_tile = tile_index;
  item[idx].quantity = quantity;
  ITM.define_items(idx, xpos, ypos, loop,hidden, attrib, type, xspeed); 
}

//*******************************************************************************
//* spawn_item
//* Spawns an item
//*
//*******************************************************************************
static function ITM::spawn_itemXY(int x, int y, int loop, int attrib, eItem_type type, bool hidden, bool centered, int xspeed, int quantity) {
  int xpos = x;
  int ypos = y;
  int idx = ITM.get_free_item();
  
  if (centered) {
    ViewFrame *frame = Game.GetViewFrame(VITEMS, loop, 0);
    
    xpos += Game.SpriteWidth[frame.Graphic] / 2;
    ypos += Game.SpriteHeight[frame.Graphic] / 2;
  }

  ITM.clear_item(idx);
  item[idx].current_tile = TILES.getTileIndexFromPoint(x, y);
  item[idx].quantity = quantity;
  ITM.define_items(idx, xpos, ypos, loop,hidden, attrib, type, xspeed); 
}

//*******************************************************************************
//* spawn_object
//* Spawns an object and returns the OBJECT(!) IDX.
//*
//*******************************************************************************
static int ITM::spawn_object(int tile_index) {
  int xpos;
  int ypos;
  int i, itm_idx, obj_idx;
  obj_idx = -1;
  
  if (tile_index == -1) {
    xpos = -1 -size_tile_x + tile_offset_x;
    ypos = -1 -size_tile_y + tile_offset_y;
  }
  else {
    xpos = tile[tile_index].x[1] + tile_offset_x;
    ypos = tile[tile_index].y[1] + tile_offset_y;
  }
  itm_idx = ITM.get_free_item();
  i =1 ;
  
  while (i<MAX_ITEMS) {
    if (t_object_id[i]==0) { 
      obj_idx = i;
      i =MAX_ITEMS;
    }
    i++;
  }
  if (obj_idx == -1) {
    Display ("Can't create object:Too many objects");
    return -1;
  }

  ITM.clear_item(itm_idx);
  
  item[itm_idx].current_tile = tile_index;
  ITM.define_items(itm_idx, xpos, ypos, 0,false, 50+obj_idx, itm_object);   
  
  return obj_idx;
}

//*******************************************************************************
//* get_item_at
//* returns an item at the given coordinates
//*
//*******************************************************************************
static function ITM::get_item_at (int x, int y )
{

  int i = 0;
  int result = -1;
  int width;
  int height;
  
	while ( i < itm_index )
	{
		if ( item[i].active )
		{
      if (item[i].vf == null) {
        width  = Game.SpriteWidth[item[i].obj_sprite];
        height = Game.SpriteHeight[item[i].obj_sprite];        
      }
      else {
        width  = Game.SpriteWidth[item[i].vf.Graphic];
        height = Game.SpriteHeight[item[i].vf.Graphic];
      }
      
      if ( x > item[i].x && x < item[i].x + width ) {
        
        if ( y >  item[i].y && y < item[i].y + height ) {
          
          result = i;
          i = itm_index;      
        }
      }
		}
		i++;
	}
  
  if (result >-1) return result;

  else return -1;
}


//*******************************************************************************
//* handle_items
//* moves and animates items
//*
//*******************************************************************************
static function ITM::handle_items ()
{
  DrawingSurface *roomSurface = Room.GetDrawingSurfaceForBackground();
  DrawingSurface *foregroundSurface = Foreground.GetDrawingSurface();
  
  //roomSurface = Room.GetDrawingSurfaceForBackground();
	int i = 0;
  int item_width;
  int item_height;
  int tile_index =0;
  int l = 0;

  
	while ( i < itm_index )
	{
		if ( item[i].active )
			if ( item[i].x > (platform_screen_limit * (-1)) && item[i].x < Screen.Width + platform_screen_limit )
				if ( item[i].y > (platform_screen_limit * (-1)) && item[i].y < Screen.Height + platform_screen_limit )  
				{
          
					int sprite_slot;
					if (!item[i].hidden) 
          {
            if (item[i].type != itm_object) {
              // animate Powerups            
              if (item[i].ani_delay_counter == item[i].ani_delay ) {
                
                int framecount = Game.GetFrameCountForLoop(tile_set.item_view, item[i].loop);
                
                if ( item[i].frame_counter >= framecount-1) item[i].frame_counter = 0;
                else item[i].frame_counter ++;
                
                item[i].vf = Game.GetViewFrame(tile_set.item_view, item[i].loop, item[i].frame_counter);
                item[i].ani_delay_counter = 0;
                item[i].ani_delay = 1+ item[i].vf.Speed; 
              }
              else {
                item[i].vf = Game.GetViewFrame(tile_set.item_view, item[i].loop, item[i].frame_counter);
                item[i].ani_delay_counter++;
              }
              sprite_slot = item[i].vf.Graphic;   
            }
            else {
              //Display non animated objects
              if (item[i].view == 0) sprite_slot = item[i].obj_sprite;
              // or Animate Objects
              else {
                if (!item[i].ani_done && item[i].ani_delay_counter == item[i].ani_delay ) {
                  int framecount = Game.GetFrameCountForLoop(item[i].view, item[i].loop);
                  
                  // Forwards Animation
                  if (item[i].ani_direction == eForwards) {
                    if ( item[i].frame_counter >= framecount-1) {  
                      if (item[i].ani_repeat == 2) item[i].ani_done = true;
                      else if (item[i].ani_repeat == eOnce) {
                        item[i].frame_counter = 0;
                        item[i].ani_done = true;
                        
                      }
                      else item[i].frame_counter = 0;
                    }
                    else item[i].frame_counter ++;
                  }
                  // Backwards Animation
                  else {
                    if ( item[i].frame_counter >0) {  
                      if (item[i].ani_repeat == 2) item[i].ani_done = true;
                      else if (item[i].ani_repeat == eOnce) {
                        item[i].frame_counter = framecount -1;
                        item[i].ani_done = true;
                      }
                      else item[i].frame_counter = framecount -1;
                    }
                    else {
                      item[i].frame_counter --;
                    }                    
                  }
                  
                  item[i].vf = Game.GetViewFrame(item[i].view, item[i].loop, item[i].frame_counter);
                  item[i].ani_delay_counter = 0;
                  item[i].ani_delay = (1 + item[i].vf.Speed) * item[i].ani_speed; 
                  
                }
                else {
                  item[i].vf = Game.GetViewFrame(item[i].view, item[i].loop, item[i].frame_counter);
                  item[i].ani_delay_counter++;
                }
                sprite_slot = item[i].vf.Graphic;   
              }
            }
          }
          else sprite_slot = tile_set.blank;
          
          item_width  = Game.SpriteWidth[sprite_slot];
          item_height = Game.SpriteHeight[sprite_slot];
          
          // Item Gravity
          if (!item[i].hidden && item[i].midair == true) 
          {
            int counter;
            int idx;
            item[i].yspeed += 1;//GRAVITY;
            int result = item[i].yspeed;
            
            // Check for floor during midair and reduce speed
            while ( counter < item[i].yspeed ) {
              
             idx = TILES.get_tile_at (item[i].x + item_width/2, item[i].y + item_height + counter, 1, item[i].current_tile);
             if (tile[idx].is_solid[l]) {
               result=counter;
               counter = item[i].yspeed;
             }
             
             counter++;
            }
            item[i].yspeed = result;
            item[i].current_tile = idx;
          }           
          
          if (!item[i].hidden && !item[i].ignore_gravity) {
            // Checking floor in general 
            int floor_idx   = 0;
            bool foundfloor = false;
            
            floor_idx = TILES.get_tile_at (item[i].x + item_width/2, item[i].y + item_height +1, 1, item[i].current_tile);
            if ( tile[floor_idx].is_solid[l] ) {
              foundfloor = true;
            }

            if (foundfloor && item[i].yspeed > -1)
            { 
              floor_idx = TILES.get_tile_at (item[i].x + item_width/2, item[i].y + item_height + 1, 1, item[i].current_tile);
              item[i].yspeed = 0;
              item[i].y = tile[floor_idx].y[l] + tile_offset_y - item_height;
              item[i].midair = false;
            }
            else item[i].midair = true;    
            
            item[i].current_tile = floor_idx;
            
            item[i].y += item[i].yspeed;    
          }
          // Item movement
          if (item[i].speed_delay_cnt >= item[i].speed_delay && item[i].distance != -1) 
          {
            if (!item[i].hidden && !item[i].midair) {
              if (item[i].distance >1) item[i].distance -= total(item[i].xspeed);
              else if (item[i].distance  == 1 ) item[i].distance = -1;
              item[i].speed_delay_cnt =0;
              tile_index =0;

              // move item left or top
              if (item[i].xspeed != 0 && item[i].facing < 0 ) {
                
                item[i].x -= item[i].xspeed;
                tile_index = TILES.get_tile_at (  item[i].x -1,  item[i].y + 2, 1, item[i].current_tile);
                if ( tile[tile_index].is_solid[l] )item[i].facing = 1;
              }
              if (item[i].xspeed != 0 && item[i].facing > 0 ) {
                
                item[i].x += item[i].xspeed;
                tile_index = TILES.get_tile_at (  item[i].x + item_width,  item[i].y + 2, 1, item[i].current_tile);
                if ( tile[tile_index].is_solid[l] )item[i].facing = -1;
              }              
            }
          }
          else item[i].speed_delay_cnt ++;
          if (item[i].in_foreground) foregroundSurface.DrawImage(item[i].x, item[i].y, sprite_slot );
          
          else roomSurface.DrawImage(item[i].x, item[i].y, sprite_slot );

				}
		i++;
	}
  roomSurface.Release();
  foregroundSurface.Release();
}


static function ITM::show_items_editor(bool objects_only,  bool items_only)
{
  DrawingSurface *roomSurface;
  roomSurface = Room.GetDrawingSurfaceForBackground();
	int i = 0;
  int sprite_slot;
  int item_width;
  int item_height;
  int tile_index =0;
  int l = 0;
  String itemident;

	while ( i < itm_index )
	{
		if ( item[i].active || item[i].obj_id > 0) {
			if ( item[i].x > (platform_screen_limit * (-1)) && item[i].x < Screen.Width + platform_screen_limit ) {
				if ( item[i].y > (platform_screen_limit * (-1)) && item[i].y < Screen.Height + platform_screen_limit )  
				{
          
            if (item[i].type != itm_object) {
              // animate Powerups            
              if (item[i].ani_delay_counter == item[i].ani_delay ) {
                
                int framecount = Game.GetFrameCountForLoop(tile_set.item_view, item[i].loop);
                
                if ( item[i].frame_counter >= framecount-1) item[i].frame_counter = 0;
                else item[i].frame_counter ++;
                
                item[i].vf = Game.GetViewFrame(tile_set.item_view, item[i].loop, item[i].frame_counter);
                item[i].ani_delay_counter = 0;
                item[i].ani_delay = 1+ item[i].vf.Speed; 
              }
              else {
                item[i].vf = Game.GetViewFrame(tile_set.item_view, item[i].loop, item[i].frame_counter);
                item[i].ani_delay_counter++;
              }
              sprite_slot = item[i].vf.Graphic;   
            }
            else {
              //Display non animated objects
              if (item[i].view == 0) sprite_slot = item[i].obj_sprite;
              // or Animate Objects
              else {
                if (!item[i].ani_done && item[i].ani_delay_counter == item[i].ani_delay ) {
                  int framecount = Game.GetFrameCountForLoop(item[i].view, item[i].loop);
                  
                  // Forwards Animation
                  if (item[i].ani_direction == eForwards) {
                    if ( item[i].frame_counter >= framecount-1) {  
                      if (item[i].ani_repeat == 2) item[i].ani_done = true;
                      else if (item[i].ani_repeat == eOnce) {
                        item[i].frame_counter = 0;
                        item[i].ani_done = true;
                        
                      }
                      else item[i].frame_counter = 0;
                    }
                    else item[i].frame_counter ++;
                  }
                  // Backwards Animation
                  else {
                    if ( item[i].frame_counter >0) {  
                      if (item[i].ani_repeat == 2) item[i].ani_done = true;
                      else if (item[i].ani_repeat == eOnce) {
                        item[i].frame_counter = framecount -1;
                        item[i].ani_done = true;
                      }
                      else item[i].frame_counter = framecount -1;
                    }
                    else {
                      item[i].frame_counter --;
                    }                    
                  }
                  
                  item[i].vf = Game.GetViewFrame(item[i].view, item[i].loop, item[i].frame_counter);
                  item[i].ani_delay_counter = 0;
                  item[i].ani_delay = (1 + item[i].vf.Speed) * item[i].ani_speed; 
                  
                }
                else {
                  item[i].vf = Game.GetViewFrame(item[i].view, item[i].loop, item[i].frame_counter);
                  item[i].ani_delay_counter++;
                }
                sprite_slot = item[i].vf.Graphic;   
              } 
            }
          if (item[i].obj_id >0 && !items_only) {
              roomSurface.DrawingColor= 56196;
              roomSurface.DrawRectangle(item[i].x+1, item[i].y+1, item[i].x+size_tile_x-1, item[i].y+size_tile_y-1);
              roomSurface.DrawingColor= 58723;
              roomSurface.DrawRectangle(item[i].x+2, item[i].y+2, item[i].x+size_tile_x-2, item[i].y+size_tile_y-2);
              
              sprite_slot = item[i].obj_sprite;
              roomSurface.DrawImage(item[i].x, item[i].y, sprite_slot, 0);
              itemident = String.Format("obj[%d",item[i].obj_id);
              if (item[i].in_foreground) itemident = itemident.Append("F");
              roomSurface.DrawingColor= 15;
              roomSurface.DrawStringWrapped(item[i].x+1, item[i].y+2, size_tile_x, eFontTinyOut, eAlignLeft, itemident);              
          }
          else if (item[i].obj_id <0 && !objects_only) {
            if (!item[i].hidden) {
              roomSurface.DrawingColor= 58723;
              roomSurface.DrawRectangle(item[i].x+1, item[i].y+1, item[i].x+size_tile_x-1, item[i].y+size_tile_y-1);
              roomSurface.DrawingColor= 59011;
              roomSurface.DrawRectangle(item[i].x+2, item[i].y+2, item[i].x+size_tile_x-2, item[i].y+size_tile_y-2);            
              roomSurface.DrawImage(item[i].x, item[i].y, sprite_slot);
            }
            else {
              ItemRaster = DynamicSprite.CreateFromExistingSprite(tile_set.raster, true);
              DynamicSprite *temp_itm = DynamicSprite.CreateFromExistingSprite(sprite_slot);
              ItemRaster.Crop(0, 0, Game.SpriteWidth[sprite_slot], Game.SpriteHeight[sprite_slot]);
              temp_itm.CopyTransparencyMask(ItemRaster.Graphic);
              roomSurface.DrawImage(item[i].x, item[i].y, temp_itm.Graphic);
            }
            
            itemident = String.Format("%d",item[i].type);           
            roomSurface.DrawingColor= 15;
            roomSurface.DrawStringWrapped(item[i].x+1, item[i].y+2, size_tile_x, eFontTinyOut, eAlignLeft, itemident);
          }
        }
      }
    }
    i++;
  }

  
}

//*******************************************************************************
//* init_object
//* Defines an object which has been set as a placeholder before (define_tiles)
//* This is called from roomscripts
//*
//*******************************************************************************
static function ITM::init_object(int obj_id, String name, int obj_sprite, bool is_solid, bool is_usable){
  int i = 0;
  
	while ( i < itm_index ) 
  {
		if ( item[i].type == itm_object && item[i].obj_id == obj_id) {
      item[i].name        = name;
      item[i].active      = true;
      item[i].obj_sprite  = obj_sprite;
      item[i].is_solid    = is_solid;
      item[i].view        = 0;
      item[i].ani_done    = false;
      item[i].usable      = is_usable;
		}
		i++;
	}  
}

//*******************************************************************************
//* set_object_usable
//*
//*******************************************************************************
static function ITM::set_object_usable(int obj_id, bool usable)
{
  item[t_object_id[obj_id]].usable = usable;
}

//*******************************************************************************
//* set_object_ignoregravity
//*
//*******************************************************************************
static function ITM::set_object_ignoregravity(int obj_id, bool ignoregravity)
{
  item[t_object_id[obj_id]].ignore_gravity = ignoregravity;
}
//*******************************************************************************
//* set_object_sprite
//*
//*******************************************************************************
static function ITM::set_object_sprite(int obj_id, int sprite)
{
  item[t_object_id[obj_id]].view = 0;
  item[t_object_id[obj_id]].loop = 0;
  item[t_object_id[obj_id]].obj_sprite = sprite;
}

//*******************************************************************************
//* get_object_sprite
//*
//*******************************************************************************
static int ITM::get_object_sprite (int obj_id) {
  
  return item[t_object_id[obj_id]].obj_sprite;
}

//*******************************************************************************
//* get_object_name
//*
//*******************************************************************************
static String ITM::get_object_name (int obj_id) {
  
  return item[t_object_id[obj_id]].name;
}

//*******************************************************************************
//* get_object_shown_name
//*
//*******************************************************************************
static String ITM::get_object_shown_name (int obj_id) {
  
  return item[t_object_id[obj_id]].shown_name;
}

//*******************************************************************************
//* get_object_idx
//*
//*******************************************************************************
static int ITM::get_object_idx (int obj_id) {
  
  return t_object_id[obj_id];
}

//*******************************************************************************
//* set_object_name
//*
//*******************************************************************************
static void ITM::set_object_name (int obj_id, String name) {
  
  item[t_object_id[obj_id]].name = name;
}

//*******************************************************************************
//* set_object_shown_name
//*
//*******************************************************************************
static void ITM::set_object_shown_name (int obj_id, String name) {
  
  item[t_object_id[obj_id]].shown_name = name;
}

//*******************************************************************************
//* set_object_img
//*
//*******************************************************************************
static void ITM::set_object_img (int obj_id, int sprite) {
  
  item[t_object_id[obj_id]].img = sprite;
}

//*******************************************************************************
//* set_object_solid
//*
//*******************************************************************************
static void ITM::set_object_solid (int obj_id, bool is_solid) {
  
  item[t_object_id[obj_id]].is_solid = is_solid;
}

//*******************************************************************************
//* get_object_xpos
//*
//*******************************************************************************
static int ITM::get_object_xpos (int obj_id) {
  
  return item[t_object_id[obj_id]].x;
}


//*******************************************************************************
//* get_object_xpos
//*
//*******************************************************************************
static int ITM::get_object_ypos (int obj_id) {
  
  return item[t_object_id[obj_id]].y;
}


//*******************************************************************************
//* get_item_from_tile
//*
//*******************************************************************************
static function ITM::get_item_from_tile(int tile_idx){
  int i;
  while (i<itm_index) {
    if (item[i].current_tile == tile_idx) return i;
    i++;
  }
  return -1;
}

//*******************************************************************************
//* set_item_XY_from_tile
//*
//*******************************************************************************
static function ITM::set_item_XY_from_tile(int item_id, int tile_index, bool centered) 
{
  int xpos;
  int ypos;
  
  if (tile_index == -1) {
    xpos = -1 - size_tile_x + tile_offset_x;
    ypos = -1 - size_tile_y + tile_offset_y;
  }
  
  else {
    xpos = tile[tile_index].x[1] + tile_offset_x;
    ypos = tile[tile_index].y[1] + tile_offset_y;
    
    if (centered) {
     xpos += size_tile_x / 2;
     ypos += size_tile_y / 2;
    }
  }
  item[item_id].x=xpos;
  item[item_id].y=ypos;
  
}
//*******************************************************************************
//* animate_object
//* unfortunately not blocking
//* use object_is_animating() for that
//*
//*******************************************************************************
static function ITM::animate_object(int obj_id, int view, int loop, int delay, RepeatStyle ani_repeat, Direction ani_direction)
{
  item[t_object_id[obj_id]].view              = view;
  item[t_object_id[obj_id]].ani_done          = false;
  item[t_object_id[obj_id]].loop              = loop;
  item[t_object_id[obj_id]].ani_speed         = delay;
  item[t_object_id[obj_id]].ani_delay_counter = 0;
  item[t_object_id[obj_id]].ani_repeat        = ani_repeat;
  item[t_object_id[obj_id]].ani_direction     = ani_direction;
  
  if (ani_direction == eBackwards) {
    int framecount = Game.GetFrameCountForLoop(view, loop);
    item[t_object_id[obj_id]].frame_counter = framecount-1;
  }
}

//*******************************************************************************
//* object_is_animating
//*
//*******************************************************************************
static bool ITM::object_is_animating (int obj_id)
{
  if (item[t_object_id[obj_id]].ani_done) return false;
  else return true;
}

//*******************************************************************************
//* process_item
//* What happens if an item is being picked up
//*
//*******************************************************************************
static function ITM::process_item(int itm_type, int index) 
{
  
  if ( itm_type == itm_grow ) {
    ego_stats.s_destroy_bricks = true;
    item[index].active = false;
  }
  else if ( itm_type == itm_gun ){
    if (ego_stats.anicounter_attack == -1) {
      ego_stats.s_has_gun = true;
      player.AddInventory(iArmGun);
      ego_stats.active_inv = iArmGun;
      mouse.Visible = false;
      ego_stats.active_weapon = eWPistol;
      item[index].active = false;
    }
  }
  else if ( itm_type == itm_pistol_ammo10 ) {
    weapon[eWPistol].ammo +=10;
    item[index].active = false;
  }
  else if ( itm_type == itm_arcanium ) {
    weapon[eWPistol].ammo +=10;
    ego_stats.arcanium += item[index].quantity;
    item[index].active = false;
  }   
}

export item, itm_index;
export t_object_id;
export item_types;