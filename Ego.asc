// new module script

  
import DynamicSprite *Foreground; // Layer 2

import cpeople people[MAX_PEOPLE];
import short people_index;
import short people_id[MAX_PEOPLE];

import citems item[MAX_ITEMS];
import short itm_index;
import bool frame_drop;
import short t_object_id[MAX_ITEMS];
import cWeapons weapon[eWLastWeapon];


import int size_tile_x, size_tile_y;
import int tile_offset_x, tile_offset_y;
import short tile_limit_x, tile_limit_y;
import int num_tiles_x, num_tiles_y;
import ctile tile[NUM_MAX_TILES];
import ctile_set tile_set;

import short platform_screen_limit;
import cplatforms platform[MAX_PLATFORMS];
import short pf_index;
import short t_hotspot_id[MAX_HOTSPOTS];
import short t_hotspot_index;
import ct_hotspot t_hotspot[MAX_HOTSPOTS];
import bool use_lock;
import bool walkOn_lock;

int total(int number) 
{
  if ( number > 0)  return number;
  else              return number*(-1);
}

//*******************************************************************************
//* init_player
//* Setup player vars
//*
//*******************************************************************************
static function EGO::init_player () 
{
  ego_stats.name = "Keel";
  cPlayer.Name = ego_stats.name;
  ego_stats.spr = DynamicSprite.Create(30, 36, false);
  ego_stats.s_can_grab = true;
  ego_stats.s_can_slide = true;
  ego_stats.s_can_doublejump = true;
  ego_stats.is_dying = false;
  ego_stats.is_dead = false;  
  ego_stats.s_has_gun = false;
  ego_stats.is_invisible = false;
  ego_stats.active_weapon = eWCloseCombat;
  ego_stats.active_inv = iArmFist;
  ego_stats.skill = 1;
  
  ego_stats.footwidth = 3;
  ego_stats.direction = eTengDirRight;
  ego_stats.anicounter_attack = -1;
  ego_stats.dist_check = -1;
  ego_stats.dist_check_y = -1;
  ego_stats.view = VPLAY_STD;
}

static function EGO::set_player_name(String theName) {
  ego_stats.name = theName;
  cPlayer.Name = ego_stats.name;  
}

static function EGO::set_topdown_mode(bool enabled)
{
  if (enabled) {
    ego_stats.view = VPLAY_TOPDOWN;
  }
  else ego_stats.view = VPLAY_STD;
}

//*******************************************************************************
//* face_player_hotspot
//*
//*******************************************************************************
static void EGO::face_player_hotspot (int hsp_id)
{
  int hsp_x = t_hotspot[t_hotspot_id[hsp_id]].x * size_tile_x + (size_tile_x/2) + tile_offset_x;
  
  if (hsp_x > player.x) {
    player.Loop = 2;
    player.Frame = 0;
    ego_stats.direction = eTengDirRight;
    ego_stats.loop = player.Loop;    
  }
  else {
    player.Loop = 1;
    player.Frame = 0;
    ego_stats.direction = eTengDirLeft;
    ego_stats.loop = player.Loop;       
  }
}



//*******************************************************************************
//* set_spawn
//*
//*******************************************************************************
static void EGO::set_spawn(int tile_index)
{
  int tile_x;
  int tile_y;
  tile_x = TILES.getTileIndexXFromIndex(tile_index);
  tile_y = TILES.getTileIndexYFromIndex(tile_index);
  
  ego_stats.startx = tile_x;
  ego_stats.starty = tile_y;
}


//*******************************************************************************
//* show_spawn_editor
//*
//*******************************************************************************
static void EGO::show_spawn_editor()
{
  int xpos, ypos;
  int player_spawn_limit = 70;
  int player_spawn_sprite = 358; 
  
  xpos = ego_stats.startx * size_tile_x;
  ypos = ego_stats.starty * size_tile_y;
  
  if ( xpos +tile_offset_x> (player_spawn_limit * (-1)) && xpos + tile_offset_x< Screen.Width + player_spawn_limit ) 
  {
    if ( ypos +tile_offset_y> (player_spawn_limit * (-1)) && ypos +tile_offset_y< Screen.Height + player_spawn_limit )
    {
      DrawingSurface *foregroundSurface = Foreground.GetDrawingSurface();
      foregroundSurface.DrawImage(xpos +tile_offset_x, ypos +tile_offset_y, player_spawn_sprite);
      foregroundSurface.Release();
    }
  }  
}
//*******************************************************************************
//* face_player_people
//*
//*******************************************************************************
static void EGO::face_player_people (int ppl_id)
{
  if (character[people[people_id[ppl_id]].char_id].x > player.x) {
    player.Loop = eTengDirRight;
    player.Frame = 0;
    ego_stats.direction = eTengDirRight;
    ego_stats.loop = player.Loop;
  }
  else {
    player.Loop = eTengDirLeft;
    player.Frame = 0;
    ego_stats.direction = eTengDirLeft;
    ego_stats.loop = player.Loop;    
  }
}

//*******************************************************************************
//* handle_player_invincibility
//* makes the player flashing
//*
//*******************************************************************************
static function EGO::handle_player_invincibility()
{
  if (ego_stats.s_invincible) {
    ViewFrame *CurrentFrame = Game.GetViewFrame(player.View, player.Loop, player.Frame);
    DynamicSprite *player_tint = DynamicSprite.CreateFromExistingSprite(tile_set.hitoverlay);
    player_tint.Crop(0, 0, Game.SpriteWidth[CurrentFrame.Graphic], Game.SpriteHeight[CurrentFrame.Graphic]);
    player_tint.CopyTransparencyMask(CurrentFrame.Graphic);
    
    if (ego_stats.invincible_cnt < ego_stats.invincible_timer) {
      
      if (ego_stats.flash_timer <= 6 )  {
        DrawingSurface *surface = Foreground.GetDrawingSurface();
        surface.DrawImage(player.x - INFO.get_char_width(player), player.y - 36, player_tint.Graphic);
        surface.Release();
      }
      
      else if (ego_stats.flash_timer > 12) ego_stats.flash_timer = -1;
      
      ego_stats.flash_timer++;
      ego_stats.invincible_cnt++;
    }
    else ego_stats.s_invincible = false;
  }
}

//*******************************************************************************
//* set_player_invincible
//*
//*******************************************************************************
static function EGO::set_player_invincible(int duration)
{
  ego_stats.invincible_timer = duration;
  ego_stats.invincible_cnt = 0;
  ego_stats.s_invincible = true;
}

static function EGO::set_player_invisible(bool state)
{
  ego_stats.is_invisible = state;
  if (state==true) player.ChangeView(VCHAR_BLANK);
}


//*******************************************************************************
//* face_player_object
//*
//*******************************************************************************
static void EGO::face_player_object (int obj_id)
{
  if ( item[t_object_id[obj_id]].x > player.x) {
    player.Loop = eTengDirRight;
    player.Frame = 0;
    ego_stats.direction = eTengDirRight;
    ego_stats.loop = player.Loop;      
  }
  else {
    player.Loop = eTengDirLeft;
    player.Frame = 0;
    ego_stats.direction = eTengDirLeft;
    ego_stats.loop = player.Loop;     
  }
}

//*******************************************************************************
//* get_shootloop_key
//* Return the shooting loop for keyboard aiming
//*
//*******************************************************************************
static function EGO::get_shootloop() {
  
  // Up right
  if (CTRL.isControlRight() && CTRL.isControlUp()) {
    return 6;
  }
  // bottom right
  else if (CTRL.isControlRight() && CTRL.isControlDown()) {
    return 8;       
  }
  // up left
  else if (CTRL.isControlLeft() && CTRL.isControlUp()) { 
    return 1;      
  }
  // bottom left
  else if (CTRL.isControlLeft() && CTRL.isControlDown()) {
    return 3;        
  }
  // up
  else if (CTRL.isControlUp()) {
    if (ego_stats.direction == eTengDirRight) return 5;
    else return 0;    
  }
  // down
  else if (CTRL.isControlDown()) {
    if (ego_stats.direction == eTengDirRight) return 9;
    else return 4;             
  }          
  // right
  else if (CTRL.isControlRight()&&!CTRL.isControlLeft()) {
    return 7;         
  }
  // left
  else if (CTRL.isControlLeft() && !CTRL.isControlRight()) {
    return 2;         
  }
  else {
    if (ego_stats.direction == eTengDirRight) return 7;
    else return 2;
  }
   
}

//*******************************************************************************
//* handle_player_sprite
//* Merges the shootloop body with the legs
//* Also adds skipping to the body (currently hard coded to frame and 3)
//*
//*******************************************************************************
static function EGO::handle_player_sprite() 
{
  ViewFrame* body, legs, gunfire;

  int body_loop;
  int body_view;
  int framecount;
  int framecount_gunfire;
  int temp_frame;
  int pixel_correct_x = 0;
  int pixel_correct_y = 0;

  if (!ego_stats.Ducks) legs = Game.GetViewFrame(VPLAY_LEGS, player.Loop, player.Frame);
  
  // Close Combat Animations
  /*
  if (ego_stats.active_weapon == eWCloseCombat) {
    body_view = VPLAY_BODY_FST;
    if (ego_stats.direction == eTengDirRight) {
      body_loop = 1;
      if (ego_stats.x_speed==0.0) pixel_correct_x = 1;
    }
    else {
      body_loop = 0;
      if (ego_stats.x_accel==0.0) pixel_correct_x=-1;
    }
  }
  else {
    body_view = VPLAY_BODY_SHT;
    body_loop = EGO.get_shootloop();

  }*/
  
  body_view = VPLAY_BODY_SHT;
  body_loop = EGO.get_shootloop();
  framecount = Game.GetFrameCountForLoop(body_view, body_loop);
  
  // draw punch animation, if needed
  /*
  if (body_view == VPLAY_BODY_FST) {
    body = Game.GetViewFrame(body_view, body_loop , ego_stats.frame_attack);
    if (ego_stats.anicounter_attack > -1) {
      if (ego_stats.anicounter_attack >= player.AnimationSpeed + body.Speed) {
        if (ego_stats.frame_attack == framecount-1) {
          ego_stats.frame_attack = 0;
          ego_stats.anicounter_attack = -1;
        }
        else {
          ego_stats.frame_attack  ++;
          ego_stats.anicounter_attack = 0;
        }
      }
      else ego_stats.anicounter_attack ++;    
    }    
  }*/
  // draw usual torso

  body = Game.GetViewFrame(body_view, body_loop , player.Frame);
  framecount_gunfire = Game.GetFrameCountForLoop(VBULLETANIM, 0);
  
  //animation for gunfire
  if (ego_stats.anicounter_attack > -1) {
    gunfire = Game.GetViewFrame(VBULLETANIM, 0, ego_stats.frame_attack);
    if (ego_stats.anicounter_attack >= player.AnimationSpeed + gunfire.Speed) {
      if (ego_stats.frame_attack == framecount_gunfire-1) {
        ego_stats.frame_attack = 0;
        ego_stats.anicounter_attack = -1;
      }
      else {
        ego_stats.frame_attack  ++;
        ego_stats.anicounter_attack = 0;
      }
    }
    else ego_stats.anicounter_attack ++;    
  }
  if (ego_stats.direction == eTengDirRight && ego_stats.anicounter_attack > -1 && ego_stats.frame_attack < 2) {
     if (body_loop != 5 && body_loop != 9) pixel_correct_x = -1;
  }
  else if (ego_stats.direction == eTengDirLeft && ego_stats.anicounter_attack > -1 && ego_stats.frame_attack < 2) {
    if (body_loop != 0 && body_loop != 4) pixel_correct_x = 1;
  }    
  
  
  //combine sprite
  DrawingSurface *surface = ego_stats.spr.GetDrawingSurface();
  surface.Clear();
  //if ducking attack, draw uncomined sprite
  if (ego_stats.Ducks) {
    // Weapon attack:
    if (body_view == VPLAY_BODY_SHT) {
      ViewFrame *duckframe = Game.GetViewFrame(VPLAY_STD, player.Loop, 1);
      if (ego_stats.direction == eTengDirRight) {
        surface.DrawImage(0, 0, duckframe.Graphic);
        if (ego_stats.anicounter_attack > -1)surface.DrawImage(26, 22, gunfire.Graphic);
      }
      else {
        surface.DrawImage(0, 0, duckframe.Graphic);
        if (ego_stats.anicounter_attack > -1)surface.DrawImage(0, 22, gunfire.Graphic);
      }
    }
    //close combat attack
    else {
      ViewFrame *duckframe;
      if (ego_stats.anicounter_attack > -1) duckframe = Game.GetViewFrame(VPLAY_STD, player.Loop, 2+ego_stats.frame_attack);
      else duckframe = Game.GetViewFrame(VPLAY_STD, player.Loop, 0);
      surface.DrawImage(0, 0, duckframe.Graphic);
    }
  }
  //Draw combined sprite
  else {
    surface.DrawImage(0, 0, legs.Graphic);
    surface.DrawImage(0+pixel_correct_x, 0+pixel_correct_y, body.Graphic);
  }
  
  // draw gunfire
  if (body_view == VPLAY_BODY_SHT && !ego_stats.Ducks && ego_stats.anicounter_attack > -1) {
    if      (body_loop == 0) surface.DrawImage(6, 1, gunfire.Graphic); // top left
    else if (body_loop == 1) surface.DrawImage(2, 4, gunfire.Graphic); // upper left
    else if (body_loop == 2) surface.DrawImage(0, 14, gunfire.Graphic); // left
    else if (body_loop == 3) surface.DrawImage(1, 25, gunfire.Graphic); // lower left
    else if (body_loop == 4) surface.DrawImage(14, 28, gunfire.Graphic); // bottom left
    else if (body_loop == 5) surface.DrawImage(19, 1, gunfire.Graphic); // top right
    else if (body_loop == 6) surface.DrawImage(23, 4, gunfire.Graphic); // upper right
    else if (body_loop == 7) surface.DrawImage(25, 14, gunfire.Graphic); // right
    else if (body_loop == 8) surface.DrawImage(25, 25, gunfire.Graphic); // lower right
    else if (body_loop == 9) surface.DrawImage(11, 28, gunfire.Graphic); // bottom right
  }
  surface.Release();
}


//*******************************************************************************
//* move_player
//* Moving the player around
//*
//*******************************************************************************
static function EGO::move_player_topdown()
{
/*
  int l = 0;
 
  int index = 0;
  int index2 = 0;
  int index_head = 0;
  int index_head2 = 0;
  int index_ladder = 0;
  int index_ladder2 = 0;
  
  int index_itm1 = -1;
  int index_itm2 = -1;
  int index_hsp = -1;
  
  int counter = 0;
  int charwidth  = INFO.get_char_width(player);
  int charheight = INFO.get_char_height(player);
  int ramp_modifier = 0;
  
  ego_stats.Found_Floor    = false;
  ego_stats.OnRamp         = false;
  ego_stats.Found_Ladder   = false;
  ego_stats.Ladder_solid   = false;
  ego_stats.GrabFound      = false;
  ego_stats.Jump_Forbidden = false;
  ego_stats.OnItem         = false;
  ego_stats.DeadlyTile     = false;
  

  if (frame_drop && !use_lock && !walkOn_lock)
  {
    ego_stats.current_action = eTAct_NoAction;
    ego_stats.current_act_id = -1;
  } 
  
  if (!ego_stats.OnPlatform || ego_stats.Jumped) {
    ego_stats.OnPlatform  = false;
    ego_stats.platform_id = -1;
  }

  if (ego_stats.direction != ego_stats.direction_old) {
    ego_stats.dist_check = -1;
    ego_stats.direction_old = ego_stats.direction;
  }  

  // check if there is a floor along the char baseline
  if (ego_stats.direction == eTengDirRight) {
    index  = TILES.get_tile_at  (player.x + ego_stats.footwidth, player.y +1, 1, ego_stats.current_tile);
    index2  = TILES.get_tile_at (player.x - ego_stats.footwidth, player.y +1, 1, ego_stats.current_tile);
    index_itm1  = ITM.get_item_at (player.x + ego_stats.footwidth, player.y +1);
    index_itm2  = ITM.get_item_at (player.x - ego_stats.footwidth, player.y +1); 
  }
  else {
    index =  TILES.get_tile_at (player.x - ego_stats.footwidth , player.y +1, 1, ego_stats.current_tile);
    index2 = TILES.get_tile_at (player.x + ego_stats.footwidth , player.y +1, 1, ego_stats.current_tile);
    index_itm1  = ITM.get_item_at (player.x - ego_stats.footwidth, player.y +1);
    index_itm2  = ITM.get_item_at (player.x + ego_stats.footwidth, player.y +1);
  }
  
  
  if (index >0) ego_stats.current_tile = index;

  // Particle emitting tile?
  if (tile[index].emit_particle[l] > 0 && tile[index].emit_particle_cnt[l] == 0) {
    PART.show_hit(IntToFloat(tile[index].x[l]+ tile_offset_x), IntToFloat(tile[index].y[l]+ tile_offset_y), tile[index].emit_particle[l]);
    tile[index].emit_particle_cnt[l] = 80;
  }
  
  // maybe no platforms?
  if (ego_stats.OnPlatform && ego_stats.xspeed != 0 ) {
    index   = PFORM.check_platform_at (player.x + (ego_stats.footwidth ), player.y +2, false);
    index2  = PFORM.check_platform_at (player.x - (ego_stats.footwidth ), player.y +2, false);
    
    if (index == -1 && index2 == -1) ego_stats.OnPlatform = false;

  }
  
  // On Item?
  if (index_itm1 > -1 || index_itm2 > -1) {
    ego_stats.current_action = eTAct_WalkOnObject;
    if (index_itm1 > -1) {
      if (item[index_itm1].is_solid) ego_stats.OnItem = true;
      ego_stats.current_act_id = item[index_itm1].obj_id;
    }
    else if (index_itm2 > -1){
      if (item[index_itm2].is_solid) ego_stats.OnItem = true;
      
      ego_stats.current_act_id = item[index_itm2].obj_id;
    }
  }
  // in front of item?
  else {
    index_itm1  = ITM.get_item_at (player.x + (ego_stats.footwidth ), player.y -2 );
    index_itm2  = ITM.get_item_at (player.x - (ego_stats.footwidth ), player.y -2 );  
    if (index_itm1 > -1 && item[index_itm1].usable) { 
      ego_stats.current_action = eTAct_InteractObject;
      ego_stats.current_act_id = item[index_itm1].obj_id;
    }
    else if (index_itm2 > -1 && item[index_itm2].usable) {
      ego_stats.current_action = eTAct_InteractObject;
      ego_stats.current_act_id = item[index_itm2].obj_id;     
    }
  }

  // if on item
  if (ego_stats.OnItem && ego_stats.yspeed > -1)
  {
    ego_stats.yspeed = 0;
    ego_stats.midair = false;
    ego_stats.NoControl = false;
    ego_stats.GrabPossible = false;
    player.Loop = ego_stats.direction;
    //if (ego_stats.SpriteDirection == 4 && index_itm1 > -1) player.y = item[index_itm1].y+1;
    if (ego_stats.direction == eTengDirRight && index_itm1 > -1) player.y = item[index_itm1].y+1;
    else if (index_itm2 > -1) player.y = item[index_itm2].y+1;

    
  }
  //if on platform
  else if (ego_stats.OnPlatform && ego_stats.platform_id > -1 && ego_stats.Jumped == false) 
  {
    ego_stats.yspeed = 0;
    ego_stats.midair = false;
    ego_stats.NoControl = false;
    ego_stats.GrabPossible = false;
    //ego_stats.platform_id = index;
    player.Loop = ego_stats.direction;
    
    player.y = platform[ego_stats.platform_id].y+1;  
    
  }
  
  // check for hotspots 
  // Standing on hotspot
  index_hsp = HSP.get_hotspot_at (index);
  if (index_hsp > -1) {
    ego_stats.current_action = eTAct_WalkOnHotspot;
    ego_stats.current_act_id = t_hotspot[index_hsp].id;
  }
  
  //tile to the right
  if (index_hsp <0 && index >0) {
    index_hsp = HSP.get_hotspot_at (index+1);
  }
  //tile to the left
  if (index_hsp <0 && index >1) {
    index_hsp = HSP.get_hotspot_at (index-1);
  }
  // below hotspot
  if (index_hsp <0 && index > num_tiles_x) {
    index_hsp = HSP.get_hotspot_at (index-num_tiles_x);   
  }
  // On top of hotspot
  if (index_hsp <0 && index+num_tiles_x < NUM_MAX_TILES) {
    index_hsp = HSP.get_hotspot_at (index+num_tiles_x);   
  }
  if (index_hsp > -1) {
    ego_stats.current_action = eTAct_InteractHotspot;
    ego_stats.current_act_id = t_hotspot[index_hsp].id;
  } 
  
  
  //Add current acceleration to the speed
  ego_stats.xspeed = ego_stats.xspeed + (ego_stats.xaccel/2); 
  ego_stats.yspeed = ego_stats.yspeed + (ego_stats.yaccel/2); 

  //if in control
  if (!ego_stats.NoControl) 
  { 
    // if moving right
    if (ego_stats.xspeed > 0 && ego_stats.xspeed != 1) 
    { 
      ego_stats.xspeed -= 2; //deceleration under friction
    }
    
    // if moving left
    else if (ego_stats.xspeed < 0 && ego_stats.xspeed != -1)
    { 
      ego_stats.xspeed += 2; //deceleration under friction
    }
    else {
      ego_stats.xspeed = 0;
    }
    
    // if moving up
    if (ego_stats.yspeed < 0 && ego_stats.yspeed != -1) 
    { 
      ego_stats.yspeed += 2; //deceleration under friction
    }
    
    // if moving down
    else if (ego_stats.yspeed > 0 && ego_stats.yspeed != 1)
    { 
      ego_stats.yspeed -= 2; //deceleration under friction
    }
    else {
      ego_stats.yspeed = 0;
    }
    
  }

  
  //Limit horz. movement to max speed
  if (ego_stats.xspeed > MAXSPEED)ego_stats.xspeed = MAXSPEED;
  if (ego_stats.xspeed < -1 * MAXSPEED) ego_stats.xspeed = -1 * MAXSPEED;
  
  if (ego_stats.yspeed > MAXSPEED)ego_stats.yspeed = MAXSPEED;
  if (ego_stats.yspeed < -1 * MAXSPEED) ego_stats.yspeed = -1 * MAXSPEED;
  
  
  // Stop at screen edges
  if ( (player.x + charwidth >= Screen.Width && ego_stats.direction ==eTengDirRight) || 
        (player.x - charwidth < 0 && ego_stats.direction == eTengDirLeft) ) ego_stats.xspeed = 0;
  
  if ( player.y > Screen.Height) ego_stats.yspeed = 0;  
  
  //wall collision check
  ego_stats.xspeed = COLL.check_walls_topdown(player, 0, ego_stats.xspeed);
  ego_stats.yspeed = COLL.check_walls_topdown(player, ego_stats.yspeed, 0); 
  
  //change char position
  player.x = player.x + (ego_stats.xspeed / XACCEL);
  player.y = player.y + (ego_stats.yspeed / YACCEL);
  
  // add platform position
  if (ego_stats.platform_id > -1) {
    if (platform[ego_stats.platform_id].timer == -1 && platform[ego_stats.platform_id].speed_delay_cnt == platform[ego_stats.platform_id].speed_delay) {
      if (platform[ego_stats.platform_id].facing > 0) {
        player.x += platform[ego_stats.platform_id].xspeed;
        player.y += platform[ego_stats.platform_id].yspeed;
        platform[ego_stats.platform_id].x += platform[ego_stats.platform_id].xspeed;
        platform[ego_stats.platform_id].y += platform[ego_stats.platform_id].yspeed;
      }
      else {
        player.x -=platform[ego_stats.platform_id].xspeed;
        player.y -= platform[ego_stats.platform_id].yspeed;
        platform[ego_stats.platform_id].x -= platform[ego_stats.platform_id].xspeed;
        platform[ego_stats.platform_id].y -= platform[ego_stats.platform_id].yspeed;
      }

    }        
  }*/
}

//*******************************************************************************
//* move_player
//* Moving the player around
//*
//*******************************************************************************
static function EGO::move_player()
{

  int l = 0;
 
  int index = 0;
  int index2 = 0;
  int index_head = 0;
  int index_head2 = 0;
  int index_ladder = 0;
  int index_ladder2 = 0;
  
  int index_itm1 = -1;
  int index_itm2 = -1;
  int index_hsp = -1;
  
  int counter = 0;
  int charwidth  = INFO.get_char_width(player);
  int charheight = INFO.get_char_height(player);
  int temp_ramp = 0;
  int ramp_modifier =0;
  
  ego_stats.Found_Floor    = false;
  ego_stats.OnRamp         = false;
  ego_stats.Found_Ladder   = false;
  ego_stats.Ladder_solid   = false;
  ego_stats.GrabFound      = false;
  ego_stats.Jump_Forbidden = false;
  ego_stats.OnItem         = false;
  ego_stats.DeadlyTile     = false;
  
  if (frame_drop && !use_lock && !walkOn_lock)
  {
    ego_stats.current_action = eTAct_NoAction;
    ego_stats.current_act_id = -1;
  }  

  
  if (!ego_stats.OnPlatform || ego_stats.Jumped) {
    ego_stats.OnPlatform  = false;
    ego_stats.platform_id = -1;
  }

  if (ego_stats.direction != ego_stats.direction_old) {
    ego_stats.dist_check = -1;
    ego_stats.direction_old = ego_stats.direction;
  }

  // Limit falling speed
  if (ego_stats.y_speed > MAX_FALLING_SPEED) ego_stats.y_speed = MAX_FALLING_SPEED;
  
  // Reduce vertical and or horizontal speed during midair
  if (ego_stats.midair == true) 
  {
    ego_stats.was_midair = true;
    if (ego_stats.Jump_Timer == -1) //if in midair add gravity
    {
      ego_stats.y_speed = ego_stats.y_speed + GRAVITY;
    }
    ego_stats.y_speed = COLL.check_walls(player, ego_stats.y_speed, 0.0); 
  }  
  
  // check if there is a floor along the char baseline
  if (ego_stats.direction == eTengDirRight) {
    index  = TILES.get_tile_at  (player.x + ego_stats.footwidth, player.y +1, 1, ego_stats.current_tile);
    index2  = TILES.get_tile_at (player.x - ego_stats.footwidth, player.y +1, 1, ego_stats.current_tile);
    index_itm1  = ITM.get_item_at (player.x + ego_stats.footwidth, player.y +1);
    index_itm2  = ITM.get_item_at (player.x - ego_stats.footwidth, player.y +1); 
  }
  else {
    index =  TILES.get_tile_at (player.x - ego_stats.footwidth , player.y +1, 1, ego_stats.current_tile);
    index2 = TILES.get_tile_at (player.x + ego_stats.footwidth , player.y +1, 1, ego_stats.current_tile);
    index_itm1  = ITM.get_item_at (player.x - ego_stats.footwidth, player.y +1);
    index_itm2  = ITM.get_item_at (player.x + ego_stats.footwidth, player.y +1);
     
  }
  index_ladder  = TILES.get_tile_at (player.x, player.y - 2, 1, ego_stats.current_tile);
  index_ladder2 = TILES.get_tile_at (player.x, player.y + 1, 1, ego_stats.current_tile);
  
  
  if (index >0) ego_stats.current_tile = index;

  // sliding 
  if (ego_stats.InSlide != 0) {
    if (frame_drop) Particle.spawn(IntToFloat(player.x + (5 * ego_stats.InSlide)), IntToFloat(player.y-4), 0.3, 0.0, ParticleType_Smoke);    
    ego_stats.SlideTimer ++;
    if (!ego_stats.SlideStop && index >num_tiles_x * 2) {
      if (!tile[index - (num_tiles_x * 2)].is_solid[l] && !tile[index - (num_tiles_x * 2) + (ego_stats.InSlide*2)].is_solid[l] && !tile[index2 - (num_tiles_x * 2)].is_solid[l] ) {
        if (ego_stats.SlideTimer > SLIDE_DURATION) {
          if (ego_stats.x_accel >= X_ACCEL) ego_stats.x_accel -= X_ACCEL;
          else ego_stats.x_accel += X_ACCEL;
        }    
      }else ego_stats.Jump_Forbidden = true;
    }
  }  
  
  // Particle emitting tile?
  if (tile[index].emit_particle[l] > 0 && tile[index].emit_particle_cnt[l] == 0) {
    PART.show_hit(IntToFloat(tile[index].x[l]+ tile_offset_x), IntToFloat(tile[index].y[l]+ tile_offset_y), tile[index].emit_particle[l]);
    tile[index].emit_particle_cnt[l] = 80;
  }
  
  
  // avoid skipping up to tiles/ramps etc.
  if (index-num_tiles_x > 0 && tile[index-num_tiles_x].is_fg_ramp[l]) ego_stats.OnRamp = true;
  if (tile[index].is_ramp[l]) ego_stats.OnRamp = true;
  else if (!ego_stats.midair && tile[index].is_ramp_support[l]) 
  { 
    if (ego_stats.direction == eTengDirRight) index = TILES.get_tile_at (player.x + (ego_stats.footwidth ), player.y - (ego_stats.footwidth), 1, ego_stats.current_tile);
    else index = TILES.get_tile_at (player.x - (ego_stats.footwidth ), player.y - (ego_stats.footwidth), 1, ego_stats.current_tile);
    ego_stats.OnRamp = true;  
  }

  // find a floor
  if ( (tile[index].is_solid[l] || tile[index2].is_solid[l]) ) 
  { 
    if ( (tile[index2].is_ramp[l] && ( tile[index].is_solid[l] || tile[index].is_ramp_support[l] ) ) || !tile[index2].is_ramp[l] )
    {
      if (ego_stats.midair && (player.y < tile[index].y[l] + tile_offset_y  +(charheight/2))||(player.y < tile[index2].y[l] + tile_offset_y  + (charheight/2)) ){
        ego_stats.Found_Floor = true;  
      }
      else if (!ego_stats.midair && (player.y < tile[index].y[l] + tile_offset_y  +(charheight/2)) || (player.y < tile[index2].y[l] + tile_offset_y  +(charheight/2)) )
        ego_stats.Found_Floor = true;
    }
  }
  

  // fill ramp gaps
  if (!tile[index].is_solid[l] && !tile[index].is_ramp[l]) {
    if (ego_stats.direction == eTengDirRight) 
      index  = TILES.get_tile_at (player.x - ego_stats.footwidth, player.y -2, 1, ego_stats.current_tile);

    else 
      index = TILES.get_tile_at (player.x + ego_stats.footwidth, player.y -2, 1, ego_stats.current_tile);
      
    if (tile[index].is_ramp[l]) {
      ego_stats.OnRamp = true;

    }
    else if (!ego_stats.midair && tile[index].is_ramp_support[l]) {
      if ( (ego_stats.direction == eTengDirRight && !tile[index].mirrored_x[l]) || (ego_stats.direction == eTengDirLeft && tile[index].mirrored_x[l]) )
      {
        if (tile[index - num_tiles_x].is_ramp[l] || tile[index - num_tiles_x].is_ramp_support[l]) {
          ego_stats.OnRamp = false;    
        } else ego_stats.OnRamp = true;    
      }
    }
  }
  
  // Ladder ?
  if (tile[index_ladder].is_ladder[l] && ego_stats.InSlide==0 ) {
    int laddercheck = total (tile[index].x[l] + tile_offset_x - player.x);
    int laddersize = size_tile_x /3;
    if (laddercheck > size_tile_x - laddersize * 2 && laddercheck  < size_tile_x - laddersize) ego_stats.Found_Ladder = true;
  }
  if (tile[index_ladder2].is_ladder[l] && tile[index_ladder2].is_solid[l] && ego_stats.InSlide==0) {
    int laddercheck = total (tile[index].x[l] + tile_offset_x - player.x);
    int laddersize = size_tile_x /3;
    if (laddercheck > size_tile_x - laddersize * 2 && laddercheck  < size_tile_x - laddersize) { 
      ego_stats.Found_Ladder = true;    
      ego_stats.Ladder_solid = true;
    }
  }
  
  if (!tile[index_ladder].is_ladder[l] && tile[index_ladder2].is_ladder[l]) ego_stats.Ladder_NoUp = true;
  else ego_stats.Ladder_NoUp = false;
    
  // maybe no platforms?
  if (ego_stats.OnPlatform && ego_stats.x_speed != 0.0 ) {
    index   = PFORM.check_platform_at (player.x + (ego_stats.footwidth ), player.y +2, false);
    index2  = PFORM.check_platform_at (player.x - (ego_stats.footwidth ), player.y +2, false);
    
    if (index == -1 && index2 == -1) ego_stats.OnPlatform = false;

  }
  
  // On Item?
  if (index_itm1 > -1 || index_itm2 > -1) {
    ego_stats.current_action = eTAct_WalkOnObject;
    if (index_itm1 > -1) {
      if (item[index_itm1].is_solid) ego_stats.OnItem = true;
      if (item[index_itm1].usable) ego_stats.current_action = eTAct_InteractObject;
      ego_stats.current_act_id = item[index_itm1].obj_id;
    }
    else if (index_itm2 > -1){
      if (item[index_itm2].is_solid) ego_stats.OnItem = true;
      if (item[index_itm2].usable) ego_stats.current_action = eTAct_InteractObject;
      ego_stats.current_act_id = item[index_itm2].obj_id;
    }
  }
  // in front of item?
  else {
    index_itm1  = ITM.get_item_at (player.x + (ego_stats.footwidth ), player.y -2 );
    index_itm2  = ITM.get_item_at (player.x - (ego_stats.footwidth ), player.y -2 );  
    
    if (index_itm1 > -1 && item[index_itm1].usable) { 
      ego_stats.current_action = eTAct_InteractObject;
      ego_stats.current_act_id = item[index_itm1].obj_id;
    }
    else if (index_itm2 > -1 && item[index_itm2].usable) {
      ego_stats.current_action = eTAct_InteractObject;
      ego_stats.current_act_id = item[index_itm2].obj_id;     
    }
  }

  
    
  // bounce from top tiles or destroy them
  if (ego_stats.midair == true && ego_stats.y_speed < 0.0) 
  {
    index_head  = TILES.get_tile_at (player.x + (ego_stats.footwidth ) , player.y - charheight, 1, ego_stats.current_tile);
    index_head2 = TILES.get_tile_at (player.x - (ego_stats.footwidth ) , player.y - charheight, 1, ego_stats.current_tile);
    
    if (tile[index_head].is_deadly[l] ||tile[index_head2].is_deadly[l]) {
      ego_stats.DeadlyTile = true;
    }
    
    //Check for diagonal ceiling
    if (tile[index_head].is_ramp_ceiling[l] || tile[index_head2].is_ramp_ceiling[l] ) {
      ego_stats.GrabPossible = false;
      ego_stats.GrabFound = false;
      if (tile[index_head].is_solid[l] || tile[index_head2].is_solid[l]) ego_stats.y_speed = 1.0;
      else {
        int temp_head_idx = 0;
        if (ego_stats.direction == eTengDirRight && tile[index_head2].is_ramp_ceiling[l]) temp_head_idx = index_head2;
        else if (ego_stats.direction == eTengDirRight && tile[index_head].is_ramp_ceiling[l]) temp_head_idx = index_head;
        else if (ego_stats.direction == eTengDirLeft && tile[index_head].is_ramp_ceiling[l]) temp_head_idx = index_head;
        else if (ego_stats.direction == eTengDirLeft && tile[index_head2].is_ramp_ceiling[l]) temp_head_idx = index_head2;
        else temp_head_idx = index_head;
        
        ramp_modifier = COLL.get_ramp_ypos(temp_head_idx, player);
        ramp_modifier = size_tile_y - ramp_modifier;
        temp_ramp = tile[temp_head_idx].y[l] + tile_offset_y + ramp_modifier;

        if (tile[index_head].is_solid[l] || tile[index_head2].is_solid[l]) ego_stats.y_speed = 1.0;
        if (player.y - charheight <= temp_ramp+1) ego_stats.y_speed = 1.0;
      }
      
    }    
    else if ( (tile[index_head].is_solid[l] || tile[index_head2].is_solid[l]) && (!tile[index_head].is_ramp[l] && !tile[index_head2].is_ramp[l]) && (!tile[index_head].is_platform[l] &&!tile[index_head2].is_platform[l])) 
    {

      ego_stats.y_speed = Y_ACCEL;
      
      //Destructable tiles
      if (tile[index_head].is_destructable[l] && tile[index_head2].is_destructable[l]) 
      {
        if (ego_stats.s_destroy_bricks) {
          PART.show_debris(tile[index_head].x[l], tile[index_head].y[l]);
          tile[index_head].is_solid[l]        = false;
          tile[index_head].is_destructable[l] = false;
          tile[index_head].spr[l]             = DynamicSprite.CreateFromExistingSprite(tile_set.blank);
          tile[index_head].loop[l]            = 0;
        }
      }
      //Bonus
      else if (tile[index_head].is_bonus[l] && tile[index_head2].is_bonus[l]) 
      {
        tile[index_head].is_bonus[l]      = false;
        tile[index_head].spr[l]           = DynamicSprite.CreateFromExistingSprite(tile_set.empty_bonus);
        tile[index_head].loop[l] = 0;        
        
        //int itm_id = ITM.get_item_at(tile[index_head].x[l] + tile_offset_x+(size_tile_x/2), tile[index_head].y[l] + tile_offset_y + (size_tile_y/2));        
        int itm_id = ITM.get_item_from_tile(index_head);

        if (itm_id > -1) {
          item[itm_id].hidden = false;
          item[itm_id].y = tile[index_head - num_tiles_x].y[l]+tile_offset_y;
          item[itm_id].yspeed = -5;
        }
        else {
          PART.show_bonus(tile[index_head].x[l], tile[index_head].y[l]);
          ego_stats.arcanium += 1;
        }
      }
    }
  }
  
  // ramp handling
  if (ego_stats.OnRamp && ego_stats.Jumped == false && ego_stats.y_speed > -0.1) 
  {
    int tile_idx;
    temp_ramp = 0;
    ramp_modifier =0;
    if (tile[index].is_ramp[l]) tile_idx = index;
    // Ramp support tile
    else  
    {
      if (ego_stats.direction == eTengDirRight) 
        tile_idx  = TILES.get_tile_at (player.x + (ego_stats.footwidth ), player.y -ego_stats.footwidth);
      else 
        tile_idx = TILES.get_tile_at (player.x - (ego_stats.footwidth ), player.y - ego_stats.footwidth);
    }

    ramp_modifier = COLL.get_ramp_ypos(tile_idx, player);
    temp_ramp = tile[tile_idx].y[l] + tile_offset_y +size_tile_y - ramp_modifier +2;
       
    
    if (!ego_stats.midair) {
      player.y = temp_ramp;
      if (tile_idx >0) ego_stats.current_tile = tile_idx;
      if (tile[tile_idx].is_deadly[l]) ego_stats.DeadlyTile = true;
      ego_stats.y_speed = 0.0;
      ego_stats.midair = false;
      ego_stats.NoControl = false;
      ego_stats.GrabPossible = false;
      player.Loop = ego_stats.direction;     
    }
    
    else if (player.y +ego_stats.footwidth >= temp_ramp -ego_stats.footwidth) {
      player.y = temp_ramp;
      if (tile_idx >0) ego_stats.current_tile = tile_idx;
      if (tile[tile_idx].is_deadly[l]) ego_stats.DeadlyTile = true;
      ego_stats.y_speed = 0.0;
      ego_stats.midair = false;
      ego_stats.NoControl = false;
      ego_stats.GrabPossible = false;
      player.Loop = ego_stats.direction;  
    }

          
  }
  //if on floor
  else if (!ego_stats.OnLadder &&!ego_stats.OnItem && ego_stats.Found_Floor && ego_stats.Jumped == false && ego_stats.y_speed > -0.1)
  { 
    bool check = true;
    // semi solid tile platforms 
    index  = TILES.get_tile_at (player.x, player.y + 1); 
    if (tile[index].is_platform[l] && player.y > tile[index].y[l] + tile_offset_y +3) check = false;
    if (check) {
      ego_stats.y_speed = 0.0;
      ego_stats.midair = false;
      ego_stats.NoControl = false;
      ego_stats.GrabPossible = false;
      player.Loop = ego_stats.direction;
      player.y = tile[index].y[l] + tile_offset_y+1;  
      if (index >0) ego_stats.current_tile = index;
      if (tile[index].is_deadly[l]) ego_stats.DeadlyTile = true;
    } else ego_stats.midair = true;
 
  }
  // if on item
  else if (ego_stats.OnItem && ego_stats.Jumped == false && ego_stats.y_speed > -0.1)
  {
    ego_stats.y_speed = 0.0;
    ego_stats.midair = false;
    ego_stats.NoControl = false;
    ego_stats.GrabPossible = false;
    player.Loop = ego_stats.direction;
    if (ego_stats.direction == eTengDirRight && index_itm1 > -1) player.y = item[index_itm1].y+1;
    else if (index_itm2 > -1) player.y = item[index_itm2].y+1;

    
  }
  //if on platform
  else if (ego_stats.OnPlatform && ego_stats.platform_id > -1 && ego_stats.Jumped == false) 
  {
    ego_stats.y_speed = 0.0;
    ego_stats.midair = false;
    ego_stats.NoControl = false;
    ego_stats.GrabPossible = false;
    //ego_stats.platform_id = index;
    player.Loop = ego_stats.direction;
    
    player.y = platform[ego_stats.platform_id].y+1;  
    
  }
  // Get off ladders
  else if (ego_stats.OnLadder && !ego_stats.Found_Ladder) {
    index = ego_stats.current_tile;
    ego_stats.y_speed = -1.0;
    ego_stats.climb_speed = 0.0;
    ego_stats.y_accel = 0.0;
    ego_stats.midair = true;
    ego_stats.OnLadder = false;
    ego_stats.GrabPossible = false;
  }   
  // if climbing on ladder 
  else if (ego_stats.OnLadder && ego_stats.Found_Ladder ) {
    index = ego_stats.current_tile;
    ego_stats.y_speed = 0.0;
    ego_stats.midair = false;
    ego_stats.NoControl = false; 
    ego_stats.GrabPossible = false;

  }
  else if (ego_stats.HasGrabbed) {
    index = ego_stats.current_tile;
    ego_stats.y_speed = 0.0;    
    ego_stats.x_speed = 0.0;
    ego_stats.NoControl = false; 
    ego_stats.midair = false;   
    player.y = tile[ego_stats.grab_tile_id].y[l] + tile_offset_y + size_tile_y-3;
  }
  else {
    ego_stats.midair = true;
  }
  

 
  // check for hotspots 
  if (ego_stats.current_action != eTAct_InteractObject && ego_stats.current_action != eTAct_WalkOnObject && ego_stats.current_action != eTAct_InteractChar) {
    index_hsp = HSP.get_hotspot_at (index);
    
    if (index_hsp > -1) {
      ego_stats.current_action = eTAct_WalkOnHotspot;
      ego_stats.current_act_id = t_hotspot[index_hsp].id;
    }
    else if (index > num_tiles_x) {
      index_hsp = HSP.get_hotspot_at (index-num_tiles_x);
      if (index_hsp > -1) {
        ego_stats.current_action = eTAct_InteractHotspot;
        ego_stats.current_act_id = t_hotspot[index_hsp].id;
      }
      else {
        ego_stats.current_action = eTAct_NoAction;
        //ego_stats.current_act_id = -1;   
      }    
    }
  }
   
  //Add current acceleration to the speed 
  ego_stats.x_speed+= ego_stats.x_accel;  
  ego_stats.climb_speed += ego_stats.y_accel;
  
  //if in control
  if (!ego_stats.NoControl) 
  { 
    
    // moving right deceleration
    if (ego_stats.x_speed > 0.0 && !CTRL.isControlRight()) 
    { 
      ego_stats.x_speed -= 0.1; 
      if (ego_stats.x_speed < 0.0) ego_stats.x_speed = 0.0;
    }
    
    // moving left deceleration
    else if (ego_stats.x_speed < 0.0 && !CTRL.isControlLeft())
    { 
      ego_stats.x_speed += 0.1 ; 
      if (ego_stats.x_speed > 0.0) ego_stats.x_speed = 0.0;
    }
    
    // climbing deceleration
    if (ego_stats.climb_speed > 0.0 && !CTRL.isControlDown()) {
      ego_stats.climb_speed -= 0.2;
      if (ego_stats.climb_speed < 0.0) ego_stats.climb_speed = 0.0;
    }
    else if (ego_stats.climb_speed < 0.0 && !CTRL.isControlUp()) {
      ego_stats.climb_speed += 0.2;
      if (ego_stats.climb_speed > 0.0) ego_stats.climb_speed = 0.0;
    }
    
  }

  
  
  //Limit horz. movement to max speed
  if (ego_stats.x_speed > MAX_XSPEED) ego_stats.x_speed = MAX_XSPEED;
  if (ego_stats.x_speed < -1.0 * MAX_XSPEED) ego_stats.x_speed = -1.0 * MAX_XSPEED;
  
  
  if (ego_stats.climb_speed > MAX_CLIMB_SPEED) ego_stats.climb_speed = MAX_CLIMB_SPEED;
  if (ego_stats.climb_speed < -1.0 * MAX_CLIMB_SPEED) ego_stats.climb_speed = -1.0 * MAX_CLIMB_SPEED;
  
  // Stop at screen edges
  if ( (player.x + charwidth >= Screen.Width && ego_stats.direction == eTengDirRight) || 
        (player.x - charwidth < 0 && ego_stats.direction == eTengDirLeft) ) ego_stats.x_speed = 0.0;
  
  if ( player.y > Screen.Height) ego_stats.y_speed = 0.0;  
  
  
    // reset sliding
  if (ego_stats.SlideStop || (ego_stats.x_accel == 0.0 &&  ego_stats.InSlide!=0)) {
    ego_stats.InSlide = 0;
    ego_stats.SlideTimer = 0;
    ego_stats.SlideStop = false;
    ego_stats.Ducks = true;
    ego_stats.x_accel = 0.0;
    ego_stats.x_speed = 0.0;
  }    
      

  // check for sliding and limit movement
  if (!ego_stats.OnRamp &&  ego_stats.InSlide==0) ego_stats.x_speed = COLL.check_walls(player, 0.0, ego_stats.x_speed);
  if (ego_stats.InSlide !=0) ego_stats.x_speed = COLL.check_slide(player, ego_stats.x_speed);
  
  // Check for grabbing
  if ( ego_stats.GrabFound && ego_stats.s_can_grab ) {
    if (ego_stats.GrabPossible) ego_stats.HasGrabbed = true;
  }
  
  // Stop climbing through floors
  if (!ego_stats.Ladder_solid && (ego_stats.Found_Floor && ego_stats.climb_speed > 0.0) ) {
    ego_stats.climb_speed =0.0;
    ego_stats.OnLadder = false;
  }
  
  //change char position

  ego_stats.x_delta  = IntToFloat(player.x) + ego_stats.x_speed;
  ego_stats.x_delta += ego_stats.x_remain;
  ego_stats.x_remain = ego_stats.x_delta - IntToFloat(FloatToInt(ego_stats.x_delta, eRoundDown));
  
  ego_stats.scroll_delta_x  = ego_stats.x_speed;
  ego_stats.scroll_delta_x += ego_stats.scroll_remain_x;
  ego_stats.scroll_remain_x = ego_stats.scroll_delta_x - IntToFloat(FloatToInt(ego_stats.scroll_delta_x, eRoundDown)); 
  ego_stats.scroll_x = FloatToInt(ego_stats.scroll_delta_x, eRoundDown);  
      
  player.x = FloatToInt(ego_stats.x_delta, eRoundDown);
  
  ego_stats.y_delta  = IntToFloat(player.y) + ego_stats.y_speed + ego_stats.climb_speed;
  ego_stats.y_delta += ego_stats.y_remain;
  ego_stats.y_remain = ego_stats.y_delta - IntToFloat(FloatToInt(ego_stats.y_delta, eRoundDown));
  player.y = FloatToInt(ego_stats.y_delta, eRoundDown);  
  
  /*
  lblDebug1.Text = String.Format("Climb %f", ego_stats.climb_speed);
  lblDebug2.Text = String.Format("yspeed %f", ego_stats.y_speed);
  lblDebug3.Text = String.Format("yaccel %f", ego_stats.y_accel);
  */
  
  // add platform position
  if (ego_stats.platform_id > -1) {
    if (platform[ego_stats.platform_id].timer == -1 && platform[ego_stats.platform_id].speed_delay_cnt == platform[ego_stats.platform_id].speed_delay) {
      if (platform[ego_stats.platform_id].facing > 0) {
        player.x += platform[ego_stats.platform_id].xspeed;
        player.y += platform[ego_stats.platform_id].yspeed;
        platform[ego_stats.platform_id].x += platform[ego_stats.platform_id].xspeed;
        platform[ego_stats.platform_id].y += platform[ego_stats.platform_id].yspeed;
      }
      else {
        player.x -=platform[ego_stats.platform_id].xspeed;
        player.y -= platform[ego_stats.platform_id].yspeed;
        platform[ego_stats.platform_id].x -= platform[ego_stats.platform_id].xspeed;
        platform[ego_stats.platform_id].y -= platform[ego_stats.platform_id].yspeed;
      }

    }        
  }
  
  // reset the Doublejump
  if (ego_stats.DoubleJump && !ego_stats.midair) ego_stats.DoubleJump=false;
  
  // emit a particle on landing
  if (!ego_stats.midair && ego_stats.was_midair == true) {
    ego_stats.was_midair = false;
    if (!ego_stats.OnLadder) {
      Particle.spawn(IntToFloat(player.x + 4), IntToFloat(player.y-4), 0.3, 0.0, ParticleType_Smoke);
      Particle.spawn(IntToFloat(player.x - 4), IntToFloat(player.y-4), 0.3, 0.0, ParticleType_Smoke);
    }
  }
  
  
}


//*******************************************************************************
//* animate_player
//* Animates the player
//*
//*******************************************************************************
static function EGO::animate_player()
{
  ViewFrame *CurrentFrame = Game.GetViewFrame(player.View, player.Loop, player.Frame);
  int framecount;

  if (ego_stats.InSlide > 0){ //if sliding righty
    player.Loop = 8;
    player.Frame = 0;
  }
  else if (ego_stats.InSlide < 0){ // if sliding left
    player.Loop = 7;
    player.Frame = 0;
  }
  else if (ego_stats.Ducks) {
    if (ego_stats.active_weapon!=eWCloseCombat) player.Frame = 1;
    else player.Frame = 0;
    if (ego_stats.direction == eTengDirRight)  player.Loop = 13;
    else player.Loop = 12;
  }
  
  
  //animate punches
  else if (ego_stats.active_weapon == eWCloseCombat && ego_stats.attack_combo_counter > 0 ) 
  {
 
    //select the loop
    if (ego_stats.attack_combo_counter == 1 && ego_stats.attack_combo_current == 0) {
      player.Loop = 18;
      ego_stats.attack_combo_current = 1;
    }
    else if (ego_stats.attack_combo_counter == 2 && ego_stats.attack_combo_current == 2) {
      player.Loop = 19;
    }
    else if (ego_stats.attack_combo_counter == 3 && ego_stats.attack_combo_current == 3) {
      player.Loop = 20;
    }
    if (ego_stats.direction == eTengDirRight)  player.Loop += 3;
    
    // push the frames
    framecount = Game.GetFrameCountForLoop(player.View, player.Loop);
    
    if (ego_stats.anicounter_attack > -1) {
      if (ego_stats.anicounter_attack >= player.AnimationSpeed + CurrentFrame.Speed) {
        if (player.Frame != framecount-1) {
          player.Frame ++;
          ego_stats.anicounter_attack = 0;
        }
        else {
          if (ego_stats.attack_combo_counter > ego_stats.attack_combo_current) {
            ego_stats.attack_combo_current++;
            player.Frame = 0;
          }
          // attack is over
          else {
            player.Loop = ego_stats.direction;
            player.Frame = 0;
            ego_stats.attack_combo_counter = 0;
            ego_stats.attack_combo_current = 0;
            ego_stats.anicounter_attack = -1;
          }
        }
        ego_stats.anicounter_attack = 0;
      }
      else ego_stats.anicounter_attack ++;  
    }
    
  }
  
  
  
  // animate on ladder
  else if (ego_stats.OnLadder) {
    player.Loop = 9;
    
    if (ego_stats.climb_speed != 0.0 || ego_stats.x_speed != 0.0 ) {
      framecount = Game.GetFrameCountForLoop(player.View, player.Loop);
        
      if (ego_stats.anicounter >= player.AnimationSpeed + CurrentFrame.Speed){
        if (player.Frame == framecount-1) player.Frame = 0;
        else player.Frame ++;
        ego_stats.anicounter = 0;
      }
      else ego_stats.anicounter ++;    
    }
  }
  //Set Grabbing loop
  else if (ego_stats.HasGrabbed) {
    framecount = Game.GetFrameCountForLoop(player.View, player.Loop);

    if (!ego_stats.que_up_ani) {
      ego_stats.y_speed = 0.0;    
      ego_stats.y_accel = 0.0;    
      ego_stats.x_speed = 0.0;   
      ego_stats.NoControl = false; 
			ego_stats.midair = false;  
      player.y = tile[ego_stats.grab_tile_id].y[1] + tile_offset_y  + INFO.get_char_height(player)+4 ;      
      //player.y = tile[ego_stats.grab_tile_id].y[1] + tile_offset_y + size_tile_y-3;

      if (ego_stats.direction  == eTengDirRight) {  
        player.Loop = 15; 
        player.x = tile[ego_stats.grab_tile_id].x[1] + tile_offset_x - ( INFO.get_char_width(player) /2 );
      }
      else {
        player.Loop = 14;
        player.x = tile[ego_stats.grab_tile_id].x[1] + size_tile_x + tile_offset_x + (INFO.get_char_width(player)/2);
      }
			
			if (ego_stats.anicounter >= player.AnimationSpeed + CurrentFrame.Speed) {
        if (player.Frame < 2) {
          player.Frame ++;
          ego_stats.anicounter = 0;
        }
			}
      else ego_stats.anicounter ++;
			
    }
    // Climb up, if uparrow pressed
    if (ego_stats.que_up_ani) {
      ego_stats.y_speed = 0.0;    
      ego_stats.y_accel = 0.0;    
      ego_stats.x_speed = 0.0; 
      ego_stats.NoControl = true;
        
      if (ego_stats.anicounter >= player.AnimationSpeed + CurrentFrame.Speed) {
        // release view
        if (player.Frame >= framecount-1) {
          ego_stats.grabscroll_x = 0;
          ego_stats.grabscroll_y = 0;
          ego_stats.HasGrabbed = false;
          ego_stats.GrabFound = false;
          ego_stats.GrabPossible = false;
          ego_stats.que_up_ani = false;
          ego_stats.NoControl = false;
          player.Loop = ego_stats.direction;
          player.Frame = 0;
          int index  = TILES.get_tile_at (player.x + (ego_stats.footwidth ), player.y +1, 1, ego_stats.current_tile);
          player.y = tile[index].y[1] + tile_offset_y+1; 
        }
        // climb up animation
        else {
          if (player.Frame < 3)player.Frame = 3;
          player.Frame ++;
          
          if (player.Frame ==4) player.y -= 3;
          else if (player.Frame ==5) player.y -=0; 
          else if (player.Frame ==6) player.y -=3;
          else if (player.Frame ==7) player.y -=3;
          else if (player.Frame ==8) player.y -=3;
          else if (player.Frame ==9) player.y -=6;
          else if (player.Frame ==10) player.y -=6;
          else if (player.Frame ==11) player.y -=6;
          else if (player.Frame ==12) player.y -=16;
          
          if (ego_stats.direction == eTengDirRight) {
            player.x +=1;
            ego_stats.grabscroll_x = 1;
          }
          else {
            player.x -=1;  
            ego_stats.grabscroll_x = -1;
          }
        }
        ego_stats.anicounter = 0;
      }
      else ego_stats.anicounter ++;      
    }
  }
	//Jumping - if player is in midair
  else if (ego_stats.midair && !ego_stats.NoControl) { 
    //upright
    if (ego_stats.direction  == eTengDirRight && ego_stats.y_speed <= 0.0) player.Loop = 5; 
    //downright
    else if  (ego_stats.direction  == eTengDirRight && ego_stats.y_speed > 0.0) player.Loop = 6; 
    //upleft
    else if  (ego_stats.direction  == eTengDirLeft && ego_stats.y_speed <= 0.0) player.Loop = 3; 
    //downleft
    else player.Loop = 4;
    
    framecount = Game.GetFrameCountForLoop(player.View, player.Loop);
    
    
    if (ego_stats.anicounter >= player.AnimationSpeed + CurrentFrame.Speed){
        if (player.Frame == framecount-1) player.Frame = player.Frame;
        else player.Frame ++;
      ego_stats.anicounter = 0;
    }
    else ego_stats.anicounter ++; 
    
  }  
  else if (ego_stats.x_speed == 0.0 && ego_stats.y_speed == 0.0 && ego_stats.midair == false ){ // if stands on ground
    player.Loop = ego_stats.direction;
    player.Frame = 0;
    
  }
  
  else if (ego_stats.x_speed != 0.0 && ego_stats.y_speed == 0.0) // if running on ground
  {
    framecount = Game.GetFrameCountForLoop(player.View, player.Loop);
      
    if (ego_stats.anicounter >= player.AnimationSpeed + CurrentFrame.Speed) {
      if (player.Frame == framecount-1) player.Frame = 1;
      else player.Frame ++;
      ego_stats.anicounter = 0;
    }
    else ego_stats.anicounter ++;
  }

  

  // Handle and compose player shooting sprites
  if (ego_stats.active_weapon!= eWNoWeapon && ego_stats.active_weapon!= eWCloseCombat && !ego_stats.NoControl && !ego_stats.OnLadder && !ego_stats.HasGrabbed && ego_stats.InSlide==0){
    if (player.View != VPLAY_ATTACK) player.ChangeView(VPLAY_ATTACK);
    CurrentFrame = Game.GetViewFrame(player.View, player.Loop, player.Frame);
    EGO.handle_player_sprite();
    CurrentFrame.Graphic = ego_stats.spr.Graphic;    
  }
  else {
    if (player.View != VPLAY_STD) {
      player.ChangeView(VPLAY_STD);
    }
  }
}

//*******************************************************************************
//* animate_player_topdown
//* Animates the player
//*
//*******************************************************************************
static function EGO::animate_player_topdown()
{
  if (player.View != ego_stats.view) player.ChangeView(ego_stats.view);
  ViewFrame *CurrentFrame = Game.GetViewFrame(player.View, player.Loop, player.Frame);

  if (ego_stats.x_speed == 0.0 && ego_stats.y_speed == 0.0 ){ // if stands on ground
    player.Frame = 0;
  }
  else if (ego_stats.x_speed != 0.0 ) // if running on ground
  {
    int framecount = Game.GetFrameCountForLoop(player.View, player.Loop);
      
    if (ego_stats.anicounter >= player.AnimationSpeed + CurrentFrame.Speed) {
      if (player.Frame == framecount-1) player.Frame = 1;
      else player.Frame ++;
      ego_stats.anicounter = 0;
    }
    else ego_stats.anicounter ++;
  }
  //Walk up and down
  else if (ego_stats.y_speed!=0.0)
  {
    if (ego_stats.y_speed > 0.0) player.Loop=3;
    else player.Loop=0;
    
    int framecount = Game.GetFrameCountForLoop(player.View, player.Loop);
      
    if (ego_stats.anicounter >= player.AnimationSpeed + CurrentFrame.Speed){
      if (player.Frame == framecount-1) player.Frame = 0;
      else player.Frame ++;
      ego_stats.anicounter = 0;
    }
    else ego_stats.anicounter ++;    
    
  }
  
}