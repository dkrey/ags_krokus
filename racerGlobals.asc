// new module script
cColors colors[RACR_MAX_COLOR_TYPES];
cSpritePlayer player_sprites;

cRacerVars rv;
cRoad road;

bool is_game_paused = true;
bool is_racer_engine_running = false;

void cRacerVars::init() 
{
  //*******************************************************************************
  //* Road Setup
  //* 
  //*******************************************************************************
  road.curve_none = 0;
  road.curve_easy = 2;
  road.curve_medium = 4;
  road.curve_hard = 6;
  road.length_none = 0;
  road.length_short = 25;
  road.length_medium = 50;
  road.length_long = 100;
  road.hill_none = 0;
  road.hill_low = 20;
  road.hill_medium = 40;
  road.hill_high = 60;

  //*******************************************************************************
  //* Colors
  //* 
  //*******************************************************************************
  colors[eColorDark].grass  = Game.GetColorFromRGB(63, 63, 116);
  colors[eColorDark].lane   = Game.GetColorFromRGB(99, 155, 255);
  colors[eColorDark].rumble = Game.GetColorFromRGB(48, 96, 140);
  colors[eColorDark].road   = Game.GetColorFromRGB(91, 110, 225);


  colors[eColorLight].grass  =Game.GetColorFromRGB(48, 96, 140);
  colors[eColorLight].lane   =Game.GetColorFromRGB(95, 205, 228);
  colors[eColorLight].rumble = Game.GetColorFromRGB(63, 63, 116);
  colors[eColorLight].road   = Game.GetColorFromRGB(48, 96, 140);

  colors[eColorAllWhite].grass  = Game.GetColorFromRGB(170, 170,170);
  colors[eColorAllWhite].lane   = Game.GetColorFromRGB(170, 170,170);
  colors[eColorAllWhite].rumble = Game.GetColorFromRGB(170, 170,170);
  colors[eColorAllWhite].road   = Game.GetColorFromRGB(170, 170,170);  

  colors[eColorAllBlack].grass  = Game.GetColorFromRGB(0, 0, 0);
  colors[eColorAllBlack].lane   = Game.GetColorFromRGB(0, 0, 0);
  colors[eColorAllBlack].rumble = Game.GetColorFromRGB(0, 0, 0);
  colors[eColorAllBlack].road   = Game.GetColorFromRGB(0, 0, 0);
  
  colors[eColorAllBlack].grass  = Game.GetColorFromRGB(0, 0, 0);
  colors[eColorAllBlack].lane   = Game.GetColorFromRGB(0, 0, 0);
  colors[eColorAllBlack].rumble = Game.GetColorFromRGB(0, 0, 0);
  colors[eColorAllBlack].road   = Game.GetColorFromRGB(0, 0, 0); 
  
  colors[eColorAllDarkBlue].grass  = Game.GetColorFromRGB(63, 63, 116);
  colors[eColorAllDarkBlue].lane   = Game.GetColorFromRGB(63, 63, 116);
  colors[eColorAllDarkBlue].rumble = Game.GetColorFromRGB(63, 63, 116);
  colors[eColorAllDarkBlue].road   = Game.GetColorFromRGB(63, 63, 116);
  

  //*******************************************************************************
  //* player sprites
  //* 
  //******************************************************************************* 
  player_sprites.frame_delay = 0;
  player_sprites.frame_cnt   = 0;
  player_sprites.current_sprite = 91;
  player_sprites.dither = 377;
  player_sprites.loop  = 0;
  player_sprites.frame = 0;
  player_sprites.view  = 26;
  player_sprites.invincible_cnt = 0;
  player_sprites.invincible_timer = 0;
  player_sprites.flash_timer = 0;
  player_sprites.s_invincible = false;
  player_sprites.overlay = null;

  //*******************************************************************************
  //*Basic Setup
  //* 
  //*******************************************************************************
  this.lifes         = 3;                         // how many impacts on objects allowed
  this.fps           = 60;                        // how many 'update' frames per second
  this.step          = 1.0/IntToFloat(this.fps);    // how long is each frame (in seconds)
  this.width         = Screen.Width;        // logical canvas width
  this.height        = Screen.Height;       // logical canvas height
  this.ds            = DynamicSprite.Create(this.width, this.height, false);
  this.sprite_scale = 0.2 * (1.0/IntToFloat(Game.SpriteWidth[player_sprites.current_sprite]));
  
  //*******************************************************************************
  //* road setup 
  //* 
  //*******************************************************************************  
  this.resolution    = this.height / this.width;    // scaling factor to provide resolution independence (computed)
  this.roadWidth     = 300;                     // actually half the roads width, easier math if the road spans from -roadWidth to +roadWidth
  this.segment_cnt   = 0;
  this.segmentLength = 200;                     // length of a single segment
  this.rumbleLength  = 2;                       // number of segments per red/white rumble strip
  this.trackLength   = 0;                       // z length of entire track (computed)
  this.lanes         = 1;                       // number of lanes


  //*******************************************************************************
  //* camera
  //* 
  //*******************************************************************************   
  this.cameraHeight  = 150; //150 is good        // z height of camera
  this.cameraDepth   = 0.0;                      // z distance camera is from screen (computed)
  this.drawDistance  = 260;// 200 is good       // number of segments to draw 
  this.fieldOfView   = 100;                      // angle (degrees) for field of view
  this.cameraDepth   = 1.0 / Maths.Tan(Maths.DegreesToRadians((IntToFloat(this.fieldOfView)/2.0) *Maths.Pi/180.0));  


  //*******************************************************************************
  //* Movement
  //* 
  //*******************************************************************************
  this.position      = 1;                     // current camera Z position (add playerZ to get player's absolute Z position)
  this.pos_delta     = 0.0;
  this.pos_remain    = 0.0;
  this.speed         = 0.0;                     // current speed
  this.maxSpeed      =  IntToFloat(this.segmentLength)/this.step;      // top speed (ensure we can't move more than 1 segment in a single frame to make collision detection easier)
  this.minSpeed      =  this.maxSpeed/4.0;
  this.accel         =  this.maxSpeed/7.0;  // acceleration rate - tuned until it 'felt' right
  
  this.breaking      = -this.maxSpeed;      // deceleration rate when braking
  this.decel         = -this.maxSpeed/5.0;  // 'natural' deceleration rate when neither accelerating, nor braking
  this.offRoadDecel  = -this.maxSpeed/2.0;  // off road deceleration is somewhere in between
  this.offRoadLimit  =  this.maxSpeed/4.0;  // limit when off road deceleration no longer applies (e.g. you can always go at least this speed even when off road)  

  //*******************************************************************************
  //* Position
  //* 
  //*******************************************************************************
  this.playerX       = 0.0;                       // player x offset from center of road (-1 to 1 to stay independent of roadWidth)
  this.playerY       = 0.0;
  this.playerZ       = this.cameraHeight * FloatToInt(this.cameraDepth);
  this.playerW       = IntToFloat(Game.SpriteWidth[player_sprites.current_sprite]) * this.sprite_scale;
  this.playerSegment = 0; // computed player segment
  //*******************************************************************************
  //* Various
  //* 
  //*******************************************************************************
  this.fogDensity   = 1.3;                       // exponential fog density, set to 0.0 to disable fog
  this.centrifugal  = 0.3;
  
  this.laps_max = 3;
  this.laps_cnt = 0;  
  
  this.destW = 0;
  this.destX= 0;
  
}

function game_start()
{
  //Game.NormalFont=eFontTiny;
  rv.init();
  //SetGameSpeed(rv.fps);
  //SetGameSpeed(200);
}

export is_game_paused;
export is_racer_engine_running;
export rv;
export colors;
export road;
export player_sprites;