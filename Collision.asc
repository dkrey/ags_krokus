
import int size_tile_x, size_tile_y;
import int tile_offset_x, tile_offset_y;
import cpeople people[MAX_PEOPLE];
import short people_index;
import ctile tile[NUM_MAX_TILES];
import cplatforms platform[MAX_PLATFORMS];
import citems item[MAX_ITEMS];
import short itm_index;
import cWeapons weapon[eWLastWeapon];
import int num_tiles_x, num_tiles_y;

int total(int number) 
{
  if ( number > 0)  return number;
  else              return number*(-1);
}

//*******************************************************************************
//* get_ramp_ypos
//* returns the char's ypos on a ramp
//*
//*******************************************************************************
static int COLL::get_ramp_ypos (int index, Character *ch)
{
  int l = 0;
  int x1 = 0;
  int y1 = 0;
  int x2 = size_tile_x;
  int y2 = size_tile_y;
  int foot=0;
  int footwidth=0;
  int ramp_y = 0;
    
  if (ch.ID == player.ID) footwidth = ego_stats.footwidth;
  else footwidth = 3;
  
  if ((tile[index].x[l] + tile_offset_x - ch.x <= 0) ) 
  {
    if ( tile[index].mirrored_x[l] == true)
      foot = total (tile[index].x[l] + tile_offset_x - ch.x) - (footwidth );
    else 
      foot = total (tile[index].x[l] + tile_offset_x - ch.x) + (footwidth ); 

    ramp_y = ((foot - x1)*(y2 - y1))/(x2 - x1) + y1;
    
    if ( tile[index].mirrored_x[l] == true) ramp_y = size_tile_y - ramp_y;
    if (ramp_y > size_tile_y) ramp_y = size_tile_y ;

    return ramp_y;
  } 
  // special at tile beginning
  else 
  { 
    if (tile[index].mirrored_x[l] == true) return y2; 
    else return y1;
  }
}



//*******************************************************************************
//* check_char_coll
//* Checks if an "object" collides with a character
//*
//*******************************************************************************
static function COLL::check_char_coll(int obj1_x,int obj1_y, int obj1_width, int obj1_height, Character* ch, bool pperfect)
{  
  int coll = 1;
  bool proper_coll;
  
  int obj2_width =  INFO.get_char_width(ch);
  int obj2_height = INFO.get_char_height(ch);
  int obj2_x = ch.x - obj2_width/2;
  int obj2_y = ch.y - obj2_height;
  
  if((obj1_y + obj1_height) < obj2_y) coll= 0;		// no collision
  if(obj1_y > (obj2_y + obj2_height)) coll= 0;
  
  if((obj1_x + obj1_width) < obj2_x) coll= 0;
  if(obj1_x > (obj2_x + obj2_width)) coll= 0;
   
   if (coll ==1 && pperfect && ch != null) {
     proper_coll = ch.PPCollidesWithXY(obj1_x, obj1_y, obj1_width, obj1_height);
     if (proper_coll) return 1;
     else return 0 ;
   }
   else if (coll ==1 && !pperfect) return 1;
   else return 0;	// no collision
}


//*******************************************************************************
//* check_walls_topdown
//* stop character falling through walls at speed
//*
//*******************************************************************************
static int COLL::check_walls_topdown(Character *ch, int vspeed, int hspeed, int ppl_id){
  int counter = 0;
  int cnt_to  = 0;
  int index   = 0;
  int index2  = 0;

  int index_pf1 = 0;
  int index_pf2  = 0;
  int index_itm1 = 0;
  int index_itm2 = 0;
  
  int current_tile = 0;
  
  int l = 0;
  bool Found  = false;
  bool facing_right =false;
  int footwidth;
  int ramp_modifier, temp_ramp;
  ego_stats.GrabFound = false;
  int dist_check;
  int dist_check_y;
  
  
  if (ch.ID == player.ID ) {
    if (ego_stats.direction == eTengDirRight) facing_right = true;
    footwidth = ego_stats.footwidth;
    current_tile = ego_stats.current_tile;
    dist_check = ego_stats.dist_check;
    dist_check_y = ego_stats.dist_check_y;
  } 
  else {
    if (people[ppl_id].direction == eTengDirRight )facing_right = true;
    footwidth = INFO.get_char_width(ch) / 2;
    current_tile = people[ppl_id].current_tile;
    dist_check = people[ppl_id].dist_check;
  }
    
  // vertical movement on landing
  if (total(vspeed) > 0 ) 
  {
    int charheight = INFO.get_char_height(player);
   
    // full check
    if (dist_check_y == -1 ) {
     counter = 2;
     cnt_to = total(vspeed/2);
    }
    // nothing found, long distance check only,  
    else if (dist_check_y == 0) {
      counter = 2;//total(vspeed);
      cnt_to = total(vspeed/2);   
    }
    // check to found position
    else {
     counter = 2;
     cnt_to = dist_check_y; 
    }   
    
    while ( counter <= cnt_to) 
    {     
      if (vspeed > 0) {
        index  = TILES.get_tile_at (ch.x + (footwidth),  ch.y - (footwidth *2)+ counter, 1, current_tile);
        index2 = TILES.get_tile_at (ch.x - (footwidth ), ch.y - (footwidth *2)+ counter, 1, current_tile);
        index_pf1  = PFORM.check_platform_at (ch.x + (footwidth ), ch.y + counter, true);
        index_pf2  = PFORM.check_platform_at (ch.x - (footwidth ), ch.y + counter,  true);
        index_itm1 = ITM.get_item_at (ch.x + (footwidth ), ch.y + counter);
        index_itm2 = ITM.get_item_at (ch.x - (footwidth ), ch.y + counter);        
      }
      else {
        index  = TILES.get_tile_at (ch.x - (footwidth ), ch.y - footwidth - counter, 1, current_tile);
        index2 = TILES.get_tile_at (ch.x + (footwidth ), ch.y - footwidth - counter, 1, current_tile);
        index_pf1  = PFORM.check_platform_at (ch.x - (footwidth ), ch.y + counter, true);
        index_pf2  = PFORM.check_platform_at (ch.x + (footwidth ), ch.y + counter, true); 
        index_itm1 = ITM.get_item_at (ch.x + (footwidth ), ch.y + counter);
        index_itm2 = ITM.get_item_at (ch.x - (footwidth ), ch.y + counter);         
      }
      
      if (tile[index].is_solid[l] || tile[index2].is_solid[l]) 
      {
        // update distance check
        if (ch.ID == player.ID) ego_stats.dist_check_y = counter;   
        Found = true;
        if (counter <= YACCEL) return 0;
        else if (counter <= charheight) {
          if (vspeed > 0) return counter;
          else return (counter * (-1));
        }
        else return vspeed;        
   
      }
      else if (index_pf1 > -1) {
        
        if (player.y < platform[index_pf1].y   + ego_stats.footwidth ){
          Found = true;
          ego_stats.platform_id =index_pf1;
          ego_stats.OnPlatform = true;
          return counter;        
        }
      }
      else if (index_pf2 > -1) {
        
        if (player.y < platform[index_pf2].y  + ego_stats.footwidth ){
          Found = true;
          ego_stats.platform_id =index_pf2;
          ego_stats.OnPlatform = true;          
          return counter;        
        }
      }      
      else if (index_itm1 > -1 && item[index_itm1].is_solid) {
        
        if (player.y < item[index_itm1].y   + ego_stats.footwidth ){
          Found = true;
          return counter;        
        }
      }
      else if (index_itm2 > -1 && item[index_itm2].is_solid) {
        
        if (player.y < item[index_itm2].y  + ego_stats.footwidth ){
          Found = true;
          return counter;        
        }
      }
      counter ++;
    }
  }
  
  // horizontal
  else if (total(hspeed) > 0) {  
   
    // full check
    if (dist_check == -1 ) {
     counter = 2;
     cnt_to = total(hspeed/2);
    }
    
    // nothing found, long distance check only,  
    else if (dist_check == 0) {
      counter = 2;//total(hspeed);
      cnt_to = total(hspeed/2);   
    }
    // check to found position
    else {
     counter = 2;
     cnt_to = dist_check; 
    }
    
    while ( counter <= cnt_to)  { 
      if (facing_right) {
        // In front of player, head height
        // in front of player, foot height
        index2 = TILES.get_tile_at (ch.x + footwidth+ counter, ch.y - 3 , 1, current_tile);
        index = index2;
        // platform
        index_pf1  = PFORM.check_platform_at (ch.x + counter,  ch.y - INFO.get_char_height(ch),  true);
        // items
        index_itm1 = ITM.get_item_at (ch.x + counter, ch.y - INFO.get_char_height(ch)); 
        index_itm2 = ITM.get_item_at (ch.x + counter, ch.y - 3 );

      }
      else {
        index2 = TILES.get_tile_at (ch.x - footwidth-counter, ch.y - 3 , 1, current_tile);
        index = index2;
        index_pf1  = PFORM.check_platform_at (ch.x + counter, ch.y - INFO.get_char_height(ch), true);
        index_itm1 = ITM.get_item_at (ch.x - counter, ch.y - INFO.get_char_height(ch) ); 
        index_itm2 = ITM.get_item_at (ch.x - counter, ch.y - 3 );      
      }
      
      
      if (tile[index].is_solid[l] || tile[index2].is_solid[l] ) 
      {
        // update distance check
        if (ch.ID == player.ID) ego_stats.dist_check = counter;
        else people[ppl_id].dist_check = counter;        
        if (!tile[index].is_platform[l] && !tile[index2].is_platform[l]) {
          Found = true;
          if (counter <= XACCEL) return 0;
          else if (counter <= INFO.get_char_width(ch)) {
            if (hspeed > 0) return counter;
            else return (counter * (-1));
          }
          else return hspeed;

        }
      }
      else if ((index_itm1 > 0 && item[index_itm1].is_solid) || (index_itm2 > 0 && item[index_itm2].is_solid)) {
        Found = true;
        if (ch.ID == player.ID) ego_stats.dist_check = counter;
        else people[ppl_id].dist_check = counter;     
        if (counter <= XACCEL) return 0;
        else if (counter <= INFO.get_char_width(ch)) {
          if (hspeed > 0) return counter;
          else return (counter * (-1));
        }
        else return hspeed;        
      }
      counter ++;
    }
    
  
  }
 
  if (!Found){
    if (hspeed != 0) {
      if (ch.ID == player.ID) ego_stats.dist_check = 0;
      else people[ppl_id].dist_check = 0;      
      return hspeed;
    }
    if (vspeed != 0) {
      if (ch.ID == player.ID) ego_stats.dist_check_y = 0;
      return vspeed;
    }
    if (hspeed == 0 && vspeed == 0) return 0;
  }
  else return 0;
}

//*******************************************************************************
//* check_walls
//* stop character falling through walls at speed
//*
//*******************************************************************************
static float COLL::check_walls(Character *ch, float vspeed, float hspeed, int ppl_id){
  int counter = 0;
  int cnt_to  = 0;
  int index   = 0;
  int index2  = 0;

  int index_pf1 = 0;
  int index_pf2  = 0;
  int index_itm1 = 0;
  int index_itm2 = 0;
  
  int current_tile = 0;
  
  int l = 0;
  bool Found  = false;
  bool facing_right =false;
  int footwidth;
  int ramp_modifier, temp_ramp;
  
  int dist_check;
  int dist_check_y;
  
  int h_speed_cnt = FloatToInt(hspeed * 10.0);
  int v_speed_cnt = FloatToInt(vspeed * 10.0);
  
  if (ch.ID == player.ID ) {
    if (ego_stats.x_speed > 0.0) facing_right = true;
    footwidth = ego_stats.footwidth;
    ego_stats.GrabFound = false;
    current_tile = ego_stats.current_tile;
    dist_check = ego_stats.dist_check;
    dist_check_y = ego_stats.dist_check_y;
  } 
  else 
  {
    if (people[ppl_id].xspeed > 0.0 )facing_right = true;
    
    footwidth = 4;
    current_tile = people[ppl_id].current_tile;
    dist_check = people[ppl_id].dist_check;
  }
  
  
  // vertical movement on landing
  if (v_speed_cnt > 0 ) 
  {
  
    // full check
    if (dist_check_y <= 0 ) cnt_to = total(v_speed_cnt);
    // check to found position
    else cnt_to = dist_check_y;  
    
    while ( counter < cnt_to) 
    {     
      if (facing_right) {
        index  = TILES.get_tile_at (ch.x + (footwidth ), ch.y + counter);
        index2 = TILES.get_tile_at (ch.x - (footwidth ), ch.y + counter);
        index_pf1  = PFORM.check_platform_at (ch.x + (footwidth ), ch.y + counter, true);
        index_pf2  = PFORM.check_platform_at (ch.x - (footwidth ), ch.y + counter,  true);
        index_itm1 = ITM.get_item_at (ch.x + (footwidth ), ch.y + counter);
        index_itm2 = ITM.get_item_at (ch.x - (footwidth ), ch.y + counter);        
      }
      else {
        index = TILES.get_tile_at (ch.x - (footwidth ), ch.y + counter);
        index2 = TILES.get_tile_at (ch.x + (footwidth ), ch.y + counter);
        index_pf1  = PFORM.check_platform_at (ch.x - (footwidth ), ch.y + counter, true);
        index_pf2  = PFORM.check_platform_at (ch.x + (footwidth ), ch.y + counter, true); 
        index_itm1 = ITM.get_item_at (ch.x + (footwidth ), ch.y + counter);
        index_itm2 = ITM.get_item_at (ch.x - (footwidth ), ch.y + counter);         
      }
      
      if (tile[index].is_solid[l] || tile[index2].is_solid[l]) 
      {
        if (tile[index].is_ramp[l]) 
        {
          ramp_modifier = COLL.get_ramp_ypos(index, ch);
          temp_ramp = tile[index].y[l] + tile_offset_y +size_tile_y - ramp_modifier +2;
          if ((ch.y - footwidth + counter <= temp_ramp)) {
            if (ch.ID == player.ID) ego_stats.dist_check_y = counter;
            Found = true;
            if (total(temp_ramp - ch.y - footwidth) > FloatToInt(MAX_FALLING_SPEED)) return (MAX_FALLING_SPEED);
            else return (IntToFloat(total(temp_ramp - ch.y - footwidth)+1)/10.0);
          }
        }
        
        else if ( (tile[index2].is_ramp[l] && ( tile[index].is_solid[l] || tile[index].is_ramp_support[l] ) ) || !tile[index2].is_ramp[l] )
        {
          if (ch.y < tile[index].y[l] + tile_offset_y  + footwidth ) 
          {
            if (ch.ID == player.ID)  ego_stats.dist_check_y = counter;
            return MAX_FALLING_SPEED;
          }
        }

      }
      else if (index_pf1 > -1) {
        
        if (player.y < platform[index_pf1].y   + footwidth){
          Found = true;
          if (ch.ID == player.ID) ego_stats.dist_check_y = counter;
          ego_stats.platform_id =index_pf1;
          ego_stats.OnPlatform = true;
          return (IntToFloat(counter)/4.0);       
        }
      }
      else if (index_pf2 > -1) {
        
        if (player.y < platform[index_pf2].y  + footwidth ){
          Found = true;
          if (ch.ID == player.ID) ego_stats.dist_check_y = counter;
          ego_stats.platform_id =index_pf2;
          ego_stats.OnPlatform = true;          
          return (IntToFloat(counter)/4.0);       
        }
      }      
      else if (index_itm1 > -1 && item[index_itm1].is_solid) {
        
        if (ch.y < item[index_itm1].y   + footwidth ){
          Found = true;
          if (ch.ID == player.ID) ego_stats.dist_check_y = counter;
          return (IntToFloat(counter)/4.0);      
        }
      }
      else if (index_itm2 > -1 && item[index_itm2].is_solid) {
        
        if (ch.y < item[index_itm2].y  + footwidth ){
          Found = true;
          if (ch.ID == player.ID) ego_stats.dist_check_y = counter;
          return (IntToFloat(counter)/4.0);        
        }
      }
      counter ++;
    }
  }
  
  // horizontal
  else if (total(h_speed_cnt) > 0) {  
   
    // full check
    
    if (dist_check == -1 ) {
     counter = 2;
     cnt_to = total(h_speed_cnt);
    }
    // nothing found, long distance check only,  
    else if (dist_check == 0) {
      if (ego_stats.midair) counter =2;
      else  counter = total(h_speed_cnt);
      cnt_to = total(h_speed_cnt);   
    }
    // check to found position
    else {
     counter = 2;
     cnt_to = dist_check; 
    }

    while ( counter <= cnt_to)  { 
      if (facing_right) {
        // In front of player, head height
        index  = TILES.get_tile_at (ch.x + counter, ch.y - INFO.get_char_height(ch));
        // in front of player, foot height
        index2 = TILES.get_tile_at (ch.x + counter, ch.y - 3);
        // platform
        index_pf1  = PFORM.check_platform_at (ch.x + counter,  ch.y - INFO.get_char_height(ch),  true);
        // items
        index_itm1 = ITM.get_item_at (ch.x + counter, ch.y - INFO.get_char_height(ch) ); 
        index_itm2 = ITM.get_item_at (ch.x + counter, ch.y - 3 );
        
        //Only grab on tiles if hands are on top of it
        int grab_check = (player.y - INFO.get_char_height(ch)+ego_stats.footwidth) - (tile[index].y[l]+tile_offset_y);

        // If a ledge grab is possible, 
        // index wise and the distance is not too far
        if (counter <= INFO.get_char_width(ch) &&  index >= num_tiles_x && index > 0 && ego_stats.midair && !ego_stats.Jumped && ego_stats.yspeed >-1 ) {
          
          // ignore ramps, platforms and so on
          if (!tile[index].is_ramp[l] && !tile[index].is_ramp_support[l] && !tile[index].is_platform[l] && index_pf1 == -1 ){       
            
            // player still in front of tile, 
            // feet tile transparent, 
            // Head tile transparent
            if (player.x + ego_stats.footwidth < tile[index].x[l]+tile_offset_x && !tile[index2-1].is_solid[l] && !tile[index-1].is_solid[l]) {
              
              // in front of tiles: Head tile is the one to grab on, 
              // tile above head tile transparent, head tile solid
              if (grab_check < 10 && tile[index].is_solid[l] && !tile[index-num_tiles_x].is_solid[l]) { //!tile[index + num_tiles_x].is_solid[l] && 
                ego_stats.GrabFound = true;
                ego_stats.grab_tile_id = index;
              }
            }
          }
        }

      }
      else {
        index  = TILES.get_tile_at (ch.x - counter, ch.y - INFO.get_char_height(ch));
        index2 = TILES.get_tile_at (ch.x - counter, ch.y - 3);
        index_pf1  = PFORM.check_platform_at (ch.x - counter, ch.y - INFO.get_char_height(ch), true);
        index_itm1 = ITM.get_item_at (ch.x - counter, ch.y - INFO.get_char_height(ch) ); 
        index_itm2 = ITM.get_item_at (ch.x - counter, ch.y - 3 );    
        int grab_check = (player.y - INFO.get_char_height(ch)+ego_stats.footwidth) - (tile[index].y[l]+tile_offset_y);

               
        // If a ledge grab is possible, index wise and the distance is not too far
        if (ch.ID == player.ID && counter <= INFO.get_char_width(ch) && index >= num_tiles_x && index > 0 && ego_stats.midair && !ego_stats.Jumped && ego_stats.yspeed >-1 ) {        
          // ignore ramps, platforms and so on
          if (!tile[index].is_ramp[l] && !tile[index].is_ramp_support[l] && !tile[index].is_platform[l] && index_pf1 == -1 ){    
            // player still in front of tile, feet tile transparent, Head tile transparent
            if (grab_check < 10 && player.x - ego_stats.footwidth >= tile[index].x[l]+ size_tile_x +tile_offset_x && !tile[index2+1].is_solid[l] && !tile[index+1].is_solid[l]) {
              // in front of tiles: Head tiles is the one to grab on, tile above head tile transparent, head tile solid
              if (tile[index].is_solid[l] && !tile[index-num_tiles_x].is_solid[l]) {
                ego_stats.GrabFound = true;
                ego_stats.grab_tile_id = index;
              }
            }
          }
        }   
      }
      
      
      if ( (tile[index].is_solid[l] && !tile[index].is_ramp[l]) || (tile[index2].is_solid[l] && !tile[index2].is_ramp[l]) ) 
      {
        // update distance check
        if (ch.ID == player.ID) ego_stats.dist_check = counter;
        else people[ppl_id].dist_check = counter;        
        if (!tile[index].is_platform[l] && !tile[index2].is_platform[l]) {
          Found = true;
          if (counter <= 8) return 0.0;
          else if (counter <= INFO.get_char_width(ch)) {
            if (h_speed_cnt > 0) return (IntToFloat(counter)/10.0);
            else return (IntToFloat(counter)/10.0 * (-1.0));
          }
          else return hspeed;

        }
      }
      else if ((index_itm1 > 0 && item[index_itm1].is_solid) || (index_itm2 > 0 && item[index_itm2].is_solid)) {
        Found = true;
        if (ch.ID == player.ID) ego_stats.dist_check = counter;
        else people[ppl_id].dist_check = counter;     
        if (counter <= 8) return 0.0;
        else if (counter <= INFO.get_char_width(ch)) {
          if (h_speed_cnt > 0) return (IntToFloat(counter)/10.0);
          else return (IntToFloat(counter)/10.0* (-1.0));
        }
        else return hspeed;        
      }
      counter ++;
    }
  
  }
   
  if (!Found) {
    if (hspeed != 0.0) {
      if (ch.ID == player.ID) ego_stats.dist_check = 0;
      else people[ppl_id].dist_check = 0;      
      return hspeed;
    }
    if (vspeed != 0.0) {
      if (ch.ID == player.ID) ego_stats.dist_check_y = 0;
      return vspeed;
    }
    if (hspeed == 0.0 && vspeed == 0.0) return 0.0;
  }
  else return 0.0;
}


//*******************************************************************************
//* check_slide
//* stop character falling through walls while sliding
//*
//*******************************************************************************
static float COLL::check_slide(Character *ch, float hspeed, int ppl_id) {
  int counter = 0;
  int cnt_to  = 0;
  int index   = 0;
  int index_top = 0;
  int index_itm;
  int dist_check = 0; 
  
  int current_tile;

  int l = 0;
  bool Found  = false;
  bool facing_right =false;
  int footwidth;
  int ramp_modifier, temp_ramp;
  
  int h_speed_cnt = FloatToInt(hspeed * 10.0);
  
  if (ch.ID == player.ID) {
    if (ego_stats.x_speed > 0.0) facing_right = true;
    footwidth = INFO.get_char_width(ch) / 2;
    current_tile = ego_stats.current_tile;
    dist_check = ego_stats.dist_check;    
  } 
  else {
    if (people[ppl_id].xspeed > 0.0 )facing_right = true;
    footwidth = INFO.get_char_width(ch) / 2;
    current_tile = people[ppl_id].current_tile;
    dist_check = people[ppl_id].dist_check;
  }  
  
  // full check
  if (dist_check == -1 ) {
   counter = 2;
   cnt_to = total(h_speed_cnt);
  }
  // nothing found, long distance check only,  
  else if (dist_check == 0) {
    counter = total(h_speed_cnt);
    cnt_to = total(h_speed_cnt);   
  }
  // check to found position
  else {
   counter = 2;
   cnt_to = dist_check; 
  }
  
  while ( counter <= cnt_to) { 
    if (facing_right) { 
      index = TILES.get_tile_at (ch.x + counter, ch.y - 3);
      index_itm =  ITM.get_item_at (ch.x + counter, ch.y - 3); 
         
    }
    else {
      index = TILES.get_tile_at (ch.x - counter, ch.y - 3);
      index_itm = ITM.get_item_at (ch.x - counter, ch.y - 3 );  
    }
    
    if (tile[index].is_solid[l] && !tile[index].is_ramp[l] &&!tile[index].is_fg_ramp[l]&& !tile[index].is_ramp_support[l] && !tile[index].is_platform[l]) {
      Found = true;
      if (ch.ID == player.ID) ego_stats.dist_check = counter;
      else people[ppl_id].dist_check = counter;  
      
      if (counter <= FloatToInt(X_ACCEL*10.0)) return 0.0;      
      else if (counter <= INFO.get_char_width(ch)) {
        ego_stats.SlideStop = true;
        if (hspeed > 0.0) return (IntToFloat(counter)/10.0);
        else return ((IntToFloat(counter)/10.0) * (-1.0));
      }       
      else return hspeed;
    }
    else if (index_itm > 0 && item[index_itm].is_solid) {
      Found = true;
      if (ch.ID == player.ID) ego_stats.dist_check = counter;
      else people[ppl_id].dist_check = counter;        
      
      if (counter <= FloatToInt(X_ACCEL*10.0)) return 0.0;
      else if (counter <= INFO.get_char_width(ch)) {
        ego_stats.SlideStop = true;
        if (hspeed > 0.0) return (IntToFloat(counter)/10.0);
        else return ((IntToFloat(counter)/10.0) * (-1.0));
      }       
      else return hspeed;    
    }
    counter ++;
  }  
  
  if (!Found) {
    if (hspeed != 0.0) {
      if (ch.ID == player.ID) ego_stats.dist_check = 0;
      else people[ppl_id].dist_check = 0;      
      return hspeed;
    }
  }
  else return 0.0;	
}

//*******************************************************************************
//* check_player_coll
//* Checks player collision with items and people
//*
//*******************************************************************************
static bool COLL::check_player_coll() {
  int i;
  int width;
  int height;
  int ppl_dir_width;
  //items
	while ( i < itm_index )
	{
		if ( item[i].active && ! item[i].hidden )
		{
      if (item[i].vf == null) {
        width  = Game.SpriteWidth[item[i].obj_sprite];
        height = Game.SpriteHeight[item[i].obj_sprite];
      }
      else {
        width  = Game.SpriteWidth[item[i].vf.Graphic];
        height = Game.SpriteHeight[item[i].vf.Graphic];
      }
      //check item collision
      if (player.PPCollidesWithXY(item[i].x, item[i].y, width, height))
      {
        if (item[i].sound != null) item[i].sound.Play();
        ITM.process_item (item[i].type, i);     
      }
		}
		i++;
	}
  i = 0;

  // chars
  while (i< people_index) {
    int damage;
    if (people[i].onscreen && people[i].health > 0) {
      // NPCs
      if (people[i].is_interactable && (player.IsCollidingWithChar(character[people[i].char_id])) ) {
          //if (player.PPCollidesWithC( character[people[i].char_id] )) {
            ego_stats.current_action = eTAct_InteractChar;
            ego_stats.current_act_id = people[i].id; 
            return true;
          //}
      }
      // Hostile Enemies
      
      else if (people[i].touch_damage > 0 && player.PPCollidesWithC( character[people[i].char_id] ))  {
        
        // Headjump or slide
        if (!ego_stats.NoControl && ((people[i].is_jumpable && player.y < character[people[i].char_id].y && ego_stats.y_speed > 0.0) || ego_stats.InSlide != 0 ))
        {
          //slide doesn't kill, but headjump does
          if (ego_stats.InSlide == 0) {
            PART.show_damage(IntToFloat(character[people[i].char_id].x) ,IntToFloat(character[people[i].char_id].y-INFO.get_char_height(character[people[i].char_id])), people[i].health); 
            people[i].health = 0; 
            ego_stats.y_speed = -3.5; 
            
          }
          if (ego_stats.InSlide == 0) {      
            Particle.spawn(IntToFloat(player.x + 4), IntToFloat(player.y), 0.3, 0.0, ParticleType_Smoke);
            Particle.spawn(IntToFloat(player.x - 4), IntToFloat(player.y), 0.3, 0.0, ParticleType_Smoke);
          }
        }
        // Closecombat attack
        else if (ego_stats.active_weapon==eWCloseCombat && ego_stats.anicounter_attack >-1 && people[i].hit_timer ==-1 ) {
          
          //damage = Random (weapon[ego_stats.active_weapon].damage-ego_stats.skill)+ego_stats.skill;
          damage = RPGLevel.calc_attack(ego_stats.rpg_vigor, weapon[ego_stats.active_weapon].damage, people[i].armor);
          people[i].health -= damage;
          people[i].healthbar_timer = 30;
          people[i].hit_timer = 20;
          
          PART.show_damage(IntToFloat(character[people[i].char_id].x) ,IntToFloat(character[people[i].char_id].y-INFO.get_char_height(character[people[i].char_id])), damage);
          PART.show_hit(IntToFloat(people[i].x), IntToFloat(people[i].y - INFO.get_char_height(character[people[i].char_id])), eHitPart_Enemy );


        }
        // player gets hurt by touching
        else if (!ego_stats.s_invincible && people[i].hit_timer == -1) {
          
          //damage = Random (people[i].touch_damage /2) + people[i].touch_damage/2;
          damage = RPGLevel.calc_attack(people[i].touch_damage/2, people[i].touch_damage, ego_stats.rpg_armor);
          PART.show_damage(IntToFloat(player.x) ,IntToFloat(player.y-INFO.get_char_height(player)), damage, true);
          ego_stats.invincible_timer = 80;
          ego_stats.invincible_cnt = 0;
          ego_stats.s_invincible = true;
          
          ego_stats.health -= damage;
          ego_stats.NoControl = true;
          
          player.Frame = 0;
          ego_stats.x_accel = 0.0;
          
          if (ego_stats.health >0) {
            
            if (player.y > character[people[i].char_id].y) ego_stats.y_speed = 3.0;
            if (player.y <= character[people[i].char_id].y) {
              ego_stats.y_speed = COLL.check_walls(player, ego_stats.y_speed, 0.0);
              ego_stats.midair = true;
            }
            
            
            if (people[i].direction== eTengDirLeft) ppl_dir_width = INFO.get_char_width(character[people[i].char_id])/2 * (-1);
            else ppl_dir_width = INFO.get_char_width(character[people[i].char_id])/2;
            
            if (ego_stats.direction == eTengDirRight) {
              if (player.x + INFO.get_char_width(player)/2 > character[people[i].char_id].x + ppl_dir_width) {
                ego_stats.direction = eTengDirRight;
                player.Loop = 11;
                ego_stats.x_speed = COLL.check_walls(player, 0.0, ego_stats.x_speed*2.0);
              }
              else  {
                ego_stats.direction = eTengDirLeft;
                player.Loop = 10;          
                ego_stats.x_speed = COLL.check_walls(player, 0.0, ego_stats.x_speed *(-2.0));   
                
              }            
            }
            else if (ego_stats.direction == eTengDirLeft) {
              if (player.x - INFO.get_char_width(player)/2 > character[people[i].char_id].x + ppl_dir_width) {
                ego_stats.direction = eTengDirRight;
                player.Loop = 11;
                ego_stats.x_speed = COLL.check_walls(player, 0.0, ego_stats.x_speed*2.0);
              }
              else  {
                ego_stats.direction = eTengDirLeft;
                player.Loop = 10;          
                ego_stats.x_speed = COLL.check_walls(player, 0.0, ego_stats.x_speed*(-2.0));         
              }            
            }
          }
        }
        return true;
        
      }
      
    }
    
    i++;
  }
}