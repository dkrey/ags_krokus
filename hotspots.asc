// new module script

// id counters
short t_hotspot_id[MAX_HOTSPOTS];
short t_hotspot_index =1;
ct_hotspot t_hotspot[MAX_HOTSPOTS];
import int num_tiles_x, num_tiles_y;
import int size_tile_x, size_tile_y;
import int tile_offset_x, tile_offset_y;
import DynamicSprite *Foreground;
short hotspot_screen_limit = 70;

short hotspot_sprite = 364;


//*******************************************************************************
//* clear_t_hotspot
//*
//*******************************************************************************
static function HSP::clear_t_hotspot(int index) {
  t_hotspot[index].active = false;
  t_hotspot[index].name = "";
  t_hotspot[index].shown_name = "";
	t_hotspot[index].img = 0;
  t_hotspot[index].hidden = false;
  t_hotspot[index].id = 0;
  t_hotspot[index].x = 0;
  t_hotspot[index].y = 0;
}


//*******************************************************************************
//* clear_all_hotspots
//*
//*******************************************************************************
static function HSP::clear_all_hotspots()
{
  int i =0;
  while (i < MAX_HOTSPOTS) {
    t_hotspot_id[i] = 0;
    HSP.clear_t_hotspot(i);
    i++;
  }
  t_hotspot_index = 1;
}

//*******************************************************************************
//* get_hotspot_at
//* Returns the hotspot id at the given tile index
//*
//*******************************************************************************
static function HSP::get_hotspot_at ( int index )
{
	int i = 0;
	while ( i < t_hotspot_index )
	{
		if ( t_hotspot[i].active )
		{
			int _index = t_hotspot[i].y * num_tiles_x + t_hotspot[i].x;
			
			if ( _index == index )
			{
        return i;
			}
		}
		i++;
	}
  return -1;
}

//*******************************************************************************
//* init_hotspot
//* Defines a hotspot
//* This is used in room scripts
//*
//*******************************************************************************
static function HSP::init_hotspot(int hsp_id, String name, bool active)
{
	int i = 0;
	while ( i < t_hotspot_index ) 
  {
		if (t_hotspot[i].id == hsp_id) {
      t_hotspot[i].active   = active;
      t_hotspot[i].name    = name;
      t_hotspot_id[hsp_id] = i;
    }
		i++;
	}
}

//*******************************************************************************
//* get_free_hotspot
//*
//*******************************************************************************
static function HSP::get_free_hotspot() 
{
  short return_idx = 0;
  short i = 1;
  while (i < t_hotspot_index) {
    if (!t_hotspot[i].active) {
      return_idx = i;
      return return_idx;
    }
    i++;
  }
  if (t_hotspot_index >= MAX_HOTSPOTS) return -1;
  return_idx = t_hotspot_index;
  t_hotspot_index++;
  
  return return_idx; 
}

//*******************************************************************************
//* spawn_hotspot
//*
//*******************************************************************************

static int HSP::spawn_hotspot(int tile_index, int hsp_id, bool is_hidden, String name, int opt_xpos, int opt_ypos) 
{
  int xpos, ypos;
  
  if (tile_index == -1) {
    xpos = opt_xpos;
    ypos = opt_ypos;
  }
  else {
    xpos = TILES.getTileIndexXFromIndex(tile_index);
    ypos = TILES.getTileIndexYFromIndex(tile_index);
  }    
  int hsp_index = HSP.get_free_hotspot();
  if (hsp_index == -1) return -1;
  t_hotspot[hsp_index].x  = xpos;
  t_hotspot[hsp_index].y  = ypos;
  t_hotspot[hsp_index].id = hsp_id;
  t_hotspot[hsp_index].name = name;
  t_hotspot[hsp_index].hidden = is_hidden;
  t_hotspot[hsp_index].active = true;
  t_hotspot_id[t_hotspot[hsp_index].id] = hsp_index;
   
  return hsp_index;
}


//*******************************************************************************
//* create_hotspot
//*
//*******************************************************************************
static int HSP::create_hotspot(int tile_index, bool is_hidden, String name) 
{
  int i = 1;
  int hsp_idx = -1;
  
  while (i<MAX_HOTSPOTS) {
    if (t_hotspot_id[i]==0) { 
      hsp_idx = i;
      i = MAX_HOTSPOTS;
    }
    i++;
  }
  
  if (hsp_idx ==-1) {
    Display ("Can't create Hotspot - too many hotspots");
    return -1;
  }
  HSP.spawn_hotspot(tile_index, hsp_idx, is_hidden, name);
  return hsp_idx;
}

//*******************************************************************************
//* get_hotspot_name
//*
//*******************************************************************************
static function HSP::remove_hotspots_by_id(int hsp_id)
{
	int i = 0;
	while ( i < t_hotspot_index ) 
  {
		if (t_hotspot[i].id == hsp_id) {
      HSP.clear_t_hotspot(i);
    }
    
		i++;
	}
  t_hotspot_id[hsp_id] = 0;
}

//*******************************************************************************
//* get_hotspot_name
//*
//*******************************************************************************
static String HSP::get_hotspot_name (int hsp_id, bool inGame)
{
  if (inGame ) return t_hotspot[t_hotspot_id[hsp_id]].name;
  int i;
	while ( i < t_hotspot_index ) 
  {
		if (t_hotspot[i].id == hsp_id) return t_hotspot[i].name;
		i++;
	}  

}

//*******************************************************************************
//* get_hotspot_shown_name
//*
//*******************************************************************************
static String HSP::get_hotspot_shown_name (int hsp_id, bool inGame)
{
  if (inGame ) return t_hotspot[t_hotspot_id[hsp_id]].shown_name;
  int i;
	while ( i < t_hotspot_index ) 
  {
		if (t_hotspot[i].id == hsp_id) return t_hotspot[i].shown_name;
		i++;
	}  

}
//*******************************************************************************
//* set_hotspot_name
//*
//*******************************************************************************
static void HSP::set_hotspot_name (int hsp_id,  String name)
{
  int i = 0;
	while ( i < t_hotspot_index ) 
  {
		if (t_hotspot[i].id == hsp_id) {
      t_hotspot[i].name    = name;
    }
		i++;
	}

}

//*******************************************************************************
//* set_hotspot_shown_name
//*
//*******************************************************************************
static void HSP::set_hotspot_shown_name (int hsp_id,  String name)
{
  int i = 0;
	while ( i < t_hotspot_index ) 
  {
		if (t_hotspot[i].id == hsp_id) {
      t_hotspot[i].shown_name    = name;
    }
		i++;
	}

}


//*******************************************************************************
//* set_hotspot_img
//*
//*******************************************************************************
static void HSP::set_hotspot_img (int hsp_id,  int sprite)
{
  int i = 0; 
	while ( i < t_hotspot_index ) 
  {
		if (t_hotspot[i].id == hsp_id) {
      t_hotspot[i].img    = sprite;
    }
		i++;
	}  
  //t_hotspot[t_hotspot_id[hsp_id]].img = sprite;
}
  
//*******************************************************************************
//* set_hotspot_active
//*
//*******************************************************************************
static void HSP::set_hotspot_active (int hsp_id,  bool is_active)
{
  int i = 0;  
  
	while ( i < t_hotspot_index ) 
  {
		if (t_hotspot[i].id == hsp_id) {
      t_hotspot[i].active    = is_active;
    }
		i++;
	}   
  //t_hotspot[t_hotspot_id[hsp_id]].active = is_active;
}

//*******************************************************************************
//* set_hotspot_hidden
//*
//*******************************************************************************
static void HSP::set_hotspot_hidden (int hsp_id,  bool is_hidden)
{
  int i = 0;  
  
	while ( i < t_hotspot_index ) 
  {
		if (t_hotspot[i].id == hsp_id) {
      t_hotspot[i].hidden    = is_hidden;
    }
		i++;
	}   
  //t_hotspot[t_hotspot_id[hsp_id]].hidden = is_hidden;
}


//*******************************************************************************
//* get_hotspot_xpos
//* works only for a single hotspot
//*
//*******************************************************************************
static int HSP::get_hotspot_xpos (int hsp_id) {
 
  return t_hotspot[t_hotspot_id[hsp_id]].x;
}

//*******************************************************************************
//* get_hotspot_ypos
//* works only for a single hotspot
//*
//*******************************************************************************
static int HSP::get_hotspot_ypos (int hsp_id) {
  
  return t_hotspot[t_hotspot_id[hsp_id]].y;
}


//*******************************************************************************
//* show_hotspots_editor
//*
//*******************************************************************************
static void HSP::show_hotspots_editor()
{
  String tempstring;
  int i = 0; 
	while ( i < t_hotspot_index )
	{
    if (t_hotspot[i].id>0) {
      if ( t_hotspot[i].x *size_tile_x +tile_offset_x> (hotspot_screen_limit * (-1)) &&  t_hotspot[i].x *size_tile_x +tile_offset_x < Screen.Width + hotspot_screen_limit ) 
      {
        if (t_hotspot[i].y *size_tile_y +tile_offset_y> (hotspot_screen_limit * (-1)) && t_hotspot[i].y *size_tile_y +tile_offset_y< Screen.Height + hotspot_screen_limit )
        {
          DrawingSurface *foregroundSurface = Foreground.GetDrawingSurface();
          tempstring = String.Format ("%d",t_hotspot[i].id);
          foregroundSurface.DrawingColor=15;
          foregroundSurface.DrawImage(t_hotspot[i].x *size_tile_x +tile_offset_x, t_hotspot[i].y *size_tile_y +tile_offset_y, hotspot_sprite);
          foregroundSurface.DrawStringWrapped(t_hotspot[i].x *size_tile_x +tile_offset_x, t_hotspot[i].y *size_tile_y +tile_offset_y +size_tile_y/4, size_tile_x, eFontTiny, eAlignCenter, tempstring);
          foregroundSurface.Release();
        }
      }
    }
    i++;
  }  
}

export t_hotspot;
export t_hotspot_id;
export t_hotspot_index;
