int musicVolume;
int soundVolume;
import bool always_skip_speech;
import bool skippy_frames;
import bool disable_parallax;


static void Settings::set_disable_parallax(bool enable)
{
  disable_parallax = enable;
}

static bool Settings::get_disable_parallax()
{
  return disable_parallax;
}

static void Settings::set_skip_speech(bool enable)
{
  always_skip_speech=enable;
}

static void Settings::set_skippy_frames(bool enable)
{
  skippy_frames=enable;
}

static bool Settings::get_skippy_frames()
{
  return skippy_frames;
}

static bool Settings::get_skip_speech()
{
  return always_skip_speech;
}

static int Settings::getMusicVolume()
{
	return musicVolume;
}

static void Settings::setMusicVolume(int volume)
{
	musicVolume = volume;
}

static int Settings::getSoundVolume()
{
	return soundVolume;
}

static void Settings::setSoundVolume(int volume)
{
	soundVolume = volume;
}

static void Settings::save()
{
	File *file = File.Open("$SAVEGAMEDIR$/options.dat", eFileWrite);
	
	if (file == null)
		return;
		
	file.WriteInt(musicVolume);
	file.WriteInt(soundVolume);
	file.WriteInt(always_skip_speech);
	file.WriteInt(skippy_frames);
	file.WriteInt(disable_parallax);
	
	file.Close();
}

static void Settings::load()
{
	File *file = File.Open("$SAVEGAMEDIR$/options.dat", eFileRead);
	
	if (file == null)
	{
		musicVolume = 80;
		soundVolume = 55;
		always_skip_speech = false;
    skippy_frames      = false;
    disable_parallax   = false;
		Settings.save();
	}
	else
	{
		musicVolume = file.ReadInt();
		soundVolume = file.ReadInt();
		always_skip_speech = file.ReadInt();
		skippy_frames = file.ReadInt();
		disable_parallax = file.ReadInt();
		
		file.Close();
	}
	
	Game.SetAudioTypeVolume(eAudioTypeMusic, musicVolume, eVolExistingAndFuture);
	Game.SetAudioTypeVolume(eAudioTypeSound, soundVolume, eVolExistingAndFuture);
}