#define MAX_PARTICLES	128
#define PARTGRAVITY		5.1

Particle particles[MAX_PARTICLES];
import int tile_offset_x, tile_offset_y;
import ctile tile[NUM_MAX_TILES];

static void Particle::reset()
{
	int i = 0;
	while (i < MAX_PARTICLES)
	{
		particles[i].alive = false;
		particles[i].do_collision = 0;
		particles[i].do_bounce = 0;

		i++;
	}
}

static void Particle::spawn(float positionX, float positionY, float velocityX, float velocityY, ParticleType type, int damagepoints,  bool hit_player)
{
	int i = 0;
	while (i < MAX_PARTICLES)
	{
		if (!particles[i].alive)
		{
			particles[i].positionX = positionX;
			particles[i].positionY = positionY;
			particles[i].velocityX = velocityX;
			particles[i].velocityY = velocityY;
			particles[i].xoffset   = 0;
			particles[i].yoffset   = 0;
			particles[i].type = type;
      if (particles[i].sprite != null) particles[i].sprite.Delete();
      particles[i].sprite = null;
			
			if (type == ParticleType_Smoke)
			{
        particles[i].animationTimer = 0;
				particles[i].spriteSlot = 299;//100 + Random(2);
				particles[i].framesToLive = 10;
			}
      else if (type == ParticleType_Debris) {
        particles[i].spriteSlot = 13;
        particles[i].framesToLive = 30;
      }
      
			else if (type == ParticleType_ExplosionSmall)
			{
				particles[i].spriteSlot = 73;
				particles[i].animationTimer = 0;
				
				if (player.Room != 1)
				// don't play sounds in the menu
				{
					int random = Random(2);
					/*
					if (random == 0)
						particles[i].audioChannel = aExplosion1.Play();
					else if (random == 1)
						particles[i].audioChannel = aExplosion2.Play();
					else
						particles[i].audioChannel = aExplosion3.Play();
          */
				}
			}
			else if (type == ParticleType_Loot)
			{
				particles[i].spriteSlot = 57;
				particles[i].framesToLive = 50;
				
				//particles[i].audioChannel = aCoin.Play();
			}
			else if (type == ParticleType_LvlUp)
			{
				particles[i].spriteSlot = 622;
        particles[i].animationTimer = 0;
				
				//particles[i].audioChannel = aCoin.Play();
			}      
			else if (type == ParticleType_Damage)
			{
        //damagepoints
        int t_width = GetTextWidth(String.Format("-%d",damagepoints), eFontTiny);
        int t_height = GetTextHeight(String.Format("-%d",damagepoints), eFontTiny, t_width);
        particles[i].sprite = DynamicSprite.Create(t_width+1, t_height+1);
        DrawingSurface *spr_surf = particles[i].sprite.GetDrawingSurface();
        spr_surf.DrawingColor = 4;
        spr_surf.DrawString(1, 0, eFontTiny, String.Format("-%d",damagepoints));
        spr_surf.DrawString(1, 1, eFontTiny, String.Format("-%d",damagepoints));
        if (hit_player) spr_surf.DrawingColor = 15;
        else spr_surf.DrawingColor = 12;
        spr_surf.DrawString(0, 0, eFontTiny, String.Format("-%d",damagepoints));
        spr_surf.Release();
        particles[i].framesToLive = 35;
        
      }
			else if (type == ParticleType_Blood)
			{
        int rnd = Random(3);
				if (rnd == 0)
					particles[i].spriteSlot = 405;
				else if (rnd ==1)
					particles[i].spriteSlot = 406;
        else if (rnd ==2)
					particles[i].spriteSlot = 407;
        else if (rnd ==3)
					particles[i].spriteSlot = 408;
					
				particles[i].framesToLive = 35;
        particles[i].do_collision = 1;
        
			}
			else if (type == ParticleType_Water)
			{
				if (Random(1) == 0)
					particles[i].spriteSlot = 260;
				else
					particles[i].spriteSlot = 260;
					
				particles[i].framesToLive = 35;
			}      
			else if (type == ParticleType_Shell)
			{
        particles[i].spriteSlot = 409;
				particles[i].do_collision = 1;
        particles[i].do_bounce = 1;
				particles[i].framesToLive = 25;
			} 
			particles[i].alive = true;
			
			return;
		}
		
		i++;
	}
}

bool check_gravity(ParticleType type)
{
  if (type == ParticleType_Blood) return true;
  else if (type == ParticleType_Debris) return true;
  else if (type == ParticleType_Water) return true;
  else if (type == ParticleType_Damage) return true;
  else if (type == ParticleType_Shell) return true;
  else return false;
}

static void Particle::update()
{
	int i = 0;
	while (i < MAX_PARTICLES)
	{
		if (particles[i].alive)
		{
			particles[i].positionX += particles[i].velocityX;
			particles[i].positionY += particles[i].velocityY;

			if (particles[i].type != ParticleType_Smoke && particles[i].type != ParticleType_ExplosionSmall && particles[i].type != ParticleType_LvlUp)
			{
				particles[i].framesToLive--;
			
				if (particles[i].framesToLive <= 0)
					particles[i].alive = false;
				bool check = check_gravity(particles[i].type);
				if (particles[i].velocityY !=0.0 && check) {
            particles[i].positionY += (PARTGRAVITY * ((-(IntToFloat(particles[i].framesToLive) / IntToFloat(35))) + 1.0));
          }
					
			}
      else if (particles[i].type == ParticleType_Smoke) {
				if (particles[i].animationTimer % 5 == 0)
				{
					particles[i].spriteSlot++;
					
					if (particles[i].spriteSlot > 303)
						particles[i].alive = false;
				}
				particles[i].animationTimer++;      
      }
      else if (particles[i].type == ParticleType_LvlUp) {
				if (particles[i].animationTimer % 5 == 0)
				{
					particles[i].spriteSlot++;
					
					if (particles[i].spriteSlot > 629)
						particles[i].alive = false;
				}
				particles[i].animationTimer++;      
      }      
			else if (particles[i].type == ParticleType_ExplosionSmall)
			{
				if (particles[i].animationTimer % 3 == 0)
				{
					particles[i].spriteSlot++;
					
					if (particles[i].spriteSlot > 80)
						particles[i].alive = false;
				}
				
				particles[i].animationTimer++;
			}
      
      //collision check if wanted
      if (particles[i].do_collision > 0 ) {
        if (particles[i].do_collision > 2) {
          int tile_index  = TILES.getTileIndexFromPoint(FloatToInt(particles[i].positionX), FloatToInt(particles[i].positionY));
          if (tile[tile_index].is_solid[1] == true && tile[tile_index].is_ramp[1] == false) {
            
            particles[i].velocityX = particles[i].velocityX / IntToFloat(particles[i].framesToLive+1);
            
            if (particles[i].do_bounce > 0) {
              //if (particles[i].velocityY < 0.0) particles[i].velocityY = particles[i].velocityY * (-1.0);
              //else {
              
                particles[i].positionY = IntToFloat(tile[tile_index].y[1]+tile_offset_y);//10.0;// particles[i].positionY - IntToFloat(particles[i].do_bounce*5);
                particles[i].velocityY = -3.2;
                particles[i].framesToLive += 5;
                //particles[i].do_collision = -1;
                particles[i].do_bounce--;
            }
            else {
              particles[i].velocityY = 0.0;
              //particles[i].framesToLive = 1;
              particles[i].do_collision = -1;
            }
          }
          particles[i].do_collision = 0;
        }
        particles[i].do_collision++;
      }
		}
		
		i++;
	}
}

static void Particle::set_offset (int xoffset, int yoffset)
{
	int i = 0;
	while (i < MAX_PARTICLES)
	{
		if (particles[i].alive)
		{  
      particles[i].xoffset -= xoffset;
      particles[i].yoffset -= yoffset;  
    }
    i++;
  }
}

static void Particle::render(int scroll_x, int scroll_y)
{
  DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
	int i = 0;
  int spriteslot = 0;
	while (i < MAX_PARTICLES)
	{
		if (particles[i].alive) {
      if (particles[i].sprite!= null)spriteslot = particles[i].sprite.Graphic;
      else spriteslot = particles[i].spriteSlot;
			surface.DrawImage(FloatToInt(particles[i].positionX) - Game.SpriteWidth[particles[i].spriteSlot] / 2 + particles[i].xoffset,
				FloatToInt(particles[i].positionY) - Game.SpriteHeight[particles[i].spriteSlot] / 2 + particles[i].yoffset,
				spriteslot);
		}
		i++;
	}
  surface.Release();
}


//*******************************************************************************
//* show_hit
//* draws hit particles
//* 
//*******************************************************************************
static function PART::show_hit(float x,  float y,  int type, eTENGDir direction)
{
  float xaccel;
  
  int i = 0;
  if (type == eHitPart_Enemy) {
     

    while (i < 12) {
      if (direction == eTengDirRight) xaccel = IntToFloat(Random(50)) / 15.0;
      else if (direction == eTengDirLeft)  xaccel = IntToFloat(Random(50)) / 15.0 * (-1.0);
      else xaccel = IntToFloat(Random(100) - 50) / 10.0;
      Particle.spawn(x,y,
        xaccel, IntToFloat(Random(100) - 50) / 15.0+1.0, ParticleType_Blood);    
        
    //  Particle.spawn(x - 4.0 + IntToFloat(Random(8)), y - IntToFloat(Random(12)),
    //    xaccel, IntToFloat(Random(100) - 50) / 20.0, ParticleType_Blood);      
        i++;
    }
  }
  else if (type == eHitPart_Water) {
    while (i < 12)
    {
      Particle.spawn(x - 4.0 + IntToFloat(Random(8)), y - IntToFloat(Random(12)),
        IntToFloat(Random(100) - 50) / 20.0, IntToFloat(Random(100) - 50) / 20.0, ParticleType_Water);
      i++;
    }    
  }


}
//*******************************************************************************
//* show_debris
//* Creates tile destruction particles
//*
//*******************************************************************************
static function PART::show_debris(int tile_x,  int tile_y)
{
  float fxpos1 = IntToFloat(tile_x + tile_offset_x + 2 );
  float fypos1 = IntToFloat(tile_y + tile_offset_y + 2 );
  Particle.spawn(fxpos1, fypos1, 3.0, 2.0, ParticleType_Debris);
  Particle.spawn(fxpos1, fypos1, -1.0, 3.0, ParticleType_Debris);
  Particle.spawn(fxpos1, fypos1, 2.1, 4.0, ParticleType_Debris);
  Particle.spawn(fxpos1, fypos1, -0.4, 4.0, ParticleType_Debris);
}


//*******************************************************************************
//* show_hitpoints
//* show damagepoints/ hitpoints
//*
//*******************************************************************************

static function PART::show_damage(float x,  float y, int amount,  bool hit_player)
{
  Particle.spawn(x, y-1.0, 0.0, -2.0, ParticleType_Damage, amount, hit_player);
}

//*******************************************************************************
//* show_bonus
//* shows coins and such emerging from bricks
//*
//*******************************************************************************
static function PART::show_bonus(int tile_x,  int tile_y)
{
  bool check;
  
  float fxpos1 = IntToFloat(tile_x + tile_offset_x + 8 );
  float fypos1 = IntToFloat(tile_y + tile_offset_y  );
  Particle.spawn(fxpos1, fypos1, 0.0, -1.5, ParticleType_Loot);
  
}

//*******************************************************************************
//* show_lvlup
//* shows coins and such emerging from bricks
//*
//*******************************************************************************
static function PART::show_lvlup()
{
  
  float fxpos1 = IntToFloat(player.x);
  float fypos1 = IntToFloat(player.y - INFO.get_char_height(player));
  Particle.spawn(fxpos1, fypos1, 0.0, -0.45, ParticleType_LvlUp);
  
}

//*******************************************************************************
//* show_bulletshell
//* draws hit particles
//* 
//*******************************************************************************
static function PART::show_bullet_shell(float x,  float y, eTENGDir direction)
{
  float xaccel;
  if (direction == eTengDirRight) xaccel = IntToFloat(Random(10)+10) / 15.0 * (-1.0);
  else if (direction == eTengDirLeft)  xaccel = IntToFloat(Random(10)+10) / 15.0;
  
  Particle.spawn(x,y, xaccel, (IntToFloat(Random(5) + 5 ) / 10.0 + 1.0) * (-1.0), ParticleType_Shell);    
}

//*******************************************************************************
//* show_explosion
//* draws hit particles
//* 
//*******************************************************************************
static function PART::show_explosion(float x,  float y)
{
  Particle.spawn(x,y, 0.0, 0.2, ParticleType_ExplosionSmall);    
}




