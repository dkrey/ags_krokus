// new module script

// chars to use as dummies
short ppl_from = 2;
short ppl_to   = 33;
int people_screen_limit = 32;

import cpeople_types people_types[MAX_PEOPLE];

import cWeapons weapon[eWLastWeapon];
import short people_id[MAX_PEOPLE];
import cpeople people[MAX_PEOPLE];
import short people_index;
import DynamicSprite *Foreground; // Layer 2
import ctile tile[NUM_MAX_TILES];
import int tile_offset_x, tile_offset_y;
import int size_tile_x, size_tile_y;
import int num_tiles_x, num_tiles_y;
import cwaypoint waypoint[MAX_WAYPOINTS];
import short wp_index;
import citems item[MAX_ITEMS];
import ctile_set tile_set;
import bool topdown_mode;


//*******************************************************************************
//* clear_people
//*
//*******************************************************************************
static function PEOPLE::clear_people (int index) {
  
  if (people[index].char_id > 0) {
    if (character[people[index].char_id].Room > -1) {
      character[people[index].char_id].ChangeRoom(-1);
    }
    character[people[index].char_id].Loop = 0;
    character[people[index].char_id].Frame = 0;    
  }
  if (people[index].id >-1) people_id[people[index].id]   = 0;
  people[index].type        = ppl_null;
  people[index].name        = null;
  people[index].sound       = null;	
  people[index].x           = 0;
	people[index].y           = 0;
	people[index].direction   = eTengDirNull;
	people[index].can_fly     = false;
	people[index].ignore_wp     = false;
	people[index].ignore_cliffs = false;
  people[index].limit_left    = 0;
  people[index].limit_right   = 0;
  people[index].limit_up      = 0;
  people[index].limit_down    = 0;
  people[index].target_x      = 0;
  people[index].target_y      = 0;

  
	people[index].xspeed      = 0.0;
	people[index].yspeed      = 0.0;
	people[index].x_remain    = 0.0;
	people[index].y_remain    = 0.0;
	people[index].wait_timer  = 0;
  
  people[index].midair      = false;
  people[index].OnRamp      = false;
  
	people[index].active      = false;
	people[index].onscreen    = false;
	people[index].health      = 0;
	people[index].max_health  = 0;
	people[index].healthbar_timer  = -1;
	people[index].timer       = -1;
	people[index].hit_timer   = -1;
	
	people[index].alarmed     = false;
	people[index].alarm_timer = -1;
	people[index].dead_timer  = 0;  
  people[index].char_id     = -1;
  people[index].id          = -1;
  people[index].antishake   = 0;
  
  people[index].vf          = null;
  people[index].frame_counter     = 0;  
	people[index].ani_delay         = 0;
  people[index].ani_delay_counter = 0;
  
  people[index].view          = 0;
  people[index].loop          = 0;
  people[index].lock_loop     = -1;
  people[index].frame         = 0;
  people[index].talk_view     = -1;
  people[index].talk_color    = 0;
  people[index].idle_view     = -1;  
  people[index].idle_delay    = 0;  
  people[index].is_invincible = false;  
  people[index].touch_damage  = 0;
  people[index].current_tile  = 0;
  people[index].is_alarmable  = false;
  people[index].is_interactable = false;
  people[index].is_hostile      = false;
  people[index].watch_distance  = 0;
  people[index].shoot_chance  = 0;
  people[index].ShotTimer     = 0;
  people[index].active_weapon = eWNoWeapon; 
  people[index].current_tile  = 0;
  people[index].walkto_x      = 0;
  people[index].walkto_y      = 0;
  people[index].walkto_start  = false;
  people[index].watch_distance = 0;
  people[index].shoot_chance = 0;  
  people[index].dist_check    = -1; 
  people[index].exp           = 0; 
  people[index].arcanium      = 0; 
  people[index].armor         = 0; 
}

//*******************************************************************************
//* clear_all_people
//*
//*******************************************************************************
static function PEOPLE::clear_all_people()
{
  int i;
  while (i < MAX_PEOPLE) {
    people_id[i] = 0;
    PEOPLE.clear_people(i);
    i++;
  }
  people_index =1;
}


//*******************************************************************************
//* get_free_people
//*
//*******************************************************************************
static int PEOPLE::get_free_people()
{
  short return_idx = 0;
  short i = 1;
  while (i < people_index) {
    if (!people[i].active) {
      return_idx = i;
      return return_idx;
    }
    i++;
  }
  if (people_index > MAX_ITEMS) return -1;
  return_idx = people_index;
  people_index++;
  return return_idx;
}



//*******************************************************************************
//* init_people_types
//*
//*******************************************************************************
static function PEOPLE::init_people_types()
{
  people_types[ppl_en_moron].name           = "Moron";
  people_types[ppl_en_moron].view           = VBUNNY;
  people_types[ppl_en_moron].dead_timer     = -1;
  people_types[ppl_en_moron].xspeed         = 0.2;
  people_types[ppl_en_moron].wait_timer     = 100;
  people_types[ppl_en_moron].ignore_wp      = true;
  people_types[ppl_en_moron].ignore_cliffs  = true;
  people_types[ppl_en_moron].is_hostile     = true;
  people_types[ppl_en_moron].price          = 100;
  people_types[ppl_en_moron].health         = 50;
  people_types[ppl_en_moron].touch_damage   = 6;
  people_types[ppl_en_moron].is_jumpable    = true;
  people_types[ppl_en_moron].is_alarmable   = false;
  people_types[ppl_en_moron].active_weapon  = eWNoWeapon;
  people_types[ppl_en_moron].watch_distance = 0;
  people_types[ppl_en_moron].shoot_chance   = 0;  
  people_types[ppl_en_moron].exp            = 5;  
  people_types[ppl_en_moron].arcanium       = 3;  
  people_types[ppl_en_moron].armor          = 13;  
  
  people_types[ppl_en_trooper].name           = "Trooper";
  people_types[ppl_en_trooper].view           = VENEMY2;
  people_types[ppl_en_trooper].dead_timer     = -1;
  people_types[ppl_en_trooper].xspeed         = 1.2;
  people_types[ppl_en_trooper].wait_timer     = 100;
  people_types[ppl_en_trooper].ignore_wp      = false;
  people_types[ppl_en_trooper].ignore_cliffs  = false;
  people_types[ppl_en_trooper].is_hostile     = true;
  people_types[ppl_en_trooper].price          = 150;
  people_types[ppl_en_trooper].health         = 50;
  people_types[ppl_en_trooper].touch_damage   = 6;
  people_types[ppl_en_trooper].is_jumpable    = true;
  people_types[ppl_en_trooper].active_weapon  = eWNoWeapon;
  people_types[ppl_en_trooper].watch_distance = 0;
  people_types[ppl_en_trooper].shoot_chance   = 0;    
  people_types[ppl_en_trooper].exp            = 8;    
  people_types[ppl_en_trooper].arcanium       = 4;    
  people_types[ppl_en_trooper].armor          = 30;    

  people_types[ppl_en_pig].name           = "Pig";
  people_types[ppl_en_pig].view           = VENEMY3;
  people_types[ppl_en_pig].dead_timer     = -1;
  people_types[ppl_en_pig].xspeed         = 1.0;
  people_types[ppl_en_pig].wait_timer     = 100;
  people_types[ppl_en_pig].ignore_wp      = false;
  people_types[ppl_en_pig].ignore_cliffs  = false;
  people_types[ppl_en_pig].is_hostile     = true;
  people_types[ppl_en_pig].price          = 150;
  people_types[ppl_en_pig].health         = 100;
  people_types[ppl_en_pig].touch_damage   = 6;
  people_types[ppl_en_pig].is_jumpable    = false;
  people_types[ppl_en_pig].is_alarmable   = true;
  people_types[ppl_en_pig].active_weapon  = eWEnemyGun;
  people_types[ppl_en_pig].watch_distance = 3;
  people_types[ppl_en_pig].shoot_chance   = 50;
  people_types[ppl_en_pig].exp            = 15;    
  people_types[ppl_en_pig].arcanium       = 5;   
  people_types[ppl_en_pig].armor          = 5;   

  people_types[ppl_en_pig2].name           = "Pig";
  people_types[ppl_en_pig2].view           = VENEMY3;
  people_types[ppl_en_pig2].dead_timer     = -1;
  people_types[ppl_en_pig2].xspeed         = 1.0;
  people_types[ppl_en_pig2].wait_timer     = 100;
  people_types[ppl_en_pig2].ignore_wp      = false;
  people_types[ppl_en_pig2].ignore_cliffs  = false;
  people_types[ppl_en_pig2].is_hostile     = true;
  people_types[ppl_en_pig2].price          = 150;
  people_types[ppl_en_pig2].health         = 100;
  people_types[ppl_en_pig2].touch_damage   = 10;
  people_types[ppl_en_pig2].is_jumpable    = false;
  people_types[ppl_en_pig2].is_alarmable   = true;
  people_types[ppl_en_pig2].active_weapon  = eWEnemyGun;
  people_types[ppl_en_pig2].watch_distance = 3;
  people_types[ppl_en_pig2].shoot_chance   = 50;
  
  people_types[ppl_en_pig3].name           = "Pig";
  people_types[ppl_en_pig3].view           = VENEMY3;
  people_types[ppl_en_pig3].dead_timer     = -1;
  people_types[ppl_en_pig3].xspeed         = 1.0;
  people_types[ppl_en_pig3].wait_timer     = 100;
  people_types[ppl_en_pig3].ignore_wp      = false;
  people_types[ppl_en_pig3].ignore_cliffs  = false;
  people_types[ppl_en_pig3].is_hostile     = true;
  people_types[ppl_en_pig3].price          = 150;
  people_types[ppl_en_pig3].health         = 100;
  people_types[ppl_en_pig3].touch_damage   = 10;
  people_types[ppl_en_pig3].is_jumpable    = false;
  people_types[ppl_en_pig3].is_alarmable   = true;
  people_types[ppl_en_pig3].active_weapon  = eWEnemyGun;
  people_types[ppl_en_pig3].watch_distance = 3;
  people_types[ppl_en_pig3].shoot_chance   = 50;  

}

//*******************************************************************************
//* define_people
//* Define enemy types or adds a placeholder for npcs
//* If flag is set, an NPC is defined - otherwise it's a regular enemy
//* NPCs are defined in the rooms
//*
//*******************************************************************************
static function PEOPLE::define_people(int ppl_index, int tile_index, int xpos, int ypos, bool isNPC, int attrib)
{
  people[ppl_index].x = xpos;
  people[ppl_index].y = ypos;
  people[ppl_index].dist_check    = -1;  
  people[ppl_index].direction     = eTengDirLeft;  
  people[ppl_index].active    = true;  
  
  
  people[ppl_index].current_tile = tile_index;
  // Enemies
  if ( !isNPC) {
    people[ppl_index].type          = attrib;	
    people[ppl_index].name          = people_types[attrib].name;
    people[ppl_index].view          = people_types[attrib].view;
    people[ppl_index].dead_timer    = people_types[attrib].dead_timer;
    people[ppl_index].xspeed        = people_types[attrib].xspeed;
    people[ppl_index].wait_timer    = people_types[attrib].wait_timer;
    people[ppl_index].is_hostile    = people_types[attrib].is_hostile;
    people[ppl_index].price         = people_types[attrib].price;
    people[ppl_index].health        = people_types[attrib].health;
    people[ppl_index].max_health    = people[ppl_index].health;
    people[ppl_index].ignore_cliffs = people_types[attrib].ignore_cliffs;
    people[ppl_index].touch_damage  = people_types[attrib].touch_damage;
    people[ppl_index].is_jumpable   = people_types[attrib].is_jumpable;
    people[ppl_index].ignore_wp     = people_types[attrib].ignore_wp;
    people[ppl_index].is_alarmable  = people_types[attrib].is_alarmable;
    people[ppl_index].active_weapon = people_types[attrib].active_weapon;
    people[ppl_index].watch_distance  = people_types[attrib].watch_distance;
    people[ppl_index].shoot_chance    = people_types[attrib].shoot_chance;  
    people[ppl_index].arcanium        = Random(people_types[attrib].arcanium)+FloatToInt(IntToFloat(people_types[attrib].arcanium)/2.0);  
    people[ppl_index].exp             = people_types[attrib].exp;  
    people[ppl_index].armor           = people_types[attrib].armor;  
  }
  // NPCs
  else { 
    people[ppl_index].type = ppl_custom;
    people[ppl_index].id = attrib;
    people[ppl_index].health = 100;
    people[ppl_index].max_health = 100;
    people_id[people[ppl_index].id] = ppl_index;
  }
}

//*******************************************************************************
//* animate_people
//*  
//*******************************************************************************
static void PEOPLE::animate_people(int ppl_id) 
{
  PPL_helper.animate_people(ppl_id);
}


//*******************************************************************************
//* init_people
//* Defines a NPC which was set as a placeholder before (define_people)
//* Called from room scripts
//*
//*******************************************************************************
static function PEOPLE::init_people(int ppl_id, String name, int view, int talk_view, int talk_color, int idle_view, int idle_delay, bool active)
{
	int i = 0;
	while ( i < people_index ) 
  {
		if (people[i].id == ppl_id) {
      people[i].name          = name;
      if (active) people[i].dead_timer = -1;
      people[i].view          = view;
      people[i].talk_view     = talk_view;
      people[i].talk_color    = talk_color;
      people[i].idle_view     = idle_view;
			i = people_index-1;
    }
		i++;
	}
}


//*******************************************************************************
//* spawn_enemy
//*
//*******************************************************************************
static int PEOPLE::spawn_enemy(int tile_index, int type)
{
  int ppl_idx;
  int xpos;
  int ypos;
  
  ppl_idx = PEOPLE.get_free_people();
  
  xpos = tile[tile_index].x[1] + tile_offset_x + size_tile_x / 2;
  ypos = tile[tile_index].y[1] + tile_offset_y + size_tile_y+1;
 
  PEOPLE.clear_people(ppl_idx);     
  PEOPLE.define_people(ppl_idx, tile_index, xpos, ypos, false, type);
  return ppl_idx;
}


//*******************************************************************************
//* edit_people
//*
//*******************************************************************************
static function PEOPLE::edit_people(int ppl_id, int view, int talk_view, int talk_color, int idle_view, int idle_delay)
{
  int ppl_idx = people_id[ppl_id];
  if (view > -1)     {
    people[ppl_idx].view = view;
    if (people[ppl_idx].active) character[people[ppl_idx].char_id].ChangeView(people[ppl_idx].view); 
  }
  if (talk_view >-1) {
    people[ppl_idx].talk_view  = talk_view;
    if (people[ppl_idx].active) character[people[ppl_idx].char_id].SpeechView =  talk_view; 
  }
  if (talk_color>-1) {
    people[ppl_idx].talk_color = talk_color;
    if (people[ppl_idx].active) character[people[ppl_idx].char_id].SpeechColor =  talk_color; 
  }
  if (idle_view >-1) {
    people[ppl_idx].idle_view   = idle_view;    
    people[ppl_idx].idle_delay  = idle_delay;    
    if (people[ppl_idx].active) character[people[ppl_idx].char_id].SetIdleView(idle_view, idle_delay);  
  }
  
}

//*******************************************************************************
//* lock_loop
//*  
//*******************************************************************************
static void PEOPLE::lock_loop(int ppl_id, int loop) 
{
  int ppl_idx = people_id[ppl_id];
  people[ppl_idx].lock_loop = loop;
  
}

//*******************************************************************************
//* unlock_loop
//*  
//*******************************************************************************
static void PEOPLE::unlock_loop(int ppl_id) 
{
  int ppl_idx = people_id[ppl_id];
  people[ppl_idx].lock_loop = -1;
  
}

//*******************************************************************************
//* spawn_npc
//*
//*******************************************************************************
static int PEOPLE::spawn_npc(int tile_index, String name, int view, int talk_view, int talk_color, int idle_view, int idle_delay)
{
  int xpos;
  int ypos;
  int i, itm_idx, ppl_idx, ppl_id = 0;
  ppl_idx = -1;
  
  if (tile_index == -1) {
    xpos = -1 -size_tile_x + tile_offset_x;
    ypos = -1 -size_tile_y + tile_offset_y+1;
  }
  else {
    xpos = tile[tile_index].x[1] + tile_offset_x + size_tile_x / 2;
    ypos = tile[tile_index].y[1] + tile_offset_y + size_tile_y + 1;
  }
  
  i = 1;
  
  while (i < MAX_PEOPLE) {
    if (people_id[i]==0) { 
      ppl_id = i;
      i =MAX_ITEMS;
    }
    i++;
  }
  
  ppl_idx = PEOPLE.get_free_people();
  if (ppl_idx == -1) {
    Display ("Can't create NPC: Already too many people defined");
    return -1;
  }
  //Display ("%s PplIDX%d PPLID %d",name, ppl_idx, ppl_id);
  
  PEOPLE.clear_people(ppl_idx);
  PEOPLE.define_people(ppl_idx, tile_index, xpos, ypos, true, ppl_id);
  PEOPLE.init_people(ppl_id, name, view, talk_view, talk_color, idle_view, idle_delay);
  
  return ppl_idx;
}



//*******************************************************************************
//* get_people_idx_from_id
//*
//*******************************************************************************
static int PEOPLE::get_people_idx_from_id(int ppl_id)
{
  return people_id[ppl_id];
}


//*******************************************************************************
//* set_people_XY_from_tile
//*
//*******************************************************************************
static function PEOPLE::set_people_XY_from_tile(int ppl_idx, int tile_index, bool centered) 
{
  int xpos;
  int ypos;
  
  if (tile_index == -1) {
    xpos = -1 - size_tile_x + tile_offset_x;
    ypos = -1 - size_tile_y + tile_offset_y;
  }
  else {
    xpos = tile[tile_index].x[1] + tile_offset_x + size_tile_x / 2;
    ypos = tile[tile_index].y[1] + tile_offset_y + size_tile_y + 1;
    
    if (centered) {
     xpos += size_tile_x / 2;
    }
  }
  people[ppl_idx].x = xpos;
  people[ppl_idx].y = ypos;
  
}

//*******************************************************************************
//* get_people_at
//*
//*******************************************************************************
static int PEOPLE::get_people_at (int x, int y )
{
  int char_id, i;
  Character* char_temp = Character.GetAtScreenXY (x, y);
  if (char_temp != null) {
    char_id = char_temp.ID;
    //Display ("%d", char_id);
    while (i<MAX_PEOPLE) {
      if (people[i].char_id == char_id) return i;
      i++;
    }
    return -1;
  }
  else return -1;
}

//*******************************************************************************
//* add_people
//* Adds people in sight to a dummy character
//*
//*******************************************************************************
static function PEOPLE::add_people ( int id )
{
 	int i = ppl_from;
	
	while ( i < ppl_to )
	// 1 to x
	{
		if ( character[i].Room == -1 )
		{
      character[i].ChangeView(people[id].view);
			character[i].ChangeRoom ( player.Room, people[id].x , people[id].y );
      if (!String.IsNullOrEmpty(people[id].name)) character[i].Name = people[id].name;
      
      character[i].SpeechView   = people[id].talk_view ;
      character[i].SpeechColor  = people[id].talk_color;
      character[i].Loop         = people[id].loop;
      character[i].Frame        = people[id].frame;
      character[i].SetIdleView(people[id].idle_view, people[id].idle_delay);
			people[id].onscreen       = true;
			people[id].char_id        = i;
			return;
		}
		i++;
	}
}

//*******************************************************************************
//* update_people_char
//*  
//*******************************************************************************
static function PEOPLE::update_people_char(int ppl_id) 
{
  if (people[ppl_id].onscreen && people[ppl_id].char_id>0) {
    character[people[ppl_id].char_id].ChangeView(people[ppl_id].view);
    if (!String.IsNullOrEmpty(people[ppl_id].name)) character[people[ppl_id].char_id].Name = people[ppl_id].name;
    
    character[people[ppl_id].char_id].SpeechView   = people[ppl_id].talk_view ;
    character[people[ppl_id].char_id].SpeechColor  = people[ppl_id].talk_color;
    character[people[ppl_id].char_id].Loop         = people[ppl_id].loop;
    character[people[ppl_id].char_id].Frame        = people[ppl_id].frame;
    character[people[ppl_id].char_id].SetIdleView(people[ppl_id].idle_view, people[ppl_id].idle_delay);    
    
  }
}

//*******************************************************************************
//* add_weapon
//*  
//*******************************************************************************
static function PEOPLE::add_weapon(int ppl_idx, eTENGWeapon active_weapon, int ammo)
{
  people[ppl_idx].active_weapon = active_weapon;
  weapon[people[ppl_idx].active_weapon].ammo = ammo;
}

//*******************************************************************************
//* remove_people
//* removes people in sight and resets the dummy character
//*  
//*******************************************************************************
static function PEOPLE::remove_people ( int id )
{
  
	if ( character[people[id].char_id].Room != -1 )
	{
    people[id].frame = character[people[id].char_id].Frame;
		character[people[id].char_id].ChangeRoom (-1 );
		character[people[id].char_id].Loop  = 0;
		character[people[id].char_id].Frame = 0;
		people[id].onscreen = false;
	}
}


//*******************************************************************************
//* remove_all_people
//*  
//*******************************************************************************
static function PEOPLE::remove_all_people()
{
  int i;
  while (i < people_index) {
    if (people[i].onscreen) {
      PEOPLE.remove_people(i);
    }
    i++;
  }  
  
}


//*******************************************************************************
//* set_people_interactable
//*
//*******************************************************************************
static void PEOPLE::set_people_interactable (int ppl_id,  bool is_interactable)
{
  people[people_id[ppl_id]].is_interactable = is_interactable;
}

//*******************************************************************************
//* get_people_char_id
//* Get the id of the dummy character
//*
//*******************************************************************************
static int PEOPLE::get_people_char_id (int ppl_id)
{
  return people[people_id[ppl_id]].char_id;
}

//*******************************************************************************
//* set_people_hostile
//*
//*******************************************************************************
static void PEOPLE::set_people_hostile (int ppl_id,  bool is_hostile)
{
  people[people_id[ppl_id]].is_hostile = is_hostile;
}


//*******************************************************************************
//* face_people_direction
//*
//*******************************************************************************
static void PEOPLE::face_people_direction (int ppl_id, eTENGDir direction)
{
  character[people[people_id[ppl_id]].char_id].Loop = direction;
  character[people[people_id[ppl_id]].char_id].Frame = 0;
  people[people_id[ppl_id]].loop = direction;    
  people[people_id[ppl_id]].direction = direction;  
}

//*******************************************************************************
//* face_people_player
//*
//*******************************************************************************
static void PEOPLE::face_people_player (int ppl_id)
{
  if (player.x > character[people[people_id[ppl_id]].char_id].x) {
    character[people[people_id[ppl_id]].char_id].Loop = eTengDirRight;
    character[people[people_id[ppl_id]].char_id].Frame = 0;
    people[people_id[ppl_id]].loop = eTengDirRight;
    people[people_id[ppl_id]].direction = eTengDirRight;
  }
  else {
    character[people[people_id[ppl_id]].char_id].Loop = eTengDirLeft;
    character[people[people_id[ppl_id]].char_id].Frame = 0;
    people[people_id[ppl_id]].loop = eTengDirLeft;    
    people[people_id[ppl_id]].direction = eTengDirLeft;
  }
}

//*******************************************************************************
//* walk_ppl_x
//* Lets NPCs walk horizontally to a certain distance (amount of pixel)
//* Cheesy!
//*
//*******************************************************************************
static function PEOPLE::walk_ppl_x(int ppl_id, int amount_px, eTENGDir direction,  float xspeed)
{
  people[people_id[ppl_id]].direction = direction;
  people[people_id[ppl_id]].walkto_x = amount_px;
  people[people_id[ppl_id]].xspeed = xspeed;
  people[people_id[ppl_id]].walkto_start = true;
}

//*******************************************************************************
//* walk_ppl_y
//* Lets NPCs walk vertically to a certain distance (amount of pixel)
//* Cheesy!
//*
//*******************************************************************************
static function PEOPLE::walk_ppl_y(int ppl_id, int amount_px, eTENGDir direction,  float yspeed)
{
  people[people_id[ppl_id]].direction = direction;
  people[people_id[ppl_id]].walkto_y = amount_px;
  people[people_id[ppl_id]].yspeed = yspeed;
  people[people_id[ppl_id]].walkto_start = true;
}

//*******************************************************************************
//* is_moving
//* Checks if there's still an amount to walk left
//*
//*******************************************************************************
static bool PEOPLE::is_moving(int ppl_id)
{
  if (people[people_id[ppl_id]].walkto_x >0 || people[people_id[ppl_id]].walkto_y >0) return true;
  else return false;
}

//*******************************************************************************
//* reward
//*
//* rewards the player with exp and loot
//*******************************************************************************
static function PEOPLE::reward(int ppl_index) {
  int spawntile;
  int item_dir;
  
  if (people[ppl_index].direction==eTengDirLeft) item_dir = 1;
  else item_dir = -1;
  ego_stats.exp += people[ppl_index].exp;
  
  int xpos = character[people[ppl_index].char_id].x-12;
  int ypos = character[people[ppl_index].char_id].y - INFO.get_char_height(character[people[ppl_index].char_id]) -26;
  ITM.spawn_itemXY(xpos, ypos, 0, 0, itm_arcanium, false, true, item_dir, people[ppl_index].arcanium);
  
  RPGLevel.level_up();
}


//*******************************************************************************
//* handle people
//*
//* All people processing starts here
//*******************************************************************************
static function PEOPLE::handle_people (bool withinEditor )
{
	int i = 0;

	while ( i < people_index )
	{
    // activate non-dead enemies
		if ( !people[i].onscreen && people[i].active)
			if ( people[i].x > (people_screen_limit * (-1)) && people[i].x < Screen.Width + people_screen_limit )
				if ( people[i].y > (people_screen_limit * (-1)) && people[i].y < Screen.Height + people_screen_limit ){
          if ( people[i].dead_timer != 0 && people[i].view > 0) PEOPLE.add_people ( i );
        }
  
		if ( people[i].onscreen && people[i].active)
		{
      // Remove enemies out of sight
			if ( people[i].x < (people_screen_limit * (-1)) || people[i].x > Screen.Width + people_screen_limit 
          || people[i].y < (people_screen_limit * (-1)) || people[i].y > Screen.Height + people_screen_limit )
				PEOPLE.remove_people ( i );
      
      // place characters

      if ( character[people[i].char_id].x != people[i].x) character[people[i].char_id].x = people[i].x;
      if ( character[people[i].char_id].y != people[i].y) character[people[i].char_id].y = people[i].y;

      if (withinEditor) {
        String peopleident;
        if (people[i].id>-1)  peopleident = String.Format("N%d",people[i].id);
        else  peopleident = String.Format("%d",i);
        int charwidth = INFO.get_char_width(character[people[i].char_id]);
        int charheight = INFO.get_char_height(character[people[i].char_id]);
        
        DrawingSurface *foregroundSurface = Foreground.GetDrawingSurface();
        foregroundSurface.DrawingColor=15;
        foregroundSurface.DrawStringWrapped(people[i].x, people[i].y - charheight, charwidth+10, eFontTinyOut, eAlignLeft, peopleident);
        foregroundSurface.Release();        
      }
      
			if ( !withinEditor &&(people[i].health > 0 && character[people[i].char_id].Room != -1))
			{        
        // PEOPLE MOVEMENT CASE
        if (people[i].type == ppl_en_moron || people[i].type == ppl_custom || people[i].type == ppl_en_trooper) 
          PPL_default.process(i);
        
        if (people[i].healthbar_timer > 0)people[i].healthbar_timer --;
        if (people[i].ShotTimer > 0) people[i].ShotTimer--;
        if (people[i].hit_timer > -1) people[i].hit_timer--;
        
      } // ppl health
      
			if ( !withinEditor && (people[i].health <= 0 && character[people[i].char_id].Room != -1))
			{
        if (!topdown_mode) PPL_helper.apply_gravity(i, 0, 0);
        
				if ( (people[i].direction == eTengDirLeft && character[people[i].char_id].Loop != 4 )|| (people[i].direction == eTengDirRight && character[people[i].char_id].Loop != 5)) {
          people[i].ani_delay_counter = 0;
          PEOPLE.reward(i);
          /*
          if (people[i].direction ==  eTengDirLeft) {
            character[people[i].char_id].Loop = 4;
            people[i].loop = 4;
          }
          else {
            character[people[i].char_id].Loop = 5;
            people[i].loop = 5;            
          }
          */
          character[people[i].char_id].Frame = 0;          
        }
						
			  //animate death
        PART.show_explosion(IntToFloat(people[i].x), IntToFloat(people[i].y-INFO.get_char_height(character[people[i].char_id])/3 ) );
        people[i].loop = 0;
        people[i].dead_timer = 0;
        people[i].active = false;
        PEOPLE.remove_people ( i );
        PEOPLE.clear_people(i);
        /*
        int frmcount = Game.GetFrameCountForLoop(character[people[i].char_id].View, character[people[i].char_id].Loop);
        people[i].vf = Game.GetViewFrame(character[people[i].char_id].View, character[people[i].char_id].Loop, character[people[i].char_id].Frame);
        
        if (people[i].ani_delay_counter >= character[people[i].char_id].AnimationSpeed + people[i].vf.Speed){
          if (character[people[i].char_id].Frame == frmcount-1) {
            //PPL.reward(i);
            people[i].loop = 0;
            people[i].dead_timer = 0;
            people[i].active = false;
            PEOPLE.remove_people ( i );
            PEOPLE.clear_people(i);
          }
          else {
            character[people[i].char_id].Frame ++;
            people[i].frame++;
          }
          people[i].ani_delay_counter = 0;
        }
        else people[i].ani_delay_counter ++;  
        */

      }

    } // ppl active	  
    
		i++;
	}
}