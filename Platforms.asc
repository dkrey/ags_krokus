// new module script
short platform_screen_limit = 70;
cplatforms platform[MAX_PLATFORMS];
short pf_index;

import ctile tile[NUM_MAX_TILES];
import int size_tile_x, size_tile_y;
import int tile_offset_x, tile_offset_y;

import ctile_set tile_set;
import cwaypoint waypoint[MAX_WAYPOINTS];
import short wp_index;

//*******************************************************************************
//* clear_platform
//*
//*******************************************************************************
static function PFORM::clear_platform (int index) {
  platform[index].x               = 0;
  platform[index].y               = 0;
  platform[index].xspeed          = 0;
  platform[index].yspeed          = 0;
  platform[index].speed_delay     = 0;
  platform[index].speed_delay_cnt = 0;
  
  platform[index].facing          = -1;  
  platform[index].timer           = -1;  
  platform[index].wait_timer      = 0;     
  platform[index].sprite          = 0;    
  platform[index].current_tile    = 0;    
 
}

//*******************************************************************************
//* clear_all_platforms
//*
//*******************************************************************************
static function PFORM::clear_all_platforms()
{
  int i;
  while (i < MAX_PLATFORMS) {
    PFORM.clear_platform(i);
    i++;
  }   
  pf_index = 0;
}

static int PFORM::get_free_platform() 
{
  short return_idx = 0;
  short i;
  while (i < pf_index) {
    if (platform[i].current_tile == 0) {
      return_idx = i;
      return return_idx;
    }
    i++;
  }
  if (pf_index > MAX_PLATFORMS) return -1;
  return_idx = pf_index;
  pf_index++;
  return return_idx;  
}

//*******************************************************************************
//* create_platfrom
//* type = 1: horizontal 
//* type = 2: vertical
//*
//*******************************************************************************
static function PFORM::create_platfrom(int tile_index, int type)
{
  int pf_idx = PFORM.get_free_platform();
  int tile_x = TILES.getTileIndexXFromIndex(tile_index);
  int tile_y = TILES.getTileIndexYFromIndex(tile_index);
  
  if (pf_idx > -1) {
    PFORM.clear_platform(pf_idx);
    platform[pf_idx].x = tile_x * size_tile_x+ tile_offset_x;
    platform[pf_idx].y = tile_y * size_tile_y+ tile_offset_y;
    
    platform[pf_idx].speed_delay     = 0;
    platform[pf_idx].wait_timer      = 100;
    platform[pf_idx].current_tile    = tile_index;
    
    if (type == 1) {
      platform[pf_idx].sprite          = tile_set.platform_hori;    
      platform[pf_idx].facing          = -1; 
      platform[pf_idx].xspeed          = 2;    
    } 
    else { 
      platform[pf_idx].sprite          = tile_set.platform_vert;  
      platform[pf_idx].facing          = -1; 
      platform[pf_idx].yspeed          = 1;  
    }
  }

}

//*******************************************************************************
//* handle_platforms
//* moves platforms around
//*
//*******************************************************************************
static function PFORM::handle_platforms (bool withinEditor)
{
  DrawingSurface *roomSurface;
  roomSurface = Room.GetDrawingSurfaceForBackground();
	int i = 0;
  int l = 0;
  int platform_width;
  int platform_height;
  
	while ( i < pf_index )
	{
    if (platform[i].current_tile > 0) {
      if ( platform[i].x > (platform_screen_limit * (-1)) && platform[i].x < Screen.Width + platform_screen_limit ) {
        if ( platform[i].y > (platform_screen_limit * (-1)) && platform[i].y < Screen.Height + platform_screen_limit )
        {
          int sprite_slot;
          int tile_index;
          int tile_index_self;
    
          sprite_slot = platform[i].sprite;
          
          platform_width =Game.SpriteWidth[sprite_slot];
          platform_height =Game.SpriteHeight[sprite_slot];
          
          if (platform[i].speed_delay_cnt == platform[i].speed_delay && !withinEditor) 
          {
            platform[i].speed_delay_cnt =0;
            // move platform left or top
            if ( platform[i].facing < 0 )
            {
              if ( platform[i].timer == -1 )
              {
                if (platform[i].xspeed != 0) { 
                  if (i != ego_stats.platform_id ) platform[i].x -= platform[i].xspeed;
                  tile_index = TILES.get_tile_at (  platform[i].x -1,  platform[i].y + 2, 1, platform[i].current_tile);
                  tile_index_self = TILES.get_tile_at ( platform[i].x - 1, platform[i].y, 1, platform[i].current_tile);
                }
                else {
                  if (i != ego_stats.platform_id ) platform[i].y -= platform[i].yspeed;
                  tile_index = TILES.get_tile_at (  platform[i].x +2, platform[i].y  -1, 1, platform[i].current_tile);
                  tile_index_self = TILES.get_tile_at ( platform[i].x  +2, platform[i].y, 1, platform[i].current_tile);
                }
                
                platform[i].current_tile = tile_index_self;
                
                int w = 0;
                while ( w < wp_index )
                {
                  if ( waypoint[w].x == tile[tile_index_self].x[l] && waypoint[w].y == tile[tile_index_self].y[l] )
                    platform[i].timer = platform[i].wait_timer;
                  w++;
                }
              
                if ( tile[tile_index].is_solid[l] )platform[i].facing = 1;

                platform[i].speed_delay_cnt = 0;
              }
              else {
                platform[i].timer--;
              }
            }
            // move pf right/down
            else if ( platform[i].facing > 0 )
            {
              if ( platform[i].timer == -1)
              {
                if (platform[i].xspeed != 0) { 
                  if (i != ego_stats.platform_id) platform[i].x += platform[i].xspeed;
                  tile_index = TILES.get_tile_at ( platform[i].x  + platform_width, platform[i].y + 2, 1, platform[i].current_tile);
                  tile_index_self = TILES.get_tile_at ( platform[i].x + platform_width +1, platform[i].y, 1, platform[i].current_tile);
                }
                else {
                  if (i != ego_stats.platform_id) platform[i].y += platform[i].yspeed;
                  tile_index = TILES.get_tile_at ( platform[i].x + 2, platform[i].y + platform_height +1, 1, platform[i].current_tile);
                  tile_index_self = TILES.get_tile_at ( platform[i].x +2, platform[i].y +platform_height, 1, platform[i].current_tile);
                }
                
                platform[i].current_tile = tile_index_self;
                
                int w = 0;

                while ( w < wp_index )
                {
                  if ( waypoint[w].x == tile[tile_index_self].x[l] && waypoint[w].y == tile[tile_index_self].y[l] )
                    platform[i].timer = platform[i].wait_timer;
                  w++;
                }   
                
                if ( tile[tile_index].is_solid[l] ) platform[i].facing = -1;  
                platform[i].speed_delay_cnt = 0;
              }
              else {
                platform[i].timer--;
              }
            }
        
            if ( platform[i].timer == 0 )
            {
              if ( platform[i].facing == -1 )
                platform[i].facing = 1;
              else if ( platform[i].facing == 1 )
                platform[i].facing = -1;
              
              platform[i].timer = -1;
            }
            
          }
          else {
            if (!withinEditor) platform[i].speed_delay_cnt ++;
          }
        
          roomSurface.DrawImage(platform[i].x, platform[i].y, sprite_slot );
        }
      }
    }
      
  i++;
	}
  roomSurface.Release();
}

//*******************************************************************************
//* check_platform_at
//* returns a platform at the given coordinates 
//*
//*******************************************************************************
static int PFORM::check_platform_at (int x, int y,  bool strict )
{
	int i = 0;
	int width, height;
	while ( i < pf_index )
	{
    width  = Game.SpriteWidth[platform[i].sprite];
    if (strict) height = ego_stats.footwidth;
    else height = Game.SpriteHeight[platform[i].sprite];
    
    if ( x > platform[i].x && x < platform[i].x + width )
      if ( y >  platform[i].y && y < platform[i].y + height )
        return i;
		
		i++;
	}
	
	return -1;
}

export platform_screen_limit;
export platform, pf_index;