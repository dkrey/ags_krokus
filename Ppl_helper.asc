// new module script

import cpeople_types people_types[MAX_PEOPLE];

import cWeapons weapon[eWLastWeapon];
import short people_id[MAX_PEOPLE];
import cpeople people[MAX_PEOPLE];
import short people_index;
import DynamicSprite *Foreground; // Layer 2
import ctile tile[NUM_MAX_TILES];
import int tile_offset_x, tile_offset_y;
import int size_tile_x, size_tile_y;
import int num_tiles_x, num_tiles_y;
import cwaypoint waypoint[MAX_WAYPOINTS];
import short wp_index;
import citems item[MAX_ITEMS];
import ctile_set tile_set;
import bool topdown_mode;

//*******************************************************************************
//* animate_people
//*  
//*******************************************************************************
static void PPL_helper::animate_people(int ppl_id) 
{
  
  if (people[ppl_id].lock_loop > -1 ){
    character[people[ppl_id].char_id].Loop = people[ppl_id].lock_loop;
    people[ppl_id].loop =people[ppl_id].lock_loop;
  }
  else {
    character[people[ppl_id].char_id].Loop = people[ppl_id].direction;
    people[ppl_id].loop = people[ppl_id].direction;
  }
  int frmcount = Game.GetFrameCountForLoop(character[people[ppl_id].char_id].View, character[people[ppl_id].char_id].Loop);
  people[ppl_id].vf = Game.GetViewFrame(character[people[ppl_id].char_id].View, character[people[ppl_id].char_id].Loop, character[people[ppl_id].char_id].Frame);

  if (people[ppl_id].ani_delay_counter >= character[people[ppl_id].char_id].AnimationSpeed + people[ppl_id].vf.Speed){
    if (character[people[ppl_id].char_id].Frame == frmcount -1) character[people[ppl_id].char_id].Frame = 0;
    else character[people[ppl_id].char_id].Frame ++;
    people[ppl_id].ani_delay_counter = 0;
  }
  else people[ppl_id].ani_delay_counter ++;     
  
}

//*******************************************************************************
//* apply_people_gravity
//* lets non flying people fall
//*  
//*******************************************************************************
static void PPL_helper::apply_gravity(int i, int index1, int index2)
{
  int l = 0;
  int footwidth = 3;
  int charwidth = INFO.get_char_width (character[people[i].char_id]);
  int charheight = INFO.get_char_height (character[people[i].char_id]);
  int temp_ramp = 0;
  int ramp_modifier =0;
  int left_right_factor = -1;
  
  if (people[i].direction == eTengDirLeft)left_right_factor = left_right_factor * (-1);

  if (people[i].midair == true && !people[i].OnRamp) {
    people[i].yspeed += GRAVITY;
    // Check for floor during midair and reduce speed
    people[i].yspeed = COLL.check_walls(character[people[i].char_id], people[i].yspeed, 0.0, i);
    if (people[i].yspeed ==0.0) people[i].midair = false; 
   
  } 
  
  // Check for floor in general
  int floor_idx   = 0;
  int floor_idx2   = 0;
  bool foundfloor = false;

  if ((index1 == 0|| index2 == 0) || (!people[i].OnRamp)) {
    floor_idx = TILES.get_tile_at (character[people[i].char_id].x - footwidth * left_right_factor, character[people[i].char_id].y + footwidth);
    floor_idx2 = TILES.get_tile_at (character[people[i].char_id].x + footwidth * left_right_factor, character[people[i].char_id].y + footwidth );
  }
  else {
    floor_idx  = index1;
    floor_idx2 = index2;
  }
  
  if ( (tile[floor_idx].is_solid[l] || tile[floor_idx2].is_solid[l]) ) { 
    if ( (tile[floor_idx2].is_ramp[l] && ( tile[floor_idx].is_solid[l] || tile[floor_idx].is_ramp_support[l] ) ) || !tile[floor_idx2].is_ramp[l] )
    {
      if ( people[i].midair && ( character[people[i].char_id].y < tile[floor_idx].y[l] + tile_offset_y  +(charheight/2)) || (character[people[i].char_id].y < tile[floor_idx2].y[l] + tile_offset_y  + (charheight/2))) {
        foundfloor = true;  
      }
      else if (!people[i].midair && (character[people[i].char_id].y < tile[floor_idx].y[l] + tile_offset_y  +(charheight/2)) || (character[people[i].char_id].y < tile[floor_idx2].y[l] + tile_offset_y  +(charheight/2)))
        foundfloor = true;
    }
    else foundfloor = true;
  }
  people[i].current_tile = floor_idx;
     
    
  // ramp handling
  if (people[i].OnRamp && people[i].yspeed > -0.1) {
    int tile_idx;
    temp_ramp = 0;
    ramp_modifier =0;
    if (tile[floor_idx].is_ramp[l] ) tile_idx = floor_idx;
    else if (tile[floor_idx2].is_ramp[l] ) tile_idx = floor_idx2;
    // Ramp support tile
    else  {
      tile_idx  = TILES.get_tile_at (character[people[i].char_id].x, character[people[i].char_id].y+3, 1, people[i].current_tile);
      //works!
      //INFO.draw_debug_dot(character[people[i].char_id].x , character[people[i].char_id].y +3, 63504);
      //tile[ tile_idx ].highlight[0] =true;
    }
    
    ramp_modifier = COLL.get_ramp_ypos(tile_idx, character[people[i].char_id]);
    temp_ramp = tile[tile_idx].y[l] + tile_offset_y +size_tile_y - ramp_modifier + 1 * left_right_factor ; 

  
    if (!people[i].midair) {
      people[i].y = temp_ramp;
      if (tile_idx >0) people[i].current_tile = tile_idx;
      people[i].yspeed = 0.0;
      people[i].midair = false;
      foundfloor = true;  
    }
    
    else if (character[people[i].char_id].y + footwidth >= temp_ramp -footwidth) {
      people[i].y = temp_ramp;
      if (tile_idx >0) people[i].current_tile = tile_idx;
      people[i].yspeed = 0.0;
      people[i].midair = false;
      foundfloor = true;
    }     
  } 
  else if (foundfloor) {
    //if (tile[index2].is_platform[l] && character[people[i].char_id].y > tile[index2].y[l] + tile_offset_y +3) people[i].midair = true;
    //else {
      //INFO.draw_debug_dot(character[people[i].char_id].x , character[people[i].char_id].y +3, 63504);
      //tile[ floor_idx ].highlight[0] =true;
      
    people[i].y = tile[floor_idx2].y[l] + tile_offset_y+1;
    people[i].yspeed = 0.0;
    people[i].midair = false;
    //}
  }
  else {
     people[i].midair = true;
  }  

  people[i].y += FloatToInt(people[i].yspeed);
  /*
  if (i == 7) {

    lblDebug1.Text = String.Format("rampmod %d, tempramp %d ",ramp_modifier, temp_ramp);
    if (people[7].OnRamp)lblDebug2.Text = String.Format("ramp!");
    else lblDebug2.Text = String.Format("--!");
  }
 */
 /*
   if (i==1) {

    lblDebug1.Text = String.Format("speed %f",people[1].yspeed);
    if (people[1].OnRamp)lblDebug2.Text = String.Format("ramp!");
    else lblDebug2.Text = String.Format("--!");
  }
 */
  
}


//*******************************************************************************
//* check for ramps
//*  
//*******************************************************************************
static void PPL_helper::check_ramp(int i, int tile_idx)
{
  int l = 0;
  int footwidth = 3;
  
  
  // avoid skipping up to tiles/ramps etc.
  if (tile_idx-num_tiles_x > 0 && tile[tile_idx-num_tiles_x].is_fg_ramp[l]) people[i].OnRamp = true;
  
  if (tile[tile_idx].is_ramp[l]) people[i].OnRamp = true;
  else if (! people[i].midair && tile[tile_idx].is_ramp_support[l]) 
  { 
    if (people[i].direction == eTengDirRight) tile_idx = TILES.get_tile_at (character[people[i].char_id].x + footwidth , character[people[i].char_id].y - footwidth, 1, people[i].current_tile);
    else tile_idx = TILES.get_tile_at (character[people[i].char_id].x - footwidth, character[people[i].char_id].y - footwidth, 1, people[i].current_tile);
    people[i].OnRamp = true;  
  }

  // fill ramp gaps
  if (!tile[tile_idx].is_solid[l] && !tile[tile_idx].is_ramp[l]) {
    if (people[i].direction == eTengDirRight) 
      tile_idx  = TILES.get_tile_at (character[people[i].char_id].x - footwidth, character[people[i].char_id].y -2, 1, people[i].current_tile);

    else 
      tile_idx = TILES.get_tile_at (character[people[i].char_id].x + footwidth,character[people[i].char_id].y -2, 1, people[i].current_tile);
      
    if (tile[tile_idx].is_ramp[l]) {
      people[i].OnRamp = true;

    }
    else if (!people[i].midair && tile[tile_idx].is_ramp_support[l]) {
      if ( (people[i].direction == eTengDirRight && !tile[tile_idx].mirrored_x[l]) || (people[i].direction == eTengDirLeft && tile[tile_idx].mirrored_x[l]) )
      {
        if (tile[tile_idx - num_tiles_x].is_ramp[l] || tile[tile_idx - num_tiles_x].is_ramp_support[l]) {
          people[i].OnRamp = false;    
        } else people[i].OnRamp = true;    
      }
    }
  }
}


//*******************************************************************************
//* check_people_alarm
//* alarm people, if the player (or a dead buddy) is in sight 
//*  
//*******************************************************************************
static void PPL_helper::check_alarm(int i)
{
  int watch_distance = people[i].watch_distance * size_tile_x;
  int j, k;
  Character *seek_player;
  Character *seek_corpse;
  int current_tile;
  bool found_something = false;
  
  while ( j < watch_distance ) {
    //check left
    if (people[i].direction == eTengDirLeft) {
      seek_player = Character.GetAtScreenXY( people[i].x  - j, people[i].y  - INFO.get_char_height(character[people[i].char_id])+3);
      seek_corpse = Character.GetAtScreenXY(  people[i].x  - j, people[i].y  + 3);
      
      if (seek_player != null && seek_player.ID == player.ID) {
        found_something = true;
        j = watch_distance;
      }
      if (seek_corpse != null && seek_corpse.ID != 0) {
        while (k < people_index)
        {
          if (people[k].active && seek_corpse.ID == people[k].char_id && people[k].is_hostile && people[k].health==0)
            found_something = true;
          k++;
        }
      }
    }
    //check right
    else {
      seek_player = Character.GetAtScreenXY( people[i].x  + j, people[i].y - INFO.get_char_height(character[people[i].char_id])+3 );
      seek_corpse = Character.GetAtScreenXY( people[i].x  + j, people[i].y + 3);
      
      if (seek_player != null && seek_player.ID == player.ID) {
        found_something = true;      
        j = watch_distance;
      }
      if (seek_corpse != null && seek_corpse.ID != 0) {
        while (k < people_index)
        {
          if (people[k].active && seek_corpse.ID == people[k].char_id && people[k].is_hostile && people[k].health==0)
            found_something = true;
          k++;
        }
      }      
    }
    j++;
  }
  j = 0;
  
  //check for tiles, blocking view
  if (found_something) {
    current_tile = TILES.get_tile_at( people[i].x, people[i].y - 5, 1, people[i].current_tile );
    
    while ( j < people[i].watch_distance) 
    {
      //check block left
      if (people[i].direction == eTengDirLeft) {

        if (tile[current_tile - j].is_solid[1]) {
           j = people[i].watch_distance;
           found_something = false;
        }
      }
      else {

        if (tile[current_tile + j].is_solid[1]) {
           j = people[i].watch_distance;
           found_something = false;
        }        
      }

      j++;
    }
  }
 
  if (found_something) {
    people[i].alarm_timer = 150;
    if ( !people[i].alarmed ) people[i].alarmed = true;   
  }
  
}


//*******************************************************************************
//* check_people_attack
//* lets people attack the player
//*  
//*******************************************************************************
static void PPL_helper::check_attack(int i)
{
  int rnd = Random(people[i].shoot_chance);
  
  if (rnd == 1 && people[i].ShotTimer == 0) {
    
    if (player.x > character[people[i].char_id].x) {
      character[people[i].char_id].Loop = 7;
      character[people[i].char_id].Frame = 0;
      people[i].frame = 0;
      people[i].loop = 7;
      people[i].direction = eTengDirRight;
    }
    else {
      character[people[i].char_id].Loop = 6;
      character[people[i].char_id].Frame = 0;
      people[i].frame = 0;    
      people[i].loop = 6;    
      people[i].direction = eTengDirLeft;
    }    
    BULLET.shoot_enemy_bullet(player.x, player.y - (INFO.get_char_height(player)/2), i);
  }
}
