// new module script
cControls controls;
import ctile tile[NUM_MAX_TILES];
import bool TENG_running;
import int size_tile_x, size_tile_y;
import cWeapons weapon[eWLastWeapon];

bool use_lock = false;
bool inv_lock = false;
bool walkOn_lock = false;


//*******************************************************************************
//* init_controls
//* Applies the controls, the player has setup
//* 
//*******************************************************************************
static function CTRL::init_controls() 
{
  KeySwap.Load();
  MapJoy.Load();
  controls.jUp      = -10000;
  controls.jDown    = 10000;
  controls.jLeft    = -10000;
  controls.jRight   = 10000;

  controls.Up     = keyMap[eMKUp].keycode;
  controls.Down   = keyMap[eMKDown].keycode;
  controls.Left   = keyMap[eMKLeft].keycode;
  controls.Right  = keyMap[eMKRight].keycode;
  controls.Interact = keyMap[eMKInteract].keycode;
  controls.Shoot  = keyMap[eMKShoot].keycode;
  controls.Pause  = keyMap[eMKPause].keycode;
  controls.Inv    = keyMap[eMKInv].keycode;
  controls.Jump    = keyMap[eMKJump].keycode;
  
  if (joy != null && joy.Valid()) {
  controls.jInteract = mapJoyBtn[eJoyInteract];
  controls.jShoot    = mapJoyBtn[eJoyShoot];
  controls.jPause    = mapJoyBtn[eJoyPause];
  controls.jInv      = mapJoyBtn[eJoyInv];
  controls.jJump     = mapJoyBtn[eJoyJump];
  }
  
}

static bool CTRL::isControlUp() {
  if (IsKeyPressed(controls.Up))return true;
  if (joy != null && joy.Valid() && joy.y < controls.jUp) return true;
  
}

static bool CTRL::isControlDown() {
  if (IsKeyPressed(controls.Down)) return true;
  if (joy != null && joy.Valid() && joy.y > controls.jDown) return true;
}

static bool CTRL::isControlLeft() {
  if (IsKeyPressed(controls.Left)) return true;
  if (joy != null && joy.Valid() && joy.x < controls.jLeft) return true;
}

static bool CTRL::isControlRight() {
 
  if (IsKeyPressed(controls.Right)) return true;
  if (joy != null && joy.Valid() && joy.x > controls.jRight) return true;
}

static bool CTRL::isControlInteract() {
  if (IsKeyPressed(controls.Interact)) return true;
  if (joy != null && joy.Valid() && joy.IsButtonDown(controls.jInteract)) return true;
}

static bool CTRL::isControlShoot() {
  if (IsKeyPressed(controls.Shoot)) return true;
  if (joy != null && joy.Valid() && joy.IsButtonDown(controls.jShoot)) return true;
}

static bool CTRL::isControlPause() {
  if (IsKeyPressed(controls.Pause)) return true;
  if (joy != null && joy.Valid() && joy.IsButtonDown(controls.jPause)) return true;
}

static bool CTRL::isControlInv() {
  if (IsKeyPressed(controls.Inv)) return true;
  if (joy != null && joy.Valid() && joy.IsButtonDown(controls.jInv)) return true;
}

static bool CTRL::isControlJump() {
  if (IsKeyPressed(controls.Jump)) return true;
  if (joy != null && joy.Valid() && joy.IsButtonDown(controls.jJump)) return true;
}



//*******************************************************************************
//* handle_controls
//*
//*******************************************************************************
static function CTRL::handle_controls_topdown()
{
  float y_accel;
  float x_accel;

  if(CTRL.isControlUp()) {      
    y_accel = -1.0;
    ego_stats.direction = eTengDirLeft;
    player.Loop = ego_stats.direction;
  }
  else if(CTRL.isControlDown()) {    
    y_accel = 1.0;
    ego_stats.direction = eTengDirRight;
    player.Loop = ego_stats.direction;    
  }
  else y_accel = 0.0;

 
  // Left right walking
  if(CTRL.isControlLeft()) {
    x_accel = -1.0;
    ego_stats.direction = eTengDirLeft;
    player.Loop = ego_stats.direction;
  }
    
  else if(CTRL.isControlRight()) {    
    x_accel = 1.0;
    ego_stats.direction = eTengDirRight;
    player.Loop = ego_stats.direction; 
  }
  else x_accel = 0.0;
         
  ego_stats.y_accel = (Y_ACCEL * y_accel);
  ego_stats.x_accel = (X_ACCEL * x_accel);  
  //INTERACT 
  if (CTRL.isControlInteract() && !use_lock && !ego_stats.midair && !ego_stats.InSlide && !ego_stats.Ducks) {
    if (ego_stats.current_act_id > -1) {
      use_lock = true;
      if (ego_stats.current_action != eTAct_NoAction) {
        player.Loop = ego_stats.direction;
        player.Frame = 0;
        ego_stats.xspeed = 0;

        CallRoomScript(ego_stats.current_action);
      }
      else use_lock = false;
    }
  }
  // WALK ON
  if ( !walkOn_lock &&(ego_stats.current_action == eTAct_WalkOnHotspot || ego_stats.current_action == eTAct_WalkOnObject)){
    walkOn_lock = true;
    CallRoomScript(ego_stats.current_action);
  }  
}


//*******************************************************************************
//* handle_controls
//*
//*******************************************************************************
static function CTRL::handle_controls()
{
  // Key Up ground
  if((CTRL.isControlJump()||CTRL.isControlUp()) && !ego_stats.Ducks && !ego_stats.HasGrabbed  && ego_stats.midair == false && ego_stats.Jump_Pressed == false) 
  {
    //Climb Ladders
    if (CTRL.isControlUp() && ego_stats.Found_Ladder && !ego_stats.Ladder_NoUp) {
      ego_stats.OnLadder = true;
      ego_stats.y_accel = -1.0;
    }
    // Jumping
    else {
      if (CTRL.isControlJump() && !ego_stats.Jump_Forbidden &&!ego_stats.Ducks) {
        ego_stats.InSlide = 0;
        ego_stats.y_speed = -3.5;
        ego_stats.Jumped = true;
        ego_stats.Jump_Pressed = true;
        ego_stats.Jump_Timer = 0;
      }
    }
  }
  //Double Jump
  else if (CTRL.isControlJump() && ego_stats.s_can_doublejump &&!ego_stats.Ducks && !ego_stats.HasGrabbed &&!ego_stats.DoubleJump && ego_stats.midair == true && ego_stats.Jump_Pressed == false && !ego_stats.Jump_Forbidden) {
    ego_stats.InSlide = 0;
    ego_stats.y_speed = -3.0;
    ego_stats.Jumped = true;
    ego_stats.DoubleJump = true;
    ego_stats.Jump_Pressed = true;
    ego_stats.Jump_Timer = 3;
    Particle.spawn(IntToFloat(player.x), IntToFloat(player.y-4), 0.0, 2.0, ParticleType_Smoke); 
  }
  // KEy up midair
  else if (CTRL.isControlUp() &&!ego_stats.Ducks && !ego_stats.HasGrabbed && ego_stats.Jump_Pressed == false) {
    if (ego_stats.Found_Ladder) {
      ego_stats.OnLadder = true;
      if (ego_stats.midair) ego_stats.x_speed = 0.0;
      ego_stats.y_accel = -1.0;
    }   
  }
  // Grab up
  else if (CTRL.isControlUp() && ego_stats.HasGrabbed && !ego_stats.que_up_ani) {
    ego_stats.que_up_ani = true;
  }
  
  // Key down
  if(CTRL.isControlDown() && !ego_stats.HasGrabbed && !ego_stats.Jumped) {

    if (ego_stats.Found_Ladder) {
      ego_stats.OnLadder = true;
      ego_stats.y_accel = 1.0;
    }
    else {
      //Slide_Pressed / Duck_Pressed
      if (!ego_stats.midair && ego_stats.s_can_slide && ego_stats.InSlide == 0 && !ego_stats.Slide_Pressed) {
        //duck
        if (ego_stats.x_speed == 0.0) {
          ego_stats.Ducks = true;
        }
        else {
          if (ego_stats.x_speed == MAX_XSPEED) { 
            ego_stats.InSlide = 1;
            ego_stats.Slide_Pressed = true;
          }
          if (ego_stats.x_speed == -1.0 * MAX_XSPEED) {
            ego_stats.InSlide = -1;
            ego_stats.Slide_Pressed = true;
          }  
        }
      }
    }

  }
  else if (CTRL.isControlDown() && ego_stats.HasGrabbed && !ego_stats.que_up_ani) {
    ego_stats.HasGrabbed = false;
    ego_stats.GrabPossible = false;
    ego_stats.GrabFound = false;
  }
  
  //Jump through platforms and ramps
  if (CTRL.isControlJump() && CTRL.isControlDown() && ego_stats.Ducks) {
    int index = ego_stats.current_tile;
    
    if ( !tile[index].is_fg_ramp[1] && (ego_stats.OnPlatform || tile[index].is_platform[1] || tile[index].is_ramp[1] || tile[index].is_ramp_support[1])) {
      ego_stats.OnPlatform = false;
      ego_stats.OnRamp = false;
      ego_stats.midair = true;
      ego_stats.Ducks = false;
      ego_stats.Jumped = true;
      ego_stats.DoubleJump = true;
      ego_stats.Jump_Pressed = true;
      ego_stats.Jump_Timer = JUMP_HEIGHT;
      player.y += size_tile_y;
    }
  }
  if (ego_stats.Jump_Timer > JUMP_HEIGHT){
    ego_stats.Jump_Timer = -1;
  }
  
  // Fire
  if (CTRL.isControlShoot()) {
    // Attack
    if (!ego_stats.NoControl && !ego_stats.OnLadder && !ego_stats.InSlide && !ego_stats.HasGrabbed && ego_stats.ShotTimer > SHOT_INTERVAL) {
      if (ego_stats.active_weapon == eWCloseCombat && ego_stats.attack_combo_counter < 3) {
        // Max combo length currently at 3
        // first punch
        if (ego_stats.attack_combo_counter == 0) {
          ego_stats.anicounter_attack = 0;
          ego_stats.frame_attack = 0;
          ego_stats.ShotTimer = 0;
          ego_stats.attack_combo_counter = 1;
          ego_stats.attack_combo_current = 0;
        }
        // schedule second punch
        else if (ego_stats.attack_combo_counter == 1 && player.Frame > 1 && player.Frame < 4 ) {
          ego_stats.attack_combo_counter ++;
        }
        else if (ego_stats.attack_combo_counter == 2 && player.Frame > 1 && player.Frame < 5 ) {
          ego_stats.attack_combo_counter ++;
        }

        
      }
      
      else {
        if (ego_stats.Ducks) {
          if (CTRL.isControlRight()&&!CTRL.isControlLeft()) BULLET.shoot_player_bullet(1.0, 0.0);
          else if (CTRL.isControlLeft()&&!CTRL.isControlRight()) BULLET.shoot_player_bullet(-1.0, 0.0);
          else {
            if (ego_stats.direction == eTengDirRight) BULLET.shoot_player_bullet(1.0, 0.0);
            else BULLET.shoot_player_bullet(-1.0, 0.0);
          }          
        }
        else {
          // Up right
          if (CTRL.isControlRight() && CTRL.isControlUp()) BULLET.shoot_player_bullet(0.7, -0.7);
          // bottom right
          else if (CTRL.isControlRight() && CTRL.isControlDown()) BULLET.shoot_player_bullet(0.7, 0.7);
          // up left
          else if (CTRL.isControlLeft() && CTRL.isControlUp())BULLET.shoot_player_bullet(-0.7, -0.7);
          // bottom left
          else if (CTRL.isControlLeft() && CTRL.isControlDown())BULLET.shoot_player_bullet(-0.7, 0.7);
          // up
          else if (CTRL.isControlUp()) BULLET.shoot_player_bullet(0.0, -1.0);
          // down
          else if (CTRL.isControlDown()) BULLET.shoot_player_bullet(0.0, 1.0);        
          // right
          else if (CTRL.isControlRight()&&!CTRL.isControlLeft()) BULLET.shoot_player_bullet(1.0, 0.0);
          // left
          else if (CTRL.isControlLeft()&&!CTRL.isControlRight()) BULLET.shoot_player_bullet(-1.0, 0.0);
          
          else {
            if (ego_stats.direction == eTengDirRight) BULLET.shoot_player_bullet(1.0, 0.0);
            else BULLET.shoot_player_bullet(-1.0, 0.0);
          }
        }
      
      }
    }
    
  }
  
  // Duck switch direction
  if (ego_stats.Ducks && CTRL.isControlLeft()) {
    ego_stats.x_accel = 0.0;
    ego_stats.direction = eTengDirLeft;
  }
  else if (ego_stats.Ducks && CTRL.isControlRight()) { 
    ego_stats.x_accel = 0.0;
    ego_stats.direction = eTengDirRight;
  }
  
  // Left right walking
  if (ego_stats.InSlide == 0 && !ego_stats.Ducks && !ego_stats.HasGrabbed && !ego_stats.que_up_ani){ //if not sliding
    if(CTRL.isControlLeft() && !CTRL.isControlRight()) 
    { 
      if (ego_stats.x_speed >= MAX_XSPEED && ego_stats.direction == eTengDirRight) {
        Particle.spawn(IntToFloat(player.x + ego_stats.footwidth), IntToFloat(player.y-4), 0.5, 0.0, ParticleType_Smoke);
      }
      ego_stats.x_accel = -X_ACCEL;
      ego_stats.direction = eTengDirLeft;
      player.Loop = ego_stats.direction;
    }
    else if(CTRL.isControlRight() && !CTRL.isControlLeft())
    { 
      if (ego_stats.x_speed <= -MAX_XSPEED && ego_stats.direction == eTengDirLeft) {
        Particle.spawn(IntToFloat(player.x - ego_stats.footwidth), IntToFloat(player.y-4), -0.5, 0.0, ParticleType_Smoke);
      }    
      ego_stats.x_accel = X_ACCEL;
      ego_stats.direction = eTengDirRight;
      player.Loop = ego_stats.direction;
    }
    else
    {
      ego_stats.x_accel = 0.0;
    }
  }

  
  //INTERACT 
  if (CTRL.isControlInteract() && !use_lock && !ego_stats.midair && !ego_stats.InSlide && !ego_stats.Ducks) {
    if (ego_stats.current_act_id > -1) {
      use_lock = true;
      if (ego_stats.current_action != eTAct_NoAction) {
        player.Loop = ego_stats.direction;
        player.Frame = 0;
        ego_stats.x_speed = 0.0;

        CallRoomScript(ego_stats.current_action);
      }
      else use_lock = false;
    }
  }
  // WALK ON
  if ( !walkOn_lock &&(ego_stats.current_action == eTAct_WalkOnHotspot || ego_stats.current_action == eTAct_WalkOnObject)){
    walkOn_lock = true;
    CallRoomScript(ego_stats.current_action);
  }
  
  // Show Inventory
  if (CTRL.isControlInv()&&!ego_stats.beam  &&!inv_lock && !ego_stats.NoControl && !ego_stats.midair && !ego_stats.InSlide) {
    inv_lock = true;
    TENG_running = false;
    gPlayerStats.Visible=false;
    gInv.Visible = true;
  }
}


export inv_lock;
export use_lock;
export walkOn_lock;
export controls;