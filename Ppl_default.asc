// new module script


import cpeople_types people_types[MAX_PEOPLE];

import cWeapons weapon[eWLastWeapon];
import short people_id[MAX_PEOPLE];
import cpeople people[MAX_PEOPLE];
import short people_index;
import DynamicSprite *Foreground; // Layer 2
import ctile tile[NUM_MAX_TILES];
import int tile_offset_x, tile_offset_y;
import int size_tile_x, size_tile_y;
import int num_tiles_x, num_tiles_y;
import cwaypoint waypoint[MAX_WAYPOINTS];
import short wp_index;
import citems item[MAX_ITEMS];
import ctile_set tile_set;
import bool topdown_mode;


int total(int number) 
{
  if ( number > 0)  return number;
  else              return number*(-1);
}

//*******************************************************************************
//* move_people
//* Moves people around
//*
//*******************************************************************************
static void PPL_default::move(int i)
{
  int l = 0;
  float xmodifier = 1.0;
  float ymodifier = 1.0;
  int left_right_factor = -1;
  int footwidth = 3;
  int tile_index, tile_index_people;
  people[i].OnRamp = false;
  
  if (people[i].midair && !people[i].can_fly) xmodifier = 2.0;
  
  if (people[i].direction == eTengDirLeft)left_right_factor = left_right_factor * (-1);
  
  
  // get tile in front and beneath npc
  tile_index = TILES.get_tile_at ( character[people[i].char_id].x - footwidth * left_right_factor, character[people[i].char_id].y - footwidth, 1, people[i].current_tile );
  tile_index_people = TILES.get_tile_at (character[people[i].char_id].x - footwidth * left_right_factor, character[people[i].char_id].y + footwidth, 1, people[i].current_tile );

  PPL_helper.check_ramp(i, tile_index_people);
  
  // let people move slower on ramps
  if (people[i].OnRamp == true) {
    xmodifier = 2.0;
  }
  
  // apply gravity
  if (!topdown_mode && !people[i].can_fly) PPL_helper.apply_gravity(i, tile_index, tile_index_people);
  
  // WALKING (loop 4 & 5 =dying)
  if ( character[people[i].char_id].Loop != 4 && character[people[i].char_id].Loop != 5 )
  {       
    if (people[i].direction_old != people[i].direction)
      people[i].antishake++;
    else people[i].antishake = 0;
    
    if (people[i].antishake > 2) {
      people[i].timer = 5;
      people[i].antishake = 0;
    }
    
    people[i].direction_old  = people[i].direction;
    
    // move people left/right
    if (people[i].xspeed!=0.0 || people[i].walkto_x!=0) {
      
      if ( people[i].timer == -1 ) {
        
        float delta = IntToFloat (people[i].x) - people[i].xspeed / xmodifier * IntToFloat(left_right_factor);
        delta += people[i].x_remain;
        people[i].x_remain = delta - IntToFloat(FloatToInt(delta, eRoundDown));
        people[i].x = FloatToInt(delta, eRoundDown);
        if (people[i].walkto_x > 0) people[i].walkto_x -= total(FloatToInt(people[i].xspeed));

        int index_itm = ITM.get_item_at (character[people[i].char_id].x - footwidth * left_right_factor, character[people[i].char_id].y- 2 );

        people[i].current_tile = tile_index_people;
             
        int w = 0;
        if (!people[i].ignore_wp) {
          while ( w < wp_index )
          {
            if ( waypoint[w].x == tile[tile_index_people].x[l] && waypoint[w].y == tile[tile_index_people].y[l] )
              people[i].timer = people[i].wait_timer;
            w++;
          }
        }
        
        
        ////////////// turn on obstacles
        if ( (tile[tile_index].is_solid[l] && !people[i].OnRamp && !tile[tile_index].is_ramp[l] ) || (index_itm > -1 && item[index_itm].is_solid )) {

          if (people[i].direction == eTengDirLeft) people[i].direction = eTengDirRight;
          else people[i].direction = eTengDirLeft;            

        }
        ////////////// turn on cliffs if smart enough
        
        else if ((!topdown_mode || !people[i].can_fly) && !tile[tile_index + num_tiles_x].is_solid[l] && people[i].walkto_x == 0 && !people[i].OnRamp) {
          if (!people[i].ignore_cliffs) {
            if (people[i].direction == eTengDirLeft) people[i].direction = eTengDirRight;
            else people[i].direction = eTengDirLeft;
          }
        }
        
        //////////////////
        
        // animate people
        if ( people[i].timer == -1 ) PPL_helper.animate_people(i);
      }
      else
        people[i].timer--;
          
    }
    // move people down
    if ( people[i].direction == eTengDirDown && (people[i].yspeed!=0.0 || people[i].walkto_y!=0))
    {
      if ( people[i].timer == -1 ) {
        if (people[i].walkto_y > 0) {
          float temp_y = COLL.check_walls(character[people[i].char_id], people[i].yspeed / ymodifier, 0.0, i );
          people[i].y += FloatToInt(temp_y) ;
          if (people[i].walkto_y > 0) people[i].walkto_y -= FloatToInt(temp_y);
        }
        else people[i].y += FloatToInt(people[i].yspeed/ ymodifier);
        
        tile_index = TILES.get_tile_at (character[people[i].char_id].x, ( character[people[i].char_id].y + 2 ), 1, people[i].current_tile );
        tile_index_people = TILES.get_tile_at ( character[people[i].char_id].x, character[people[i].char_id].y - 2, 1, people[i].current_tile );
        int index_itm = ITM.get_item_at (character[people[i].char_id].x, (character[people[i].char_id].y +2 ));
        people[i].current_tile = tile_index_people;
        
        if ( tile[tile_index].is_solid[l] || (index_itm > -1 && item[index_itm].is_solid )) {
          people[i].direction = eTengDirUp;
        }   
        
        if ( people[i].timer == -1 ) PPL_helper.animate_people(i); 
      }
      else people[i].timer--;    
    }
    // move people up
    else if ( people[i].direction == eTengDirUp && (people[i].yspeed!=0.0 || people[i].walkto_y!=0))
    {
      if ( people[i].timer == -1 ) {
        if (people[i].walkto_y > 0) {
          float temp_y = COLL.check_walls(character[people[i].char_id], people[i].yspeed / ymodifier, 0.0, i );
          people[i].y -= FloatToInt(temp_y);
          if (people[i].walkto_y > 0) people[i].walkto_y -= FloatToInt(temp_y);

        }
        else people[i].y -= FloatToInt(people[i].yspeed / ymodifier);
        
        tile_index = TILES.get_tile_at (character[people[i].char_id].x, ( character[people[i].char_id].y + 2 )-(INFO.get_char_height(character[people[i].char_id])/3), 1, people[i].current_tile );
        tile_index_people = TILES.get_tile_at ( character[people[i].char_id].x, character[people[i].char_id].y - 2 , 1, people[i].current_tile );
        int index_itm = ITM.get_item_at (character[people[i].char_id].x, ( character[people[i].char_id].y + 2 )-(INFO.get_char_height(character[people[i].char_id])/3));
        people[i].current_tile = tile_index_people;     
        if ( tile[tile_index].is_solid[l] || (index_itm > -1 && item[index_itm].is_solid )) {
          people[i].direction = eTengDirDown;
        }   
        
        if ( people[i].timer == -1 ) PPL_helper.animate_people(i); 
      }
      else people[i].timer--;    
    }

    //switch directions after reaching an end
    if ( people[i].timer == 0)
    {
      if (people[i].walkto_x <= 0) {
        if ( people[i].direction == eTengDirLeft )
          people[i].direction = eTengDirRight;
        else if ( people[i].direction == eTengDirRight )
          people[i].direction = eTengDirLeft;
      }
      else if (people[i].walkto_y <= 0) {
        if (people[i].direction == eTengDirUp)
          people[i].direction = eTengDirDown;
        else if (people[i].direction == eTengDirDown) people[i].direction = eTengDirUp;
      }
      people[i].timer = -1;
    }
    
    
    // Turning?
    
    if ( people[i].timer > -1 && people[i].walkto_x == 0 && people[i].walkto_y == 0)
    {
      if ( people[i].direction == eTengDirLeft && character[people[i].char_id].Loop != eTengDirDown ) {
        character[people[i].char_id].Loop = eTengDirDown;
        people[i].loop = eTengDirDown;
      }
      
      if ( people[i].direction == eTengDirRight && character[people[i].char_id].Loop != eTengDirUp ) {
        character[people[i].char_id].Loop = eTengDirUp;
        people[i].loop = eTengDirUp;
      }
    }		
    
  }

  if (people[i].walkto_x <= 0 && people[i].walkto_start) {
    people[i].walkto_x = 0;
    people[i].xspeed = 0.0;
    if (people[i].walkto_y <= 0) {
      people[i].walkto_start = false;
      people[i].walkto_y = 0;
      people[i].yspeed = 0.0;      
    }
  }
  
  if (people[i].walkto_y <= 0 && people[i].walkto_start) {
    people[i].walkto_y = 0;
    people[i].yspeed = 0.0;
    if (people[i].walkto_x <= 0) {
      people[i].walkto_start = false;
      people[i].walkto_x = 0;
      people[i].xspeed = 0.0;      
    }
  }   
}

//*******************************************************************************
//* process
//*  
//*******************************************************************************
static void PPL_default::process(int index) 
{
  if (people[index].hit_timer == -1 ) {
    if (people[index].is_alarmable) { 
      PPL_helper.check_alarm(index);
      
      if (!people[index].alarmed) PPL_default.move(index);
      
      else {
        if ( people[index].alarm_timer > 0 ) {                
          people[index].alarm_timer--;
          PPL_helper.check_attack(index);
        }
        if ( people[index].alarm_timer == 0 )
        {
          people[index].alarmed = false;
          people[index].alarm_timer = -1;
        }              
      
      }
    }
    else PPL_default.move(index);
  }
  else {
     
              
    if (people[index].direction ==  eTengDirLeft) {
      character[people[index].char_id].Loop = 0;
      people[index].loop = 0;
    }
    else {
      character[people[index].char_id].Loop = 3;
      people[index].loop = 3;            
    }
    character[people[index].char_id].Frame = 1; 
          
  }
}