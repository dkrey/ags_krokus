// new module script
bool runOnce;
bool alert_disconnect;

Joystick *joy;
bool joy_active;

int mapJoyBtn[eJoyLastkey];
int MSGUIbtn;

String joy_name;

export mapJoyBtn;
export joy;


static function MapJoy::Refresh() {
    if (String.IsNullOrEmpty(joy_name)) lblJoyName.Text = "None";
    else lblJoyName.Text = joy_name;
    if (mapJoyBtn[eJoyInteract] < 0) lblJoyInteract.Text = "None";
    else lblJoyInteract.Text = String.Format("Button %d", mapJoyBtn[eJoyInteract]);
    if (mapJoyBtn[eJoyShoot] < 0) lblJoyShoot.Text = "None";
    else lblJoyShoot.Text = String.Format("Button %d", mapJoyBtn[eJoyShoot]);    
    if (mapJoyBtn[eJoyInv] < 0) lblJoyInv.Text = "None";
    else lblJoyInv.Text = String.Format("Button %d", mapJoyBtn[eJoyInv]);     
    if (mapJoyBtn[eJoyPause] < 0) lblJoyPause.Text = "None";
    else lblJoyPause.Text = String.Format("Button %d", mapJoyBtn[eJoyPause]);      
}

static String MapJoy::GetJoyDesc(eJoyBtns theButton)
{
  String result;
  if (mapJoyBtn[theButton] < 0 ) result = "None";
  else result = String.Format("%d", mapJoyBtn[theButton]);
  return result;
}

static String MapJoy::GetJoyName()
{
  String result;
  if (String.IsNullOrEmpty(joy_name)) result = "None";
  else result = joy_name;  
  return result;
}



static function MapJoy::Get_free_joystick()
{
  JoystickRescan();
  int count = JoystickCount();
  int i = 0;
  Joystick *j;
  
  while (i < count)
  {
    j = Joystick.Open(i);
    
    if ((j != null) && j.Valid() && !j.Unplugged()){
      if (joy_active && joy != null && joy.Valid() && j.ID != joy.ID) joy = j;
      else joy = j;
    }
    
    i++;
  }
  if (joy != null) {
    joy_active = true;
    joy_name = JoystickName(joy.ID);
  }
}

//obsolete
static function MapJoy::Get_joysticks()
{
  lbJoyList.Clear();
  int i = 1;
  int joycount = JoystickCount();
  lbJoyList.AddItem("Disabled");
  while (i <= joycount) {
    lbJoyList.AddItem(JoystickName(i));
    i++;
  } 
  if (joy_active && joy != null && joy.Valid()) {
    lbJoyList.SelectedIndex = joy.ID+1;
  }
}
static function MapJoy::Init_joystick() 
{
  if (lbJoyList.SelectedIndex!=0) {
    joy = Joystick.Open(lbJoyList.SelectedIndex);
    joy_active = true;
    joy_name = JoystickName(joy.ID+1);
    gJoySelect.Visible = false;
  }
  else {
    joy_active = false;
    if (joy != null && joy.Valid()) joy.Close();
    joy = null;
    joy_name = "Disabled";
  }
  gJoySelect.Visible = false;
  
  MapJoy.Refresh();
}

static function MapJoy::Get_joy_menu(int selectedItem)
{
  if (joy !=null && joy.Valid()) {
    
    if (selectedItem == 10) MSGUIbtn = eJoyJump;
    else if (selectedItem == 11) MSGUIbtn = eJoyShoot;
    else if (selectedItem == 12) MSGUIbtn = eJoyInteract;
    else if (selectedItem == 13) MSGUIbtn = eJoyInv;
    else if (selectedItem == 14) MSGUIbtn = eJoyPause;

    gJoyPopup.Visible=true;
  }
}

static function MapJoy::Set_button(GUIControl *control) {
  if (joy !=null && joy.Valid()) {
    
    if (control.ID == 0) MSGUIbtn = eJoyInteract;     
    else if (control.ID == 1) MSGUIbtn = eJoyShoot;
    else if (control.ID == 7) MSGUIbtn = eJoyInv;
    else if (control.ID == 8) MSGUIbtn = eJoyPause; 
    gJoyPopup.Visible = true;
  }
  else Display ("No joystick selected.");
}

static bool MapJoy::Save()
{
  int i;
  File* fhandle;
  fhandle = File.Open ("$SAVEGAMEDIR$/joy.map", eFileWrite);
  
  if (fhandle == null) return false;
  
  if (joy_active) fhandle.WriteInt(joy.ID+1);
  else fhandle.WriteInt(0);
  fhandle.WriteInt(sldJoySens.Value);
  while ( i < eJoyLastkey) {
    fhandle.WriteInt(mapJoyBtn[i]);
    i++;
  }
  fhandle.Close();
  return true;
}

static bool MapJoy::Load(bool default_value) 
{
  int i;
  int joy_id, threshold;
  
  File* fhandle;
  
  if (default_value) fhandle = File.Open ("joy.map", eFileRead);
  else {
    if (File.Exists("$SAVEGAMEDIR$/joy.map")) fhandle = File.Open ("$SAVEGAMEDIR$/joy.map", eFileRead);
    else  fhandle = File.Open ("joy.map", eFileRead);
  }
  
  if (fhandle == null) return false;
  
  joy_id = fhandle.ReadInt();
  if (joy_id > 0) {
    if (!String.IsNullOrEmpty(JoystickName(joy_id))) {
      joy = Joystick.Open(joy_id);
      joy_name = JoystickName(joy_id);
      //lbJoyList.SelectedIndex = joy_id;
    }
  }
  sldJoySens.Value = fhandle.ReadInt();
  
  while ( i < eJoyLastkey-1) {
    mapJoyBtn[i] = fhandle.ReadInt();
    i++;
  }
  fhandle.Close();
  return true;
}



function repeatedly_execute()
{
  int i = 0;
  int j = 0;
  
  if (gJoySelect.Visible && !runOnce) {
    runOnce = true;
    
    while (j < eJoyLastkey) {
      mapJoyBtn[j] = -1;
      j++;  
    }
  }
  
  if (gJoyPopup.Visible) 
  {
    if (IsKeyPressed(eKeyEscape)) {
      gJoyPopup.Visible = false;
      MapJoy.Refresh();
    }
    else if (joy !=null && joy.Valid()) {
      while (i < 32) 
      {
        if ( joy.IsButtonDown(i) ) {
          while (j < eJoyLastkey ) {
            if (mapJoyBtn[j] == i) mapJoyBtn[j] = -1;
            j++;
          }
          mapJoyBtn[MSGUIbtn] = i;
          gJoyPopup.Visible = false;
          MapJoy.Refresh();
          i = 32;
        }
        i++;
      }
    }
    else {
      Display ("No joystick selected.");
      gJoyPopup.Visible = false;
    }
  }
}