cSprites spr[RACR_MAX_SPRITES];
int max_sprite_idx;

//*******************************************************************************
//* SPRITES::clear
//* 
//*******************************************************************************
static void SPRITES::clear(int idx) 
{
  spr[idx].active = false;
  spr[idx].sprite_slot = eSpriteNone;
  spr[idx].offset = 0.0;
  spr[idx].destX = 0;
  spr[idx].destY = 0;
  spr[idx].destW = 0;
  spr[idx].destH = 0;  
}


//*******************************************************************************
//* SPRITES::clear_all
//* 
//*******************************************************************************
static void SPRITES::clear_all()
{
  int i=0;
  while (i < max_sprite_idx ) {
    SPRITES.clear(i);
    i++;
  }
  max_sprite_idx = 0;
}


//*******************************************************************************
//* SPRITES::get_free
//* 
//*******************************************************************************
static int SPRITES::get_free() 
{
  int i=0;
  while (i<RACR_MAX_SPRITES) {
    if (!spr[i].active) return i;
    i++;
  }
  return -1;
}

//*******************************************************************************
//* SPRITES::get_sprite_slot
//* 
//*******************************************************************************
static int SPRITES::get_sprite_slot(int idx) 
{
  return spr[idx].sprite_slot;
}

//*******************************************************************************
//* SPRITES::get_offset
//* 
//*******************************************************************************
static float SPRITES::get_offset(int idx) 
{
  return spr[idx].offset;
}



//*******************************************************************************
//* SPRITES::add
//* 
//*******************************************************************************
static int SPRITES::add(eSpriteSlot sprite_slot, float offset)
{
  int idx = SPRITES.get_free();
  max_sprite_idx = Util.max_i(idx, max_sprite_idx);
  
  spr[idx].active       = true;
  spr[idx].offset       = offset;
  spr[idx].sprite_slot  = sprite_slot;
  spr[idx].destX = 0;
  spr[idx].destY = 0;
  spr[idx].destW = 0;
  spr[idx].destH = 0;  
  
  return idx;
}

//*******************************************************************************
//* SPRITES::prepare
//* 
//*******************************************************************************
static void SPRITES::prepare(int idx, int roadWidth, int width, float scale, float sprite_scale,  int sprite_slot, int destX, int destY,  float offsetX, float offsetY)
{
  int spriteW = Game.SpriteWidth[sprite_slot];
  int spriteH = Game.SpriteHeight[sprite_slot];

  int destW  = FloatToInt((IntToFloat(spriteW) * scale * IntToFloat(width) / 2.0) * (sprite_scale * IntToFloat(roadWidth)));
  int destH  = FloatToInt((IntToFloat(spriteH) * scale * IntToFloat(width) / 2.0) * (sprite_scale * IntToFloat(roadWidth)));
  

  destX = destX + FloatToInt((IntToFloat(destW) * (offsetX)));
  destY = destY + FloatToInt((IntToFloat(destH) * (offsetY)));
  
  spr[idx].destX = destX;
  spr[idx].destY = destY;
  spr[idx].destW = destW;
  spr[idx].destH = destH;
  
  
}

//*******************************************************************************
//* SPRITES::get_destX
//* 
//*******************************************************************************
static int SPRITES::get_destX(int idx) 
{
  return spr[idx].destX;
}
//*******************************************************************************
//* SPRITES::get_destY
//* 
//*******************************************************************************
static int SPRITES::get_destY(int idx) 
{
  return spr[idx].destY;
}
//*******************************************************************************
//* SPRITES::get_destW
//* 
//*******************************************************************************
static int SPRITES::get_destW(int idx) 
{
  return spr[idx].destW;
}
//*******************************************************************************
//* SPRITES::get_destH
//* 
//*******************************************************************************
static int SPRITES::get_destH(int idx) 
{
  return spr[idx].destH;
}

export spr;