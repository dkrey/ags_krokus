cSegment_point p1[RACR_MAX_SEGMENTS];
cSegment_point p2[RACR_MAX_SEGMENTS];
cSegment segments[RACR_MAX_SEGMENTS];

cCars cars[RACR_MAX_SEGMENTS];

int segment_cnt;
int seg_point_cnt;


import cRacerVars rv;
import cRoad road;

//*******************************************************************************
//* Scegment and Point funcions
//* 
//*******************************************************************************
//*******************************************************************************
//* cSegment::add
//* 
//*******************************************************************************
void cSegment::add(eColorType color_type)
{
  this.color_type = color_type;
  this.curve = 0.0;
  this.item_offset = 0.0;
  this.item_sprite = 0;
  segment_cnt ++;
}

//*******************************************************************************
//* cSegment::clear
//* 
//*******************************************************************************
void cSegment::clear()
{
  int i;
  this.color_type = 0;
  this.curve = 0.0;
  this.item_offset = 0.0;
  this.item_sprite = 0;
  this.item_destX = 0;
  this.item_destY = 0;
  this.item_destW = 0;
  this.item_destH = 0;
  
  while (i < this.car_cnt) 
  {
    this.cars_idx[i] = 0;
    i++;
  }
  this.car_cnt = 0;
  this.clip = 0;
  
  i = 0;
  while (i < this.sprite_cnt) 
  {
    this.sprites_idx[i] = 0;
    i++;
  }
  this.sprite_cnt = 0;
}

//*******************************************************************************
//* cSegment::add_sprite
//* 
//*******************************************************************************
void cSegment::add_sprite(eSpriteSlot sprite_slot, float offset)
{
  this.sprites_idx[this.sprite_cnt] = SPRITES.add(sprite_slot, offset);
  this.sprite_cnt++;
  
}

//*******************************************************************************
//* cSegment::add_item
//* 
//*******************************************************************************
void cSegment::add_item(eSpriteSlot sprite_slot, float offset)
{
  this.item_sprite = sprite_slot;
  this.item_offset = offset;
  
}
//*******************************************************************************
//* cSegment::add_item
//* 
//*******************************************************************************
void cSegment::prepare_item(int roadWidth, int width, float scale, float sprite_scale, int destX, int destY,  float offsetX, float offsetY)
{
  int spriteW = Game.SpriteWidth[this.item_sprite];
  int spriteH = Game.SpriteHeight[this.item_sprite];

  int destW  = FloatToInt((IntToFloat(spriteW) * scale * IntToFloat(width) / 2.0) * (sprite_scale * IntToFloat(roadWidth)));
  int destH  = FloatToInt((IntToFloat(spriteH) * scale * IntToFloat(width) / 2.0) * (sprite_scale * IntToFloat(roadWidth)));
  

  destX = destX + FloatToInt((IntToFloat(destW) * (offsetX)));
  destY = destY + FloatToInt((IntToFloat(destH) * (offsetY)));
  
  this.item_destX = destX;
  this.item_destY = destY;
  this.item_destW = destW;
  this.item_destH = destH;
  
}

//*******************************************************************************
//* Segment_point::add
//* 
//*******************************************************************************
void cSegment_point::add()
{
  this.world_x = 0.0;
  this.world_y = 0.0;
  this.world_z = 0.0;
  this.screen_x = 0;
  this.screen_y = 0;
  this.screen_w = 0;
  this.screen_scale = 0.0;
  
  seg_point_cnt++;

}


//*******************************************************************************
//* Segment_point::remove
//* 
//*******************************************************************************
void cSegment_point::clear()
{
  this.world_x = 0.0;
  this.world_y = 0.0;
  this.world_z = 0.0;
  this.screen_x = 0;
  this.screen_y = 0;
  this.screen_w = 0;
  this.screen_scale = 0.0;
  this.camera_x = 0.0;
  this.camera_y = 0.0;
  this.camera_z = 0.0;
  this.camera_scale = 0.0;

}

//*******************************************************************************
//* Segment_point::set_world
//* 
//*******************************************************************************
void cSegment_point::set_world  (float x, float y, float z)
{
  this.world_x = x;
  this.world_y = y;
  this.world_z = z;
  
}
//*******************************************************************************
//* Segment_point::set_screen
//* 
//*******************************************************************************
void cSegment_point::set_screen(int x, int y, int w, float scale )
{
  this.screen_x = x;
  this.screen_y = y;
  this.screen_w = w;
  this.screen_scale = scale;
  
}
//*******************************************************************************
//* Segment_point::set_camera
//* 
//*******************************************************************************
void cSegment_point::set_camera(float x, float y, float z, float scale )
{
  this.camera_x = x;
  this.camera_y = y;
  this.camera_z = z;
  this.camera_scale = scale;
  
}
//*******************************************************************************
//* Segment_point::project
//* 
//*******************************************************************************
void cSegment_point::project(float cameraX, float cameraY, float cameraZ, float cameraDepth, int width, int height, int roadWidth)
{
  this.camera_x = this.world_x - cameraX;
  this.camera_y = this.world_y - cameraY;
  this.camera_z = this.world_z - cameraZ;
  if (this.camera_z != 0.0 )
    this.screen_scale = cameraDepth / this.camera_z;
  else this.screen_scale = cameraDepth;
  
  this.screen_x     = FloatToInt((IntToFloat(width)/2.0)   + (this.screen_scale * this.camera_x  * IntToFloat(width/2)));
  this.screen_y     = FloatToInt((IntToFloat(height)/2.0)  - (this.screen_scale * this.camera_y  * IntToFloat(height/2)));
  this.screen_w     = FloatToInt(                            (this.screen_scale * IntToFloat(roadWidth * height/2)));
  
  
}

//*******************************************************************************
//* Segment_point::copy
//* 
//*******************************************************************************
void cSegment_point::copy(float cameraX, float cameraY, float cameraZ, float screen_scale, int screen_x, int screen_y, int screen_w)
{
  this.camera_x = cameraX;
  this.camera_y = cameraY;
  this.camera_z = cameraZ;
  this.screen_scale = screen_scale;
  this.screen_x = screen_x;
  this.screen_y = screen_y;
  this.screen_w = screen_w;
}

//*******************************************************************************
//* RACR static funcions
//* 
//*******************************************************************************
static float TRACK::last_y() {
  float result;
  int seg_idx;
  
  if (rv.segment_cnt == 0) result = 0.0;
  else {
    seg_idx = rv.segment_cnt-1;
    result = p2[seg_idx].world_y;
  }
  return result;
}
//*******************************************************************************
//* RACR::add_segment
//* 
//*******************************************************************************
static void TRACK::add_segment(float curve, float y) 
{ 
  eColorType color_type;
  int n = rv.segment_cnt;
  
  int tmp_color = n / rv.rumbleLength % 2;
  
  if (tmp_color > 0) color_type = eColorDark;
  else color_type = eColorLight;
  
  segments[n].add(color_type);
  segments[n].curve = curve;
  
  p1[n].add();
  p1[n].set_world(0.0, TRACK.last_y(), IntToFloat(n*rv.segmentLength));
  p2[n].add();
  p2[n].set_world(0.0, y, IntToFloat((n+1)*rv.segmentLength));
  
  rv.segment_cnt++;
}

//*******************************************************************************
//* RACR::add_road
//* 
//*******************************************************************************
static void TRACK::add_road(int enter, int hold, int leave, int curve, int y) 
{ 
  int n;
  float fcurve = IntToFloat(curve) / 100.0;
  float y2 = IntToFloat(y) / 10.0;
  float startY = TRACK.last_y();
  float endY = startY + y2 * IntToFloat(rv.segmentLength);
  float total = IntToFloat (enter + hold + leave);
  
  n = 0;
  while ( n < enter ) {
    TRACK.add_segment(Util.easeIn(0.0, fcurve, IntToFloat(n)/IntToFloat(enter)),  Util.easeInOut(startY, endY, IntToFloat(n)/total));
    n++;
  }
  
  n = 0;
  while ( n < hold ) {
    TRACK.add_segment(fcurve, Util.easeInOut(startY, endY, IntToFloat(enter+n)/total));    
    n++;
  }  
  
  n = 0;
  while ( n < leave ) {
    TRACK.add_segment(Util.easeInOut(fcurve, 0.0, IntToFloat(n)/IntToFloat(leave)), Util.easeInOut(startY, endY, IntToFloat(enter+hold+n)/total));    
    n++;
  }   

}

//*******************************************************************************
//* RACR::add_straight
//* 
//*******************************************************************************
static void TRACK::add_straight(int num)
{
  if (num == 0) num = road.length_medium;
  TRACK.add_road(num, num, num, 0, 0);
}

//*******************************************************************************
//* RACR::add_curve
//* 
//*******************************************************************************
static void TRACK::add_curve(int num, int curve)
{
  if (num == 0)   num = road.length_medium;
  if (curve == 0) curve = road.curve_medium;
  TRACK.add_road(num, num, num, curve, 0);
}




//*******************************************************************************
//* TRACK::add_sprite
//* 
//*******************************************************************************
static void TRACK::add_sprite(int n, eSpriteSlot sprite_slot, float offset)
{
  int i = segments[n].sprite_cnt;
  if (i < RACR_MAX_OBJ_PER_SEG) {
    segments[n].sprites_idx[i] = SPRITES.add(sprite_slot, offset);
    segments[n].sprite_cnt++;
  }
  
}

//*******************************************************************************
//* TRACK::add_item
//* 
//*******************************************************************************
static void TRACK::add_item(int n, eSpriteSlot sprite_slot, float offset)
{  
  segments[n].add_item(sprite_slot, offset);  
}

//*******************************************************************************
//* TRACK::add_car
//* 
//*******************************************************************************
static void TRACK::add_car(int n, eCarType cartype, float offset, float z, float speed)
{
  int i = segments[n].car_cnt;
  if (i < RACR_MAX_OBJ_PER_SEG) {
    segments[n].cars_idx[i] = CARS.add(cartype, offset, z, speed);
    segments[n].car_cnt++;
    CARS.set_segment(segments[n].cars_idx[i], n);
  }
}

static void TRACK::move_car_to_segment(int n_src, int n_dst, int car_idx)
{
  int i = 0;
  int dst_max_car;
  
  // Detach car index from old segment
  while (i <= segments[n_src].car_cnt)
  {
    if (car_idx == segments[n_src].cars_idx[i]) {
      segments[n_src].cars_idx[i] = 0;
      if (car_idx == segments[n_src].car_cnt ) segments[n_src].car_cnt --;    
      i = segments[n_src].car_cnt+1;
    }
    i++;
  }
  

  // Add car index to new segment
  i = 0;
  dst_max_car = segments[n_dst].car_cnt;
  
  while (i < RACR_MAX_OBJ_PER_SEG) {
    
    if (segments[n_dst].cars_idx[i] == 0) {
      segments[n_dst].cars_idx[i] = car_idx;
      if (i == dst_max_car) segments[n_dst].car_cnt++;
      CARS.set_segment(car_idx, n_dst);
      i = RACR_MAX_OBJ_PER_SEG;
    }
    i++;
  }
  
}

//*******************************************************************************
//* RACR::add_scurves
//* 
//*******************************************************************************
static void TRACK::add_scurves()
{
  TRACK.add_sprite(segment_cnt, eSpriteCurveLeft, 0.7);
  TRACK.add_road(road.length_medium, road.length_medium, road.length_medium, -road.curve_easy, 0);
  TRACK.add_sprite(segment_cnt, eSpriteCurveRight, -0.7);
  TRACK.add_road(road.length_medium, road.length_medium, road.length_medium,  road.curve_medium, 0);
  TRACK.add_sprite(segment_cnt, eSpriteCurveRight, -0.7);
  TRACK.add_road(road.length_medium, road.length_medium, road.length_medium,  road.curve_easy, 0);
  TRACK.add_sprite(segment_cnt, eSpriteCurveLeft, 0.7);
  TRACK.add_road(road.length_medium, road.length_medium, road.length_medium, -road.curve_easy, 0);
  TRACK.add_sprite(segment_cnt, eSpriteCurveLeft, 0.7);
  TRACK.add_road(road.length_medium, road.length_medium, road.length_medium, -road.curve_medium, 0);
  
}


//*******************************************************************************
//* RACR::add_hill
//* 
//*******************************************************************************
static void TRACK::add_hill(int num, int height) 
{
  TRACK.add_road(num, num, num, 0, height);
}

//*******************************************************************************
//* RACR::add_downhill_to_end
//* 
//*******************************************************************************
static void TRACK::add_downhill_to_end(int num) 
{
  if (num == 0) num = 100;
  TRACK.add_road(num, num, num, -road.curve_easy, -FloatToInt(TRACK.last_y()/IntToFloat(rv.segmentLength)));
}

//*******************************************************************************
//* TRACK::add_smooth_hills
//* 
//*******************************************************************************
static void TRACK::add_smooth_hills(int num, int height)
{
  if (num == 0) num = road.length_medium;
  if (height == 0 ) height = road.hill_low;
  TRACK.add_road(num, num, num,  0,  height);
  TRACK.add_road(num, num, num,  0, -height/2);
  
  TRACK.add_sprite(segment_cnt, eSpriteCurveLeft, 0.7);
  TRACK.add_road(num, num, num,  -road.curve_easy,  height);
  TRACK.add_road(num, num, num,  0, -height/2);
  TRACK.add_road(num, num, num,  0,  0);
  TRACK.add_sprite(segment_cnt, eSpriteCurveRight, -0.7);
  TRACK.add_road(num, num, num,  road.curve_easy,  -height/2);
  TRACK.add_road(num, num, num,  0,  -height/2);  
}

//*******************************************************************************
//* TRACK::find_segment_index
//* 
//*******************************************************************************
static int TRACK::find_segment_index(int z) 
{ 
  int result = z / rv.segmentLength % rv.segment_cnt;
  //int result = FloatToInt( Util.fMod(z /  IntToFloat(rv.segmentLength), IntToFloat(rv.segment_cnt)));
  return result;
}


//*******************************************************************************
//* TRACK::add_random_mines
//* 
//*******************************************************************************
static void TRACK::add_random_mines(int amount, int starting_seg,  int ending_seg)
{
  int i,  n, z, cartype, seg_idx;
  float offset, speed;
  
  if (ending_seg == 0) ending_seg = rv.segment_cnt; 
  
  amount = Util.clampInt(amount, 0, RACR_MAX_CARS);
  n=0;
  
  while (n < amount) {
    i = 0;
    offset = Util.randomFloat(1.0) * 0.8;
    
    int rnd = Random(1);
    if (rnd >0) offset = offset * (-1.0);
    
    while (true) {
      z = Random(rv.segment_cnt);
      if (z > starting_seg && z < ending_seg) break;
    }

    speed  = 0.0; //rv.maxSpeed/4.0 + Util.randomFloat(1.0) * rv.maxSpeed/2.0;
    
    seg_idx = TRACK.find_segment_index(z * rv.segmentLength );
    
    TRACK.add_car(seg_idx, eCarMine, offset, IntToFloat(z * rv.segmentLength), speed);    
    n++;
  } 
}

//*******************************************************************************
//* TRACK::add_random_mines
//* 
//*******************************************************************************
static void TRACK::add_random_waves(int amount, int starting_seg)
{
  int i,  n, z, cartype, seg_idx;
  float offset, speed;
  
  amount = Util.clampInt(amount, 0, RACR_MAX_CARS);
  n=0;
  
  while (n < amount) {
    i = 0;
    offset = Util.randomFloat(1.0) * 0.8;
    
    int rnd = Random(1);
    if (rnd >0) offset = offset * (-1.0);
    
    while (true) {
      z = Random(rv.segment_cnt);
      if (z > starting_seg) break;
    }

    speed  = rv.maxSpeed/4.0 + Util.randomFloat(1.0) * rv.maxSpeed/2.0;
    
    seg_idx = TRACK.find_segment_index(z * rv.segmentLength );
    
    TRACK.add_car(seg_idx, eCarWave, offset, IntToFloat(z * rv.segmentLength), speed);    
    n++;
  }   
}

//*******************************************************************************
//* TRACK::add_random_cars
//* 
//*******************************************************************************
static void TRACK::add_random_cars(int amount)
{
  int n, cartype, seg_idx;
  float offset, z, speed;
  
  amount = Util.clampInt(amount, 0, RACR_MAX_CARS);
  n=0;
  
  while (n < amount) {
    offset = Util.randomFloat(1.0) * 0.8;
    
    int rnd = Random(1);
    if (rnd >0) offset = offset * (-1.0);
    
    z =  IntToFloat(FloatToInt((Util.randomFloat(2.0) * IntToFloat(rv.segment_cnt)) * IntToFloat(rv.segmentLength), eRoundNearest));
    z = Util.clampFloat(z, 0.0, IntToFloat(rv.segment_cnt * rv.segmentLength));

    rnd = Random(1);
    if (rnd > 0) cartype = eCarMine;
    else cartype = eCarWave;
    
    speed  = rv.maxSpeed/4.0 + Util.randomFloat(1.0) * rv.maxSpeed/2.0;
    
    seg_idx = TRACK.find_segment_index(FloatToInt(z));
    
    TRACK.add_car(seg_idx, cartype, offset, z, speed);    
    n++;
  }
  
}

//*******************************************************************************
//* TRACK::add_random_trees
//* 
//*******************************************************************************
static void TRACK::add_random_decoration(int amount)
{
  /*
  int n, sprite_slot, seg_idx;
  float offset, z, speed;
  
  int deco[6];
  
  deco[0] = 95;
  deco[1] = 96;
  deco[2] = 97;
  deco[3] = 99;
  deco[4] = 100;
  deco[5] = 101;

  
  
  amount = Util.clampInt(amount, 0, RACR_MAX_SPRITES);
  n=0;
  
  while (n < amount) {
    offset = (Util.randomFloat(1.0) * 0.8) +0.75;
    
    int rnd = Random(1);
    if (rnd >0) offset = offset * (-1.0);
    
    z =  IntToFloat(FloatToInt((Util.randomFloat(5.0) * IntToFloat(rv.segment_cnt)) * IntToFloat(rv.segmentLength), eRoundNearest));
    z = Util.clampFloat(z, 0.0, IntToFloat(rv.segment_cnt * rv.segmentLength));
    
    rnd = Random(5);
    
    sprite_slot = deco[rnd];
    
    seg_idx = TRACK.find_segment_index(FloatToInt(z));
    TRACK.add_sprite(seg_idx, sprite_slot, offset);
    
    n++;
  }
  */
  
  int i,  n, z, sprite_slot, seg_idx;
  float offset;
  
  int deco[7];

  deco[0] = 95;
  deco[1] = 96;
  deco[2] = 97;
  deco[3] = 99;
  deco[4] = 100;
  deco[5] = 101;
  deco[6] = 94;
  
  amount = Util.clampInt(amount, 0, RACR_MAX_SPRITES);
  n=0;
  
  while (n < amount) {
    i = 0;
    offset =(Util.randomFloat(1.0) * 0.8) +0.75;
    
    int rnd = Random(1);
    if (rnd >0) offset = offset * (-1.0);
    
    z = Random(rv.segment_cnt);

    rnd = Random(6);
    
    sprite_slot = deco[rnd];
    
    
    seg_idx = TRACK.find_segment_index(z * rv.segmentLength );
    
    TRACK.add_sprite(seg_idx, sprite_slot, offset);    
    n++;
  }  
}

//*******************************************************************************
//* TRACK::add_random_presents
//* 
//*******************************************************************************
static void TRACK::add_random_presents(int amount)
{
  int n, sprite_slot, seg_idx;
  float offset, z, speed;
  
  amount = Util.clampInt(amount, 0, RACR_MAX_SPRITES);
  n=0;
  
  while (n < amount) {
    offset = Util.randomFloat(1.0) * 0.8;
    
    int rnd = Random(1);
    if (rnd >0) offset = offset * (-1.0);
    
    z =  IntToFloat(FloatToInt((Util.randomFloat(2.0) * IntToFloat(rv.segment_cnt)) * IntToFloat(rv.segmentLength), eRoundNearest));
    z = Util.clampFloat(z, 0.0, IntToFloat(rv.segment_cnt * rv.segmentLength));

    seg_idx = TRACK.find_segment_index(FloatToInt(z));
    
    TRACK.add_item(seg_idx, eSpritePresent, offset);
   
    n++;
  }
}
//*******************************************************************************
//* TRACK::update_car_offset aka. steering AI
//* 
//*******************************************************************************
static float TRACK::update_car_offset(int n, int oldSegment, int playerSegment, float playerW)
{
  int i, j, seg_idx, otherCar, lookahead;
  float otherCarW, otherCarX, carW, carX,  dir;
    

  int car_sprite = CARS.get_sprite_slot(n);
  int car_seg_idx = oldSegment;
  float car_speed = CARS.get_speed(n);
  float car_offset = CARS.get_offset(n);

  int otherCar_sprite;
  float otherCar_speed;
  float otherCar_offset;  
  float result = 0.0;
  
  carW = IntToFloat(CARS.get_destW(n));//(IntToFloat(Game.SpriteWidth[car_sprite]) * rv.sprite_scale);
  carX = IntToFloat(CARS.get_destX(n));
  // optimization, dont bother steering around other cars when 'out of sight' of the player
  if ((car_seg_idx - playerSegment) > rv.drawDistance) {
    return 0.0;
  }
  
  i = 1;
  lookahead = 20;
  while (i < lookahead) 
  {
   seg_idx = (car_seg_idx + i) % rv.segment_cnt;
    
    // check for player
    if ((seg_idx == playerSegment) && (car_speed > rv.speed) && (Util.overlap(IntToFloat(rv.destX), IntToFloat(rv.destW), carX, carW, 1.2))) {

      if (rv.playerX > 0.5)
        dir = -1.0;
      else if (rv.playerX < -0.5)
        dir = 1.0;
      else {
        if (car_offset > rv.playerX) dir = 1.0;
        else dir = -1.0;
      }
      // the closer the cars (smaller i) and the greated the speed ratio, the larger the offset
      result = (dir * 1.0/IntToFloat(i)) * ((car_speed - rv.speed) / rv.maxSpeed);
      result = result / 10.0;
      i = lookahead;
    }
    
    // Check other cars
    j = 0;
    while (j < segments[seg_idx].car_cnt) {
      otherCar = segments[seg_idx].cars_idx[j];
      
      otherCar_sprite = CARS.get_sprite_slot(otherCar);
      otherCarW = IntToFloat(CARS.get_destW(otherCar));
      otherCarX = IntToFloat(CARS.get_destX(otherCar));
      
      otherCar_speed = CARS.get_speed(otherCar);
      otherCar_offset = CARS.get_offset(otherCar);      
      
      if ((car_speed > otherCar_speed) && Util.overlap(carX, carW, otherCarX, otherCarW, 1.2)) {
        if (otherCar_offset > 0.5)
          dir = -1.0;
        else if (otherCar_offset < -0.5)
          dir = 1.0;
        else {
          if (car_offset > otherCar_offset) dir = 1.0;
          else dir = -1.0;
        }
        result = (dir * 1.0/IntToFloat(i)) * ((car_speed - otherCar_speed)/ rv.maxSpeed);
        result = result / 10.0;
        j = segments[seg_idx].car_cnt;
      }      
      j++;
    }
    
    i++;
  }

  // if no cars ahead, but somehow ended up off road, then steer back on
  if (car_offset +result < -0.6)
    return 0.1;
  else if (car_offset +result > 0.6)
    return -0.1;
  else
  
    return result;
    
}

//*******************************************************************************
//* TRACK::update_cars
//* 
//*******************************************************************************
static void TRACK::update_cars(float dt, int playerSegment)
{
  int n = 0, oldSegment, newSegment;
  float temp_offset, temp_z, temp_percent;
  int car_cnt = CARS.get_car_count();

  while (n < car_cnt) {
    if (CARS.is_active(n)) {
      
      if (CARS.is_dead(n)) {
        oldSegment = CARS.get_segment(n);

        int i = 0;
        // Detach car index from old segment
        while (i <= segments[oldSegment].car_cnt)
        {
          if (n == segments[oldSegment].cars_idx[i]) {
            segments[oldSegment].cars_idx[i] = 0;
            if (n == segments[oldSegment].car_cnt ) segments[oldSegment].car_cnt --;    
            i = segments[oldSegment].car_cnt+1;
          }
          i++;
        }

        CARS.clear(n);
      }
      else {
        oldSegment  = CARS.get_segment(n);

        temp_offset  = CARS.get_offset(n) + TRACK.update_car_offset(n, oldSegment, playerSegment, rv.playerW);
        
        // Limit car offset
        if (temp_offset > -0.6 && temp_offset < 0.6)
          CARS.set_offset(n, temp_offset);
        
        temp_z = Util.increase(CARS.get_z(n), dt * CARS.get_speed(n), IntToFloat(rv.trackLength));
        CARS.set_z(n, temp_z);
        
        // useful for interpolation during rendering phase
        temp_percent = Util.percentRemaining(CARS.get_z(n), IntToFloat(rv.segmentLength));
        CARS.set_percent(n, temp_percent);
     
        newSegment  = TRACK.find_segment_index(FloatToInt(temp_z));
        
        
        if (oldSegment != newSegment) TRACK.move_car_to_segment(oldSegment, newSegment, n);
      }

    }
    n++;
  }  
}

//*******************************************************************************
//* TRACK::demo_level
//* 
//*******************************************************************************
static void TRACK::demo_level() 
{
  
  eColorType color_type;
  
  int n = 0;
  TRACK.add_straight(road.length_short);

  TRACK.add_smooth_hills(0, 0);
  TRACK.add_scurves();

  segments[110].color_type = eColorAllWhite;
  segments[111].color_type = eColorAllWhite;
  
  TRACK.add_random_cars(15);
  
  TRACK.add_sprite(80, 94, -1.0);
  TRACK.add_sprite(100, 94,  -1.0);
  TRACK.add_sprite(120, 94,  -1.0);
  TRACK.add_sprite(140, 94, -1.0);
  TRACK.add_sprite(140, 94, -1.5);
  
  TRACK.add_sprite(80, 94,  1.0);
  TRACK.add_sprite(100, 94,  1.0);
  TRACK.add_sprite(120, 94, 1.0);
  TRACK.add_sprite(140, 94, 1.0);
  TRACK.add_sprite(140, 94,  1.5);
  
  TRACK.add_sprite(110, 94,  -0.8);  
  TRACK.add_sprite(110, 94,  0.7);
  
  TRACK.add_sprite(250, 94, -1.0);

  //TRACK.add_sprite(1500, eSpriteBill,  -1.2);  
  //TRACK.add_sprite(140, 98, -0.5);  
  TRACK.add_random_decoration(100);
  
  rv.trackLength = rv.segment_cnt * rv.segmentLength;  

}

export p1, p2, segments;
export segment_cnt;
export seg_point_cnt;