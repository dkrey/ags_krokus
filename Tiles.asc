// new module script
int tileset_sprite;
int tileset_number;
int size_tile_x, size_tile_y;
int tile_offset_x, tile_offset_y;
short tile_limit_x, tile_limit_y;
int num_tiles_x, num_tiles_y;
int tile_scrolling_edge_h, tile_scrolling_edge_v;
int num_different_tiles;
ctile_sprites tile_sprites[NUM_MAX_SPRITES];
DrawingSurface *BackupSurface;
DynamicSprite *Foreground; // Layer 2
DynamicSprite *TileRaster;
String tileTypes[TILE_TYPES];
ctile_set tile_set;

int mapwidth;
int mapheight;

//this needs to be last!
ctile tile[NUM_MAX_TILES];

import bool frame_drop;




//*******************************************************************************
//* split_tilecode
//* splits the number from the tlc file
//*
//*******************************************************************************
static int TILES::split_tilecode (int what_mode, int the_code) 
{
  
  /*
  the code: 65535
  first two digits: view number (own array)
  third digit: frames (max 9)
  last two digits: attributes
  */
  
  String temp = String.Format("%d", the_code);
  
  if (what_mode == eCodepartLoop) {   
    if      (temp.Length < 4)   temp = "0";
    else if (temp.Length < 5 )  temp = temp.Substring(0, 1);
    else                        temp = temp.Substring(0, 2);
  }
  else if (what_mode == eCodepartFlag) {
    if   (temp.Length < 3)      temp = "0";
    else                        temp = temp.Substring(temp.Length-3, 1);
  }
  else if (what_mode == eCodepartAttrib) {
    if      (temp.Length < 1)   temp = "0";
    else if (temp.Length < 2 )  temp = temp.Substring(temp.Length-1, 1);
    else                        temp = temp.Substring(temp.Length-2, 2);
  }
  else temp = "0";
  
  return temp.AsInt;
}


//*******************************************************************************
//* init_tile_sprite
//*
//*******************************************************************************
static function TILES::clear_tile_sprites() 
{
  int i, j;
  
  while (i<NUM_MAX_SPRITES) {
    if (tile_sprites[i].spr!=null) {
      tile_sprites[i].spr.Delete();
      tile_sprites[i].spr = null;
    }
    tile_sprites[i].code = 0;
    tile_sprites[i].frames_in_use = 0;
    tile_sprites[i].ani_delay = 0;
    tile_sprites[i].ani_delay_counter = 0;
    
    while (j<MAX_FRAME_TILE) {
      tile_sprites[i].frm_speed[j] = 0;
      j++;
    } 
    
    j = 0;
    i++;
  } 
  
}

//*******************************************************************************
//* init_tile_sprites
//*
//*******************************************************************************
static void TILES::init_tile_sprites(int sprite_slot) 
{
  TileRaster = DynamicSprite.CreateFromExistingSprite(tile_set.raster, true);
  TileRaster.Crop(0, 0, size_tile_x, size_tile_y);

  // Create TileImages
  DynamicSprite *tile_strip = DynamicSprite.CreateFromExistingSprite(tileset_sprite, true);
  DrawingSurface *strip_surf = tile_strip.GetDrawingSurface();


  int max_tile_spr_x = tile_strip.Width / size_tile_x;
  int max_tile_spr_y = tile_strip.Height / size_tile_y;
  int i = 0;
  int j = 0;
  int tilespr_idx;   
  
  while (j < max_tile_spr_y) {
    
    while (i < max_tile_spr_x) {
      tilespr_idx = j * max_tile_spr_x + i;
      if (tilespr_idx < NUM_MAX_SPRITES) {
        tile_sprites[tilespr_idx].spr = DynamicSprite.CreateFromDrawingSurface(strip_surf, i * size_tile_x, j*size_tile_y, size_tile_x, size_tile_y);
      }
      i++;
    }
    j++;
  }
  num_different_tiles = tilespr_idx +1 ;
  strip_surf.Release();
  tile_strip.Delete();
}

//*******************************************************************************
//* init_tile_sets
//* Define sprite slots per level
//*
//*******************************************************************************
static function TILES::init_tile_sets (int level) 
{
  tileTypes[0]                  = "nothing";
  tileTypes[eTA_solid_only]     = "solid";
  tileTypes[eTA_solid_destruct] = "destructable";
  tileTypes[eTA_solid_bonus]    = "bonus";
  tileTypes[eTA_solid_platform] = "semisolid";
  tileTypes[eTA_solid_ramp]     = "ramp";
  tileTypes[eTA_ramp_support]   = "ramp support";
  tileTypes[eTA_ladder]         = "ladder";
  tileTypes[eTA_solid_ladder]   = "ladder end";
  tileTypes[eTA_foreground_ramp]= "FG ramp";
  tileTypes[eTA_solid_deadly]   = "solid deadly";
  tileTypes[eTA_deadly]         = "deadly";
  tileTypes[eTA_water_surf]     = "water";
  tileTypes[eTA_ramp_ceiling]   = "ceiling ramp";
  tileTypes[eTA_50transparent]    = "50transparent";
  
  // generic sprites
  tile_set.marker                = 51;
  tile_set.raster                = 376;
  tile_set.hitoverlay            = 377;
  tile_set.blank                 = 22;
  
  
  // level gfx
  if (level == 1) 
  {
    tile_set.tile_view           = 5;
    tile_set.item_view           = 6;    
    tile_set.explode_particle    = 13;   
    tile_set.empty_bonus         = 56;
    tile_set.platform_hori       = 7;  
    tile_set.platform_vert       = 7;
    
    tileset_number = 1;
  }
  else {
    Display ("Invalid Tile_Set - using default");
    TILES.init_tile_sets(1);
  }
}


//*******************************************************************************
//* get_tileset_number
//*
//*******************************************************************************
static int TILES::get_tileset_number() 
{
  return tileset_number;
}

//*******************************************************************************
//* get_tiletype_number
//*
//*******************************************************************************
static int TILES::get_tiletype_number(int index, int layer) 
{
  return tile[index].tileno[layer];
}

//*******************************************************************************
//* get_tiletype_sprite
//*
//*******************************************************************************
static int TILES::get_tile_sprite(int index, int layer) 
{
  return tile_sprites[tile[index].tileno[layer]].spr.Graphic;
}

//*******************************************************************************
//* get_tile_mirroring
//*  mirror x = 1
//*  mirror y = 10
//*  mirror x und y = 11
//*
//*******************************************************************************
static int TILES::get_tile_mirroring(int index,  int layer)
{
  int result = 0;

  if (tile[index].mirrored_x[layer]) result += 1;
  if (tile[index].mirrored_y[layer]) result += 10;
  
  return result;
}
//*******************************************************************************
//* clear_tile
//*
//*******************************************************************************
static function TILES::clear_tile (int index,  int layer) {
  
  int i = layer;
  tile[index].sound[i] = null;
  tile[index].x[i]            = 0;
  tile[index].y[i]            = 0;
  tile[index].mirrored_x[i]   = false;
  tile[index].mirrored_y[i]   = false;

  tile[index].is_solid[i]        = false;
  tile[index].is_destructable[i] = false;
  tile[index].is_bonus[i]        = false;
  tile[index].is_deadly[i]       = false;
  tile[index].is_ramp[i]         = false;
  tile[index].is_fg_ramp[i]      = false;
  tile[index].is_ramp_support[i] = false;
  tile[index].to_bounce[i]       = false;
  tile[index].is_platform[i]     = false;
  tile[index].is_ladder[i]       = false;
  tile[index].is_ramp_ceiling[i] = false;
  tile[index].is_50transparent[i]= false;
  tile[index].bounce_counter[i]  = 0;
  tile[index].emit_particle[i]    = 0;
  tile[index].emit_particle_cnt[i]= 0;

  tile[index].loop[i]             = 0;
  tile[index].tileno[i]           = 0;
  
  if (tile[index].spr[i] != null) tile[index].spr[i].Delete();
  tile[index].spr[i]              = null;
  tile[index].vf[i]               = null;
  tile[index].frame_counter[i]    = 0;  
  tile[index].frames_in_use[i]       = 0;
  tile[index].frame[i]       = 0;
  tile[index].frm_speed[i]       = 0;
  tile[index].ani_delay[i]         = 0;
  tile[index].ani_delay_counter[i] = 0;
	tile[index].ani_sync_enable[i]    =false;
	tile[index].highlight[i]    =false;
}


//*******************************************************************************
//* clear_all_tiles
//*
//*******************************************************************************
static function TILES::clear_all_tiles(bool only_first_layer)
{
  int k = 0, i = 0;
  int all_tiles = num_tiles_x * num_tiles_y;
  
  if (only_first_layer) {
    while (i < all_tiles) {
      TILES.clear_tile(i, k);
      i++;
    }    
  }
  
  else {
    while (k < LAYERS) {
      while (i < all_tiles) {
        TILES.clear_tile(i, k);
        i++;
      }
      k++;
      i=0;
    }
  }
}


//*******************************************************************************
//* update_tile_sprites
//*
//*******************************************************************************
static function TILES::update_tile_sprites(int sprite_slot) 
{
    // Create TileImages
  DynamicSprite *tile_strip = DynamicSprite.CreateFromExistingSprite(tileset_sprite);
  DrawingSurface *strip_surf = tile_strip.GetDrawingSurface();

  int max_tile_spr_x = tile_strip.Width / size_tile_x;
  int max_tile_spr_y = tile_strip.Height / size_tile_y;
  int i = 0;
  int j = 0;
  int k = 0;
  int tilespr_idx;
    
  i =0;
  
  //update images
  while (j < max_tile_spr_y) {
    while (i < max_tile_spr_x) {
      tilespr_idx = j * max_tile_spr_x + i;
      if (tilespr_idx < NUM_MAX_SPRITES) {
        tile_sprites[tilespr_idx].spr = DynamicSprite.CreateFromDrawingSurface(strip_surf, i * size_tile_x, j*size_tile_y, size_tile_x, size_tile_y);
      }
      i++;
    }
    j++;
  }
  
  //wipe remaining tile images
  i =0;
  while (tilespr_idx < NUM_MAX_SPRITES) {
    if (tile_sprites[tilespr_idx].spr != null) {
      tile_sprites[tilespr_idx].spr.Delete();
      tile_sprites[tilespr_idx].spr = null;      
    }
    tilespr_idx++;
  }
  strip_surf.Release();
  tile_strip.Delete();
  //apply changes to tiles
  i=0;
  j=0;
  k=0;
  int index = 0;
 
  while ( k < LAYERS ){
    while ( j < num_tiles_y ) {
      i = 0;
      while ( i < num_tiles_x ) {
        
        if (tile_sprites[ tile[index].tileno[k] ].spr!=null) {
          if (tile[index].spr[k]!=null) tile[index].spr[k].Delete();
          tile[index].spr[k] = DynamicSprite.CreateFromExistingSprite(tile_sprites[ tile[index].tileno[k] ].spr.Graphic, true);
          if (tile[index].mirrored_x[k] && tile[index].mirrored_y[k]) tile[index].spr[k].Flip(eFlipBoth);
          else if (tile[index].mirrored_x[k]) tile[index].spr[k].Flip(eFlipLeftToRight);
          else if (tile[index].mirrored_y[k]) tile[index].spr[k].Flip(eFlipUpsideDown);
        }
        else {
          TILES.clear_tile(index, k);
        }
        
        index ++;
        i++;
      } 
      j++;
    }
    k++;
  }
}

//*******************************************************************************
//* get_tile_offset_x
//*
//*******************************************************************************
static int TILES::get_tile_offset_x()
{
  return tile_offset_x;
}


//*******************************************************************************
//* get_tile_offset_y
//*
//*******************************************************************************
static int TILES::get_tile_offset_y()
{
  return tile_offset_y;
}


//*******************************************************************************
//* getTileIndexFromPoint
//*
//*******************************************************************************
static int TILES::getTileIndexFromPoint(int x, int y)
{
  x -= tile_offset_x;
  y -= tile_offset_y;
	int indexX = FloatToInt((IntToFloat(x) / IntToFloat(mapwidth )) * IntToFloat(num_tiles_x));
	int indexY = FloatToInt((IntToFloat(y) / IntToFloat(mapheight)) * IntToFloat(num_tiles_y));
	int result = indexY * (mapwidth / size_tile_x) + indexX;
	if (result > 0) return result;
  else return 0;
}


//*******************************************************************************
//* getTileIndexFromTileIndices
//*
//*******************************************************************************
static int TILES::getTileIndexFromTileIndices(int x, int y)
{
	return y * num_tiles_x + x;
}


//*******************************************************************************
//* getTileIndexXFromIndex
//*
//*******************************************************************************
static int TILES::getTileIndexXFromIndex(int index)
{
	return index % num_tiles_x;
}


//*******************************************************************************
//* getTileIndexYFromIndex
//*
//*******************************************************************************
static int TILES::getTileIndexYFromIndex(int index)
{
	return index / num_tiles_x;
}


//*******************************************************************************
//* getTileIndexXFromPoint
//*
//*******************************************************************************
static int TILES::getTileIndexXFromPoint(int x, int y)
{
  return TILES.getTileIndexXFromIndex(TILES.getTileIndexFromPoint(x, y));
}


//*******************************************************************************
//* getTileIndexYFromPoint
//*
//*******************************************************************************
static int TILES::getTileIndexYFromPoint(int x, int y)
{
  return TILES.getTileIndexYFromIndex(TILES.getTileIndexFromPoint(x, y));
}

//*******************************************************************************
//* get_tile_at
//* returns the tile index at of given coordinates
//*
//*******************************************************************************
static int TILES::get_tile_at ( int x, int y, int layer, int current_tile)
{
  return TILES.getTileIndexFromPoint(x, y);
}



//*******************************************************************************
//* get_tile_index_above
//* returns the tile index at of given coordinates, just one row above
//*
//*******************************************************************************
static int TILES::get_tile_index_above (int tile_index, int rows)
{
  int temp_idx = tile_index - (num_tiles_x * rows);
  
  if (temp_idx <0) return 0;
  else return temp_idx;
}


//*******************************************************************************
//* set_highlight
//* sets a highlight tag for debugging purposes
//*
//*******************************************************************************
static void TILES::set_highlight(int tile_index, int layer)
{
  tile[tile_index].highlight[layer] = true;
}


//*******************************************************************************
//* unset_highlight
//* unsets a highlight tag for debugging purposes
//*
//*******************************************************************************
static void TILES::unset_highlight(int tile_index, int layer)
{
  tile[tile_index].highlight[layer] = false;
}
//*******************************************************************************
//* define_tiles
//* Define tile types according to the tilecode set in the mapeditor
//* 
//*******************************************************************************
static function TILES::define_tiles(int index, int layer,  int code)
{
  short i, frm_idx, k;
  short _attrib  = TILES.split_tilecode(eCodepartAttrib, code);
	short _flag    = TILES.split_tilecode(eCodepartFlag, code);
  k = layer;  
  tile[index].loop[k] = TILES.split_tilecode(eCodepartLoop, code); 

  ViewFrame *vf;
  
  
  // init animation
  if (tile[index].loop[k] > 0) 
  {
    tile[index].frames_in_use[k] = Game.GetFrameCountForLoop(tile_set.tile_view, tile[index].loop[k]);
    if (_flag > 0 && tile_sprites[tile[index].tileno[k]].frames_in_use == 0) {
      tile_set.anisync_tile_no[tile_set.anisync_tile_cnt] = tile[index].tileno[k];   
      tile_set.anisync_tile_cnt ++;
    }
    
    if (_flag > 0) {
      tile[index].ani_sync_enable[k] = true;
      tile_sprites[tile[index].tileno[k]].frames_in_use = tile[index].frames_in_use[k];
    }
    else {
      tile[index].frame_counter[k] = Random(tile[index].frames_in_use[k]-1);
    }
		
    i = 0;
    while ( i < tile[index].frames_in_use[k]) {
      frm_idx = k * FRAME_TILE_ROW + i;
      vf = Game.GetViewFrame(tile_set.tile_view, tile[index].loop[k], i);
      tile[index].frame[frm_idx] = vf.Graphic;
      tile[index].frm_speed[frm_idx] = vf.Speed;
			if (_flag > 0) tile_sprites[tile[index].tileno[k]].frm_speed[frm_idx] = vf.Speed;
      i++;
    }
  }
  
  // code 1
  if (_attrib == eTA_solid_only) {
    tile[index].is_solid[k] = true;
  }
  // code 2
  else if (_attrib == eTA_solid_destruct) {
    tile[index].is_solid[k]        = true;
    tile[index].is_destructable[k] = true;
  }
  // code 3
  else if (_attrib == eTA_solid_bonus) {
    tile[index].is_solid[k]        = true;
    tile[index].is_bonus[k]        = true;        
  }
  // code 4
  else if (_attrib == eTA_solid_platform) {
    tile[index].is_solid[k]        = true;
    tile[index].is_platform[k]     = true;
  }
  // code 5
  else if (_attrib == eTA_solid_ramp) {
    tile[index].is_solid[k]        = true;
    tile[index].is_ramp[k]         = true;
  }
  // code 6
  else if (_attrib == eTA_ramp_support) {
    tile[index].is_ramp_support[k] = true;
  }  
  // code 7
  else if (_attrib == eTA_ladder) {
    tile[index].is_ladder[k]       = true;
  }      
  // code 8
  else if (_attrib == eTA_solid_ladder) {
    tile[index].is_solid[k]        = true;
    tile[index].is_ladder[k]       = true;
  }     
  // code 9
  else if (_attrib == eTA_foreground_ramp) {
    tile[index].is_solid[k]        = true;
    tile[index].is_ramp[k]         = true;
    tile[index].is_fg_ramp[k]      = true;
  }     
  // code 10
  else if (_attrib== eTA_solid_deadly) {
    tile[index].is_solid[k]   = true;
    tile[index].is_deadly[k] = true;
  }          
  // code 11
  else if (_attrib== eTA_deadly) {
    tile[index].is_solid[k]   = false;
    tile[index].is_deadly[k] = true;
  }
  // code 12
  else if (_attrib== eTA_water_surf) {
    tile[index].is_solid[k]   = false;
    tile[index].emit_particle[k] = eHitPart_Water;
  }
  // code 13
  else if (_attrib== eTA_ramp_ceiling) {
    tile[index].is_ramp_ceiling[k] = true;
  }
  // code 14
  else if (_attrib== eTA_50transparent) {
    tile[index].is_solid[k]   = false;
    tile[index].is_50transparent[k] = true;
  }   
   
}


//*******************************************************************************
//* get_tiletype_name
//* 
//*******************************************************************************
static String TILES::get_tiletype_name(int attrib) {
  int i = 0;
  while (i<TILE_TYPES) {
    if (attrib == i) return tileTypes[i];
    i++;
  }
return "nothing";
}
 

//*******************************************************************************
//* create_tile
//* 
//*******************************************************************************
static void TILES::create_tile(int tile_x, int tile_y, int tilecode, int layer, int tilestrip_idx,  bool mirror_x, bool mirror_y)
{
  int index_x, index_y, index, x, y;
  index = TILES.getTileIndexFromTileIndices(tile_x, tile_y);
  if (index >= 0 && index < (num_tiles_x * num_tiles_y))  {  
    TILES.clear_tile(index, layer);
    index_x = TILES.getTileIndexXFromIndex(index);
    index_y = TILES.getTileIndexYFromIndex(index);
    x=index_x * size_tile_x;
    y=index_y * size_tile_y;
    tile[index].x[layer] = x;
    tile[index].y[layer] = y;
    tile[index].tileno[layer] = tilestrip_idx;
    
    tile[index].mirrored_x[layer] = mirror_x;
    tile[index].mirrored_y[layer] = mirror_y;
    if (tilestrip_idx > 0) {
      tile[index].spr[layer] = DynamicSprite.CreateFromExistingSprite(tile_sprites[tilestrip_idx].spr.Graphic, true);
      if (tile[index].mirrored_x[layer] && tile[index].mirrored_y[layer]) tile[index].spr[layer].Flip(eFlipBoth);
      else if (tile[index].mirrored_x[layer]) tile[index].spr[layer].Flip(eFlipLeftToRight);
      else if (tile[index].mirrored_y[layer]) tile[index].spr[layer].Flip(eFlipUpsideDown);   
    }
    TILES.define_tiles(index, layer, tilecode);
  }
}


//*******************************************************************************
//* handle_anisync_tiles
//* Handles Tile Animation
//*
//*******************************************************************************
static function TILES::handle_anisync_tiles()
{
  int i = 0;
  int frm_idx;

  while (i < tile_set.anisync_tile_cnt) {
    frm_idx =  FRAME_TILE_ROW +  tile_sprites[tile_set.anisync_tile_no[i]].frame_counter;
    
    if (tile_sprites[tile_set.anisync_tile_no[i]].ani_delay_counter >= tile_sprites[tile_set.anisync_tile_no[i]].ani_delay ) {
      if ( tile_sprites[tile_set.anisync_tile_no[i]].frame_counter >= tile_sprites[tile_set.anisync_tile_no[i]].frames_in_use-1) tile_sprites[tile_set.anisync_tile_no[i]].frame_counter = 0;
      else tile_sprites[tile_set.anisync_tile_no[i]].frame_counter ++;
      
      tile_sprites[tile_set.anisync_tile_no[i]].ani_delay_counter = 0;
      tile_sprites[tile_set.anisync_tile_no[i]].ani_delay = tile_sprites[tile_set.anisync_tile_no[i]].frm_speed[frm_idx] / 2;
      
    }
    
    else tile_sprites[tile_set.anisync_tile_no[i]].ani_delay_counter++;
    
    i++;
  }
}


//*******************************************************************************
//* draw_tiles
//* 
//* Draws the foreground and background tiles 
//*******************************************************************************
static function TILES::draw_tiles (bool trans_fg, bool withGrid )
{
  DrawingSurface *tileSurface = Room.GetDrawingSurfaceForBackground();
  DrawingSurface *foregroundSurface = Foreground.GetDrawingSurface();
  
	int i = 0;
  int j = 0;
  int index;
  short frm_idx;
  short sprite_slot_1;
  short sprite_slot_2;
  short temp_trans_1 = 0;
  short temp_trans_2 = 0;  

  int tilesOnScreenX = Screen.Width / size_tile_x +1;
	int tilesOnScreenY = Screen.Height / size_tile_y + 2;

  int x_diff_tile = ((ego_stats.current_tile % num_tiles_x) * size_tile_x + tile_offset_x) / size_tile_x;
  int y_diff_tile = ((ego_stats.current_tile / num_tiles_x) * size_tile_y + tile_offset_y) / size_tile_y;
	int topLeftTileIndexX = TILES.getTileIndexXFromIndex(ego_stats.current_tile) -x_diff_tile-1;
	int topLeftTileIndexY = TILES.getTileIndexYFromIndex(ego_stats.current_tile) -y_diff_tile-1;
  
  if (topLeftTileIndexX < 0) topLeftTileIndexX= 0;
  if (topLeftTileIndexY < 0) topLeftTileIndexY= 0;


  foregroundSurface.Clear(COLOR_TRANSPARENT);
  while ( j <tilesOnScreenY)
  {
    i = 0;
    while (i < tilesOnScreenX)
    {
      index = TILES.getTileIndexFromTileIndices(topLeftTileIndexX + i, topLeftTileIndexY + j);

      if (tile[index].tileno[0] != 0) {
        sprite_slot_1 =0;
        
        // reset particle emitter
        if (tile[index].emit_particle_cnt[0] > 0) tile[index].emit_particle_cnt[0]--;
        
        // animate Tiles layer1
        if (tile[index].loop[0] > 0 && !tile[index].ani_sync_enable[0]) {
          frm_idx = 0*FRAME_TILE_ROW +  tile[index].frame_counter[0];
          if (tile[index].ani_delay_counter[0] == tile[index].ani_delay[0] ) {

            if ( tile[index].frame_counter[0] >= tile[index].frames_in_use[0]-1) tile[index].frame_counter[0] = 0;
            else tile[index].frame_counter[0]++;
            
            tile[index].ani_delay_counter[0] = 0;               
            tile[index].ani_delay[0] = tile[index].frm_speed[frm_idx];
          }
          else tile[index].ani_delay_counter[0]++;

          sprite_slot_1 = tile[index].frame[frm_idx]; 
        }
        else if (tile[index].loop[0] > 0 && tile[index].ani_sync_enable[0]) {
          frm_idx = 0* FRAME_TILE_ROW + tile_sprites[tile[index].tileno[0]].frame_counter;
          sprite_slot_1 =  tile[index].frame[frm_idx]; 
        }
        else if (tile[index].spr[0]!=null) sprite_slot_1 = tile[index].spr[0].Graphic;

        if (sprite_slot_1 > 0) {
          temp_trans_1 = 0;
          
          if ( tile[index].is_50transparent[0]) temp_trans_1 = 50;
          

          tileSurface.DrawImage ( tile[index].x[0] + tile_offset_x, tile[index].y[0] + tile_offset_y , sprite_slot_1, temp_trans_1);

        }
        // Show Highlight
        if (tile[index].highlight[0] == true) {
          tileSurface.DrawImage ( tile[index].x[0] + tile_offset_x, tile[index].y[0] + tile_offset_y , 656);
        }
      }
      //foreground
      
      if (tile[index].tileno[1] != 0) {

        // animate Tiles FG
        if (tile[index].loop[1] > 0 && !tile[index].ani_sync_enable[1]) {
          frm_idx = FRAME_TILE_ROW +  tile[index].frame_counter[1];
          if (tile[index].ani_delay_counter[1] == tile[index].ani_delay[1] ) {

            if ( tile[index].frame_counter[1] >= tile[index].frames_in_use[1]-1) tile[index].frame_counter[1] = 0;
            else tile[index].frame_counter[1]++;
            
            tile[index].ani_delay_counter[1] = 0;               
            tile[index].ani_delay[1] = tile[index].frm_speed[frm_idx];
          }
          else tile[index].ani_delay_counter[1]++;

          sprite_slot_2 = tile[index].frame[frm_idx]; 
        }
        else if (tile[index].loop[1] > 0 && tile[index].ani_sync_enable[1]) {
          frm_idx =  FRAME_TILE_ROW + tile_sprites[tile[index].tileno[1]].frame_counter;
          sprite_slot_1 =  tile[index].frame[frm_idx]; 
        }
        else if (tile[index].spr[1]!=null) sprite_slot_2 = tile[index].spr[1].Graphic;
        

        //if (tile[index].spr[1]!=null) sprite_slot_2 = tile[index].spr[1].Graphic;
        temp_trans_2 = 0;
        if ( tile[index].is_50transparent[1]) temp_trans_2 = 50;
        
        if (trans_fg) {
          if (sprite_slot_2 > 0) {
            DynamicSprite *temp_fg = DynamicSprite.CreateFromExistingSprite(sprite_slot_2,true);
            temp_fg.CopyTransparencyMask(TileRaster.Graphic);
            tileSurface.DrawImage ( tile[index].x[1] + tile_offset_x, tile[index].y[1] + tile_offset_y, temp_fg.Graphic, temp_trans_2);
          }
        }
        else foregroundSurface.DrawImage ( tile[index].x[1] + tile_offset_x, tile[index].y[1] + tile_offset_y, sprite_slot_2, temp_trans_2);     
      }
      
      if( withGrid) {
        tileSurface.DrawingColor = 8;
        tileSurface.DrawLine ( tile[index].x[0] + tile_offset_x, tile[index].y[0] + tile_offset_y, tile[index].x[0] + tile_offset_x,  
                                tile[index].y[0] + tile_offset_y + size_tile_y);
        tileSurface.DrawLine ( tile[index].x[0] + tile_offset_x, tile[index].y[0] + tile_offset_y, tile[index].x[0] + tile_offset_x + size_tile_x,  
                                tile[index].y[0] + tile_offset_y);                   
      }        
      i++;
    }    
    j++;
  }

  
  foregroundSurface.Release();
	tileSurface.Release();
  
}

//*******************************************************************************
//* draw_map
//* 
//*******************************************************************************
static function TILES::draw_map() 
{
  DrawingSurface *foregroundSurface = Foreground.GetDrawingSurface();
  
	int i = 0;
  int j = 0;
  int index;
  short frm_idx;

  int tilesOnScreenX = Screen.Width / size_tile_x;
	int tilesOnScreenY = Screen.Height / size_tile_y;
  
  int player_x_idx    = TILES.getTileIndexXFromIndex(ego_stats.current_tile);
  int screen_x_point  = player_x_idx * size_tile_x + tile_offset_x; 
  int x_diff_tile   = screen_x_point /size_tile_x;
  int player_y_idx    = TILES.getTileIndexYFromIndex(ego_stats.current_tile);
  int screen_y_point  = player_y_idx * size_tile_y + tile_offset_y; 
  int y_diff_tile   = screen_y_point /size_tile_y;
  
	int topLeftTileIndexX = TILES.getTileIndexXFromIndex(ego_stats.current_tile) -x_diff_tile-2;
	int topLeftTileIndexY = TILES.getTileIndexYFromIndex(ego_stats.current_tile) -y_diff_tile-2;
  if (topLeftTileIndexX < 0) topLeftTileIndexX= 0;
  if (topLeftTileIndexY < 0) topLeftTileIndexY= 0;
  int topLeftTile = TILES.getTileIndexFromTileIndices(topLeftTileIndexX, topLeftTileIndexY);
  
  int mapX = Screen.Width / 2 - num_tiles_x / 2;
	int mapY = Screen.Height / 2 - num_tiles_y / 2;
  
  j=0;
  
  while ( j <num_tiles_y)
  {
    i = 0;
    
    while (i < num_tiles_x)
    {
      index = TILES.getTileIndexFromTileIndices(i, j);

      
      if (tile[index].is_ramp[0] || tile[index].is_platform[0]) foregroundSurface.DrawingColor = 1;
      else if (tile[index].is_deadly[0]) foregroundSurface.DrawingColor = 4;
      else if (tile[index].is_ladder[0]) foregroundSurface.DrawingColor = 6;
      else if (tile[index].is_bonus[0]) foregroundSurface.DrawingColor = 14;
      else if (tile[index].is_solid[0]) foregroundSurface.DrawingColor = 3;      
      else foregroundSurface.DrawingColor = 0;
      foregroundSurface.DrawPixel(mapX + i, mapY + j);
      i++;
    }
    j++;
  }
  
	foregroundSurface.DrawingColor = 7;
	foregroundSurface.DrawLine(mapX - 1, mapY - 1, mapX + num_tiles_x, mapY - 1);
	foregroundSurface.DrawLine(mapX + num_tiles_x, mapY - 1, mapX + num_tiles_x, mapY + num_tiles_y);
	foregroundSurface.DrawLine(mapX + num_tiles_x, mapY + num_tiles_y, mapX - 1, mapY + num_tiles_y);
	foregroundSurface.DrawLine(mapX - 1, mapY + num_tiles_y, mapX - 1, mapY - 1);
	
	foregroundSurface.DrawingColor = 15;
	foregroundSurface.DrawLine(mapX + topLeftTileIndexX, mapY + topLeftTileIndexY, mapX + topLeftTileIndexX + tilesOnScreenX, mapY + topLeftTileIndexY);
	foregroundSurface.DrawLine(mapX + topLeftTileIndexX + tilesOnScreenX, mapY + topLeftTileIndexY, mapX + topLeftTileIndexX + tilesOnScreenX, mapY + topLeftTileIndexY + tilesOnScreenY);
	foregroundSurface.DrawLine(mapX + topLeftTileIndexX + tilesOnScreenX, mapY + topLeftTileIndexY + tilesOnScreenY, mapX + topLeftTileIndexX, mapY + topLeftTileIndexY + tilesOnScreenY);
	foregroundSurface.DrawLine(mapX + topLeftTileIndexX, mapY + topLeftTileIndexY + tilesOnScreenY, mapX + topLeftTileIndexX, mapY + topLeftTileIndexY);
  foregroundSurface.Release();
}


//*******************************************************************************
//
// This  event  is  triggered in response to a number of standard AGS
// game events. See the AGS  manual  for more details.  The EVENT and 
// DATA parameters are used to decode the specific event as follows:
//
// EVENT                         DATA
// eEventEnterRoomBeforeFadein   new room number
// eEventLeaveRoom               room number they are leaving
// eEventGotScore                number of points they got
// eEventGUIMouseDown            GUI number
// eEventGUIMouseUp              GUI number
// eEventAddInventory            inventory item number that was added
// eEventLoseInventory           inventory item number that was lost
// eEventRestoreGame             save slot number
//*******************************************************************************

function on_event (EventType event, int data) {

  if (event == eEventEnterRoomBeforeFadein)
  {
    DrawingSurface *surface = Room.GetDrawingSurfaceForBackground();
    BackupSurface = surface.CreateCopy();
    surface.Release();  

  }
  else if (event == eEventLeaveRoom)
  {
    BackupSurface.Release();    
  }
}

export TileRaster;
export tileset_sprite;
export tileset_number;
export size_tile_x, size_tile_y;
export tile_offset_x, tile_offset_y;
export tile_limit_x, tile_limit_y;
export num_tiles_x, num_tiles_y;
export tile_sprites;
export tile_scrolling_edge_h, tile_scrolling_edge_v;
export num_different_tiles;
export BackupSurface, Foreground;
export tile_set;
export tileTypes;
export tile; 
export mapwidth;
export mapheight;