// main global script file
import int tileset_sprite;
bool show_fps;

// called when the game starts, before the first room is loaded
function game_start() 
{
  Game.NormalFont = eFontVolter;
  Game.SpeechFont = eFontVolter;
  System.VSync = true;
  game.abort_key = 0;
}

// put anything you want to happen every game cycle in here
function repeatedly_execute() 
{
}

// put here anything you want to happen every game cycle, even when the game is blocked
function repeatedly_execute_always() 
{
}


function edit_room_directly()
{
  if (player.Room!=5) {
    gDebugging.Visible=false;
    gLoading.Visible=false;
    gEditorScene.Visible=false;
    int i = 11;
    while (i < 32) {
      gui[i].Visible=false;
      i++;
    }
    TENG.stop();
    TENG.clean_up();
    TENG.init_game();
    EGO.init_player(); 
    TENG.set_topdown_mode(false);
    player.x = 0;
    player.y = 0;
    gSelectStage.Visible=false;
    mouse.Visible = true;
    mouse.Mode = eModePointer; 
    player.ChangeRoom(5);
  }
}

// called when a key is pressed. keycode holds the key's ASCII code
function on_key_press(eKeyCode keycode) 
{
  if (IsGamePaused()) keycode = 0; // game paused, so don't react to keypresses
  if (keycode == eKeyCtrlQ) QuitGame(1); // Ctrl-Q
  if (keycode == eKeyF9) RestartGame(); // F9
  if (keycode == eKeyF12) SaveScreenShot("scrnshot.pcx");  // F12
  if (keycode == eKeyCtrlS) Debug(0,0); // Ctrl-S, give all inventory
  if (keycode == eKeyCtrlV) Debug(1,0); // Ctrl-V, version
  if (keycode == eKeyCtrlA) Debug(2,0); // Ctrl-A, show walkable areas
  if (keycode == eKeyCtrlX) player.ChangeRoom(300);//Debug(3,0); // Ctrl-X, teleport to room
  if (keycode == eKeyCtrlE) edit_room_directly();//Debug(3,0); // Ctrl-X, teleport to room
  
  
  if (keycode == eKeyCtrlF) {
    if (!show_fps) Debug(4,1); // Show FPS
    else Debug(4,0);
    show_fps = !show_fps;
  }
}

function on_mouse_click(MouseButton button) // called when a mouse button is clicked. button is either LEFT or RIGHT
{
  if (IsGamePaused() == 1) // Game is paused, so do nothing (ie. don't allow mouse click)
  {
  }
  else if (button == eMouseLeft) 
  {
    Room.ProcessClick(mouse.x,mouse.y, mouse.Mode);
  }
  else // right-click, so cycle cursor
  {   
    //mouse.SelectNextMode();
  }
}

// Init Textboxes
function on_event (EventType event, int data) {
  // when a mouse button is pressed down over a GUI
   
  // Deactivate the other textbox in edit object gui
  if (event == eEventGUIMouseDown) {
    if (gui[data] == gEditSetObject) {
      GUI *theGui = gui[data];

      TextBox *theTextbox = null;
      GUIControl *control = GUIControl.GetAtScreenXY( mouse.x, mouse.y );
      if (control) theTextbox = control.AsTextBox;
      if (theTextbox != null && theTextbox.ID == 3) {
        gEditSetObject.Controls[3].AsTextBox.Enabled=true;
        gEditSetObject.Controls[5].AsTextBox.Enabled=false;
        gEditSetObject.Controls[25].AsTextBox.Enabled=false;
      }
      else if (theTextbox != null && theTextbox.ID == 5) {
        gEditSetObject.Controls[5].AsTextBox.Enabled=true;
        gEditSetObject.Controls[3].AsTextBox.Enabled=false;
        gEditSetObject.Controls[25].AsTextBox.Enabled=false;
      }
      else if (theTextbox != null && theTextbox.ID == 25) {
        gEditSetObject.Controls[25].AsTextBox.Enabled=true;
        gEditSetObject.Controls[3].AsTextBox.Enabled=false;
        gEditSetObject.Controls[5].AsTextBox.Enabled=false;
      }
            
      
    }
    else if (gui[data] == gEditSetHsp) {
      GUI *theGui = gui[data];

      TextBox *theTextbox = null;
      GUIControl *control = GUIControl.GetAtScreenXY( mouse.x, mouse.y );
      if (control) theTextbox = control.AsTextBox;
      if (theTextbox != null && theTextbox.ID == 3) {
        gEditSetHsp.Controls[3].AsTextBox.Enabled=true;
        gEditSetHsp.Controls[11].AsTextBox.Enabled=false;
      }
      else if (theTextbox != null && theTextbox.ID == 11) {
        gEditSetHsp.Controls[11].AsTextBox.Enabled=true;
        gEditSetHsp.Controls[3].AsTextBox.Enabled=false;
      }            
      
    }    
    else if (gui[data] == gEditSetNpc) {
      GUI *theGui = gui[data];

      TextBox *theTextbox = null;
      GUIControl *control = GUIControl.GetAtScreenXY( mouse.x, mouse.y );
      if (control) theTextbox = control.AsTextBox;
      
      if (theTextbox != null && theTextbox.ID == 3) {
        gEditSetNpc.Controls[3].AsTextBox.Enabled=true;
        gEditSetNpc.Controls[5].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[7].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[9].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[11].AsTextBox.Enabled=false;
      }
      else if (theTextbox != null && theTextbox.ID == 5) {
        gEditSetNpc.Controls[3].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[5].AsTextBox.Enabled=true;
        gEditSetNpc.Controls[7].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[9].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[11].AsTextBox.Enabled=false;
      }
      else if (theTextbox != null && theTextbox.ID == 7) {
        gEditSetNpc.Controls[3].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[5].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[7].AsTextBox.Enabled=true;
        gEditSetNpc.Controls[9].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[11].AsTextBox.Enabled=false;
      }
      else if (theTextbox != null && theTextbox.ID == 9) {
        gEditSetNpc.Controls[3].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[5].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[7].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[9].AsTextBox.Enabled=true;
        gEditSetNpc.Controls[11].AsTextBox.Enabled=false;
      }
      else if (theTextbox != null && theTextbox.ID == 11) {
        gEditSetNpc.Controls[3].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[5].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[7].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[9].AsTextBox.Enabled=false;
        gEditSetNpc.Controls[11].AsTextBox.Enabled=true;
      }          
    }
    else if (gui[data] == gEditSetImport) {//gEditSetNew
      GUI *theGui = gui[data];

      TextBox *theTextbox = null;
      GUIControl *control = GUIControl.GetAtScreenXY( mouse.x, mouse.y );
      if (control) theTextbox = control.AsTextBox;
      if (theTextbox != null && theTextbox.ID == 7) {
        gEditSetImport.Controls[7].AsTextBox.Enabled=true;
        gEditSetImport.Controls[9].AsTextBox.Enabled=false;
      }
      else if (theTextbox != null && theTextbox.ID == 9) {
        gEditSetImport.Controls[7].AsTextBox.Enabled=false;
        gEditSetImport.Controls[9].AsTextBox.Enabled=true;
      }
      
    }
    else if (gui[data] == gEditSetNew) {
      GUI *theGui = gui[data];

      TextBox *theTextbox = null;
      GUIControl *control = GUIControl.GetAtScreenXY( mouse.x, mouse.y );
      if (control) theTextbox = control.AsTextBox;
      if (theTextbox != null && theTextbox.ID == 3) {
        gEditSetNew.Controls[3].AsTextBox.Enabled=true;
        gEditSetNew.Controls[4].AsTextBox.Enabled=false;
        gEditSetNew.Controls[7].AsTextBox.Enabled=false;
        gEditSetNew.Controls[9].AsTextBox.Enabled=false;
        gEditSetNew.Controls[11].AsTextBox.Enabled=false;
      }
      else if (theTextbox != null && theTextbox.ID == 4) {
        gEditSetNew.Controls[3].AsTextBox.Enabled=false;
        gEditSetNew.Controls[4].AsTextBox.Enabled=true;
        gEditSetNew.Controls[7].AsTextBox.Enabled=false;
        gEditSetNew.Controls[9].AsTextBox.Enabled=false;
        gEditSetNew.Controls[11].AsTextBox.Enabled=false;
      }
      else if (theTextbox != null && theTextbox.ID == 7) {
        gEditSetNew.Controls[3].AsTextBox.Enabled=false;
        gEditSetNew.Controls[4].AsTextBox.Enabled=false;
        gEditSetNew.Controls[7].AsTextBox.Enabled=true;
        gEditSetNew.Controls[9].AsTextBox.Enabled=false;
        gEditSetNew.Controls[11].AsTextBox.Enabled=false;
      } 
      else if (theTextbox != null && theTextbox.ID == 9) {
        gEditSetNew.Controls[3].AsTextBox.Enabled=false;
        gEditSetNew.Controls[4].AsTextBox.Enabled=false;
        gEditSetNew.Controls[7].AsTextBox.Enabled=false;
        gEditSetNew.Controls[9].AsTextBox.Enabled=true;
        gEditSetNew.Controls[11].AsTextBox.Enabled=false;
      } 
      else if (theTextbox != null && theTextbox.ID == 11) {
        gEditSetNew.Controls[3].AsTextBox.Enabled=false;
        gEditSetNew.Controls[4].AsTextBox.Enabled=false;
        gEditSetNew.Controls[7].AsTextBox.Enabled=false;
        gEditSetNew.Controls[9].AsTextBox.Enabled=false;
        gEditSetNew.Controls[11].AsTextBox.Enabled=true;
      }       
      
    }      

  }

}
     
function dialog_request(int param) {
}

function btnKS_Click (GUIControl *control, MouseButton button) 
{
  KeySwap.GetKey(control);
}


function btnKSSave_OnClick(GUIControl *control, MouseButton button)
{
  if (!gKSPopup.Visible) {
    bool check = KeySwap.Save();
    
    if (!check) Display("Error, can't save!");
    else CTRL.init_controls();
    gKSKeyMap.Visible=false;
    gPlayerStats.Visible = true;
    if (!ego_stats.s_mouseaiming&& !gInv.Visible) Mouse.Visible = false;
  }
}

function btnKSCancel_OnClick(GUIControl *control, MouseButton button)
{
  if (!gKSPopup.Visible) {
    gKSKeyMap.Visible=false;
    gPlayerStats.Visible = true;
    if (!ego_stats.s_mouseaiming&& !gInv.Visible) Mouse.Visible = false;
  }
}

function btnKSReset_OnClick(GUIControl *control, MouseButton button)
{
  if (!gKSPopup.Visible) {
    bool check = KeySwap.Load(true);
    
    if (!check) Display("Error, can't load defaults!");
    else KeySwap.Refresh();
  }
}


function btnJoySel_OnClick(GUIControl *control, MouseButton button)
{
  MapJoy.Init_joystick();
}

function btnJoyInit_OnClick(GUIControl *control, MouseButton button)
{
  MapJoy.Get_joysticks();
  gJoySelect.Visible = true;
}

function btnJoySelCancel_OnClick(GUIControl *control, MouseButton button)
{
  gJoySelect.Visible = false;
}

function btnJM_Click(GUIControl *control, MouseButton button)
{
  MapJoy.Set_button(control);
}

function btnJoySave_OnClick(GUIControl *control, MouseButton button)
{
  if (!gJoyPopup.Visible && !gJoySelect.Visible)  {
    bool check = MapJoy.Save();
    
    if (!check) Display("Error, can't save!");
    else CTRL.init_controls();
    gJoyMap.Visible=false;
    gPlayerStats.Visible = true;
    if (!ego_stats.s_mouseaiming && !gInv.Visible) Mouse.Visible = false;
  }
}

function btnJoyCancel_OnClick(GUIControl *control, MouseButton button)
{
  if (!gJoyPopup.Visible && !gJoySelect.Visible) {
    gJoyMap.Visible=false;
    gPlayerStats.Visible = true;
    if (!ego_stats.s_mouseaiming && !gInv.Visible) Mouse.Visible = false;
  }
}

function btnJoyReset_OnClick(GUIControl *control, MouseButton button)
{
  if (!gJoyPopup.Visible && !gJoySelect.Visible) {
    bool check = MapJoy.Load(true);
    
    if (!check) Display("Error, can't load defaults!");
    else MapJoy.Refresh();
  }
}


function btnSetTileOk_OnClick(GUIControl *control, MouseButton button)
{
  CallRoomScript(editorAction_SetTile);
  gEditSetTile.Visible=false;
}

function btnSetTileCancel_OnClick(GUIControl *control, MouseButton button)
{
  gEditSetTile.Visible=false;
}

function btnEditTileToggleAni_OnClick(GUIControl *control, MouseButton button)
{
  if (lblSetTileAnisync.Text.AsInt>0) {
    lblSetTileAnisync.Text = "0";
    lblSetTileAnisyncInfo.Text = "no";
  }
  else {
    lblSetTileAnisync.Text = "1";
    lblSetTileAnisyncInfo.Text = "yes";    
  }
}

// ObjectButtons
function btnSetObjOk_OnClick(GUIControl *control, MouseButton button)
{
  if (btnSetObjOk.Text == "Edit") CallRoomScript(editorAction_EditObject);
  else if (btnSetObjOk.Text == "New") CallRoomScript(editorAction_NewObject);
  gEditSetObject.Visible = false;
}

function btnSetObjCancel_OnClick(GUIControl *control, MouseButton button)
{
  gEditSetObject.Visible = false;
}

function btnSetObjIsSolid_OnClick(GUIControl *control, MouseButton button)
{
  if (lblSetObjIsSolid.Text.AsInt>0) {
    lblSetObjIsSolid.Text = "0";
    lblSetObjIsSolidInfo.Text = "no";
  }
  else {
    lblSetObjIsSolid.Text = "1";
    lblSetObjIsSolidInfo.Text = "yes";    
  }
}

function btnSetObjIsFG_OnClick(GUIControl *control, MouseButton button)
{
  if (lblSetObjIsFG.Text.AsInt>0) {
    lblSetObjIsFG.Text = "0";
    lblSetObjIsFGInfo.Text = "no";
  }
  else {
    lblSetObjIsFG.Text = "1";
    lblSetObjIsFGInfo.Text = "yes";    
  }
}

function btnSetObjAct_OnClick(GUIControl *control, MouseButton button)
{
  if (lblSetObjAct.Text.AsInt>0) {
    lblSetObjAct.Text = "0";
    lblSetObjActInfo.Text = "no";
  }
  else {
    lblSetObjAct.Text = "1";
    lblSetObjActInfo.Text = "yes";    
  }
}

function btnSetObjGravity_OnClick(GUIControl *control, MouseButton button)
{
  if (lblSetObjGravity.Text.AsInt>0) {
    lblSetObjGravity.Text = "0";
    lblSetObjGravityInfo.Text = "no";
  }
  else {
    lblSetObjGravity.Text = "1";
    lblSetObjGravityInfo.Text = "yes";    
  }
}

// Delete Objects
function btnEditDelObjectOk_OnClick(GUIControl *control, MouseButton button)
{
  CallRoomScript(editorAction_DelObject);
  gEditDelObject.Visible=false;  
}

function btnEditDelObjectCancel_OnClick(GUIControl *control, MouseButton button)
{
  gEditDelObject.Visible = false;
}

// New + Edit NPCs
function btnSetNpcAct_OnClick(GUIControl *control, MouseButton button)
{
  if (lblSetNpcAct.Text.AsInt>0) {
    lblSetNpcAct.Text = "0";
    lblSetNpcActInfo.Text = "no";
  }
  else {
    lblSetNpcAct.Text = "1";
    lblSetNpcActInfo.Text = "yes";
  }
}

function btnSetNpcHostile_OnClick(GUIControl *control, MouseButton button)
{
  if (lblSetNpcHostile.Text.AsInt>0) {
    lblSetNpcHostile.Text = "0";
    lblSetNpcHostileInfo.Text = "no";
  }
  else {
    lblSetNpcHostile.Text = "1";
    lblSetNpcHostileInfo.Text = "yes";
  }
}

function btnSetNpcOk_OnClick(GUIControl *control, MouseButton button)
{
  if (btnSetNpcOk.Text =="Edit") CallRoomScript(editorAction_EditNpc);
  else if (btnSetNpcOk.Text =="New") CallRoomScript(editorAction_NewNpc);
  gEditSetNpc.Visible = false;
}

function btnSetNpcCancel_OnClick(GUIControl *control, MouseButton button)
{
  gEditSetNpc.Visible = false;
}

// Delete NPCs
function btnDelNpcOk_OnClick(GUIControl *control, MouseButton button)
{
  CallRoomScript(editorAction_DelNpc);
  gEditDelNpc.Visible=false;  
}

function btnDelNpcCancel_OnClick(GUIControl *control, MouseButton button)
{
  gEditDelNpc.Visible = false;
}


// Hotspots
function btnSetHspHidden_OnClick(GUIControl *control, MouseButton button)
{
  if (lblSetHspHidden.Text.AsInt>0) {
    lblSetHspHidden.Text = "0";
    lblSetHspHiddenInfo.Text = "no";
  }
  else {
    lblSetHspHidden.Text = "1";
    lblSetHspHiddenInfo.Text = "yes";
  }
}

function btnSetHspOk_OnClick(GUIControl *control, MouseButton button)
{
  if (btnSetHspOk.Text =="Edit") CallRoomScript(editorAction_EditHsp);
  else if (btnSetHspOk.Text =="New") CallRoomScript(editorAction_NewHsp);
  gEditSetHsp.Visible = false;
}


function btnSetHspCancel_OnClick(GUIControl *control, MouseButton button)
{
  gEditSetHsp.Visible = false;
}

function btnDelHspOk_OnClick(GUIControl *control, MouseButton button)
{
  CallRoomScript(editorAction_DelHsp);
  gEditDelHsp.Visible=false;
}

function btnDelHspCancel_OnClick(GUIControl *control, MouseButton button)
{
  gEditDelHsp.Visible = false;
}


//Load Map
function btnEditBtmSetLoad_OnClick(GUIControl *control, MouseButton button)
{
  lbxEditSetLoad.FillDirList("$SAVEGAMEDIR$/*.lvl");
  tbxEditSetLoadTSet.Text = "1";
  gEditSetLoad.Visible = true;
  
}

function btnEditSetLoadLoad_OnClick(GUIControl *control, MouseButton button)
{
  CallRoomScript(editorAction_LoadMap);
  gEditSetLoad.Visible =false;
}

function btnEditLoadCancel_OnClick(GUIControl *control, MouseButton button)
{
  gEditSetLoad.Visible = false;
}


//Import Mappy Map
function btnEditBtmSetImport_OnClick(GUIControl *control, MouseButton button)
{
  lbxEditSetImport.FillDirList("tilemaps/*.tlc");
  tbxEditSetSpr.Text = "0";
  tbxEditSetImportTSet.Text = "1";
  tbxEditSetImportTSet.Enabled = false;
  gEditSetImport.Visible = true;
}


function btnEditImportCancel_OnClick(GUIControl *control, MouseButton button)
{
  gEditSetImport.Visible =false;
}

function btnEditImport_OnClick(GUIControl *control, MouseButton button)
{
  if (tbxEditSetSpr.Text.AsInt==0) Display("You need to set the sprite slot");
  else {
    CallRoomScript(editorAction_ImportMap);
    gEditSetImport.Visible =false;
  }
}

// Update from Mappy
function btnEditBtmSetUpdate_OnClick(GUIControl *control, MouseButton button)
{
  if (tileset_sprite <1) Display("You need to load a level first.");
  else {
    lbxEditSetUpdate.FillDirList("tilemaps/*.tlc");
    gEditSetUpdate.Visible = true;
  }
}

function btnEditUpdate_OnClick(GUIControl *control, MouseButton button)
{
  CallRoomScript(editorAction_UpdateMap);
  gEditSetUpdate.Visible = false;
}

function btnEditUpdateCancel_OnClick(GUIControl *control, MouseButton button)
{
  gEditSetUpdate.Visible = false;
}



// Setting:Set Tilesprites
function btnEditSetTilesprite_OnClick(GUIControl *control, MouseButton button)
{
  String spriteInput = Game.InputBox("!Please enter new spriteslot:");
  if (spriteInput.AsInt >0) {
    tileset_sprite = spriteInput.AsInt;
    CallRoomScript(editorAction_SetTilesprite);
  }
}

// Settings: New map
function btnEditBtmSetNew_OnClick(GUIControl *control, MouseButton button)
{
  tbxEditSetNewDimX.Enabled=true;
  tbxEditSetNewDimY.Enabled=false;
  tbxEditSetNewTsize.Enabled=false;
  tbxEditSetNewSpr.Enabled=false;
  tbxEditSetNewTset.Enabled=false;

  tbxEditSetNewDimX.Text="20";
  tbxEditSetNewDimY.Text="13";
  tbxEditSetNewTsize.Text="16";
  tbxEditSetNewSpr.Text="0";
  tbxEditSetNewTset.Text="1";
  
  gEditSetNew.Visible=true;
}

// New Map Dialog
function btnEditSetNewOk_OnClick(GUIControl *control, MouseButton button)
{
  if (tbxEditSetNewDimX.Text.AsInt < 20) Display ("Minimum map size is 20 x 13");
  else if (tbxEditSetNewDimY.Text.AsInt < 13) Display ("Minimum map size is 20 x 13");
  else if (tbxEditSetNewTsize.Text.AsInt < 8) Display ("Minimum tilesize is 8");
  else if (tbxEditSetNewSpr.Text.AsInt < 1) Display ("You need to define a tilestrip sprite");
  else if (tbxEditSetNewTset.Text.AsInt < 1) Display ("You need to define a tileset");
  else {
    CallRoomScript(editorAction_NewMap);
    gEditSetNew.Visible=false;
  }
  
}

function btnEditSetNewCancel_OnClick(GUIControl *control, MouseButton button)
{
  gEditSetNew.Visible=false;
}

// Save Map
//Editor Save As
function btnEditBtmSetSaveAs_OnClick(GUIControl *control, MouseButton button)
{
  lbxEditSetSaveFiles.FillDirList("$SAVEGAMEDIR$/*.lvl");
  gEditSetSave.Visible=true;
}



function lbxEditSetSaveFiles_OnSelect(GUIControl *control)
{
  tbxEditSetSaveName.Text = lbxEditSetSaveFiles.Items[lbxEditSetSaveFiles.SelectedIndex];
}


function btnEditSetSaveOk_OnClick(GUIControl *control, MouseButton button)
{

  String levelname = tbxEditSetSaveName.Text;
  if (levelname == "") Display ("Missing filename.lvl");
  else if (levelname.Length <5 ) Display("Missing filename or extension .lvl");
  else if (levelname.Length > 64) Display("Filename too long, max. 64 characters please.");
  else {
    String file_ext = levelname.Substring(levelname.Length-4, 4);
    if (file_ext != ".lvl") Display ("Missing file extension .lvl");
    else {
      CallRoomScript(editorAction_SaveMap);
      gEditSetSave.Visible=false;
    }
  }
  
}


function btnEditBtmSetSave_OnClick(GUIControl *control, MouseButton button)
{
  if (leveledit==null || leveledit =="") Display ("Nothing to save, try using 'Save As'");
  else {
    String levelname = leveledit;
    levelname = levelname.Append(".lvl");
    tbxEditSetSaveName.Text = levelname;
    CallRoomScript(editorAction_SaveMap);
  }
}


function btnEditSetSaveCancel_OnClick(GUIControl *control, MouseButton button)
{
  gEditSetSave.Visible=false;
}

function btnEditBtmSetQuit_OnClick(GUIControl *control, MouseButton button)
{
  QuitGame(1);
}

function btnEditTopCup_OnClick(GUIControl *control, MouseButton button)
{
  if (ask_choice("Exit to Level select?"))player.ChangeRoom(300);
}


// Levelselect Gui
function btnStage_OnClick(GUIControl *control, MouseButton button)
{
  TENG.init_game();
  EGO.init_player();
  gSelectStage.Visible=false;
  if (control.AsButton.ID==0)  player.ChangeRoom(5);  
  else if (control.AsButton.ID==1)  player.ChangeRoom(1); 
  else if (control.AsButton.ID==2)  player.ChangeRoom(10); 
  else if (control.AsButton.ID==3)  player.ChangeRoom(20); 
  else if (control.AsButton.ID==4)  player.ChangeRoom(30); 
}

// Inventory Functions
function btnInvItems_OnClick(GUIControl *control, MouseButton button)
{
  //bInventoryItems_OnClick(control, button);
}


function btnInvClose_OnClick(GUIControl *control, MouseButton button)
{
/*
  if (ego_stats.active_inv == iArmMouseGun) {
    Mouse.Mode = eModePointer;
    Mouse.Visible = true;
  }
  else mouse.Visible=false;
  closeInventoryGui();
  */
}


