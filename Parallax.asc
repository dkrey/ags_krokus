// new module script
//*******************************************************************************
//* init_parallax
//* setup the positions for the parallax backgrounds
//*
//*******************************************************************************
// background parallax

cParallax para[MAX_PARALLAX];

import DynamicSprite *Foreground; // Layer 2
import int cam_scroll_x;
import int cam_scroll_y;

import bool frame_drop;
import int num_tiles_x;
import bool disable_parallax;

int ppos[8];

int current_basetile_y;
int static_replacement;

bool pause_parallax;

static void PARALLAX::clear(int layer) 
{
  int i=0;
  para[layer].active = false;
  para[layer].sprite_slot = 0;
  para[layer].xspeed         = 0.0;
  para[layer].xscroll_repeat = false;
  para[layer].autoscroll_x   = false;
  para[layer].do_fadein      = false;
  para[layer].do_fadeout     = false;
  para[layer].transparency   = 0;
  para[layer].basetile_y     = 0;
  para[layer].foreground     = false;
  
  para[layer].yspeed          = 0.0;
  para[layer].yscroll_repeat  = false;
  para[layer].autoscroll_y    = false;
  
  while (i<4) {
    para[layer].xpos[i] = 0.0;
    para[layer].ypos[i] = 0.0;
    i++;
  }
}

static void PARALLAX::clear_all()
{
  static_replacement = 0;
  current_basetile_y = 0;
  int i=0;
  while (i<MAX_PARALLAX) {
    PARALLAX.clear(i);
    i++;
  }
}

static void PARALLAX::set_static(int sprite)
{
  static_replacement = sprite;
}

static void PARALLAX::pause(bool enable)
{
  pause_parallax = enable;
}


static int PARALLAX::get_free() 
{
  int i=0;
  while (i<MAX_PARALLAX) {
    if (!para[i].active) return i;
    i++;
  }
  return -1;
}


static int PARALLAX::add(int sprite_slot, float xspeed, bool x_repeat, bool autoscroll_x,float yspeed, bool y_repeat, bool autoscroll_y, bool foreground, int transparency) 
{
  int layer = PARALLAX.get_free();
  PARALLAX.clear(layer);
  if (layer == -1) Display("Parallax limit reached!");
  else {
    para[layer].active         = true;
    para[layer].sprite_slot    = sprite_slot;
    para[layer].xspeed         = xspeed;
    para[layer].xscroll_repeat = x_repeat;
    para[layer].autoscroll_x   = autoscroll_x;
    para[layer].transparency   = transparency;
    para[layer].foreground     = foreground;
    
    para[layer].yspeed          = yspeed;
    para[layer].yscroll_repeat  = y_repeat;
    para[layer].autoscroll_y    = autoscroll_y;  
    para[layer].xpos[0] = 0.0;
    para[layer].xpos[1] = IntToFloat(Game.SpriteWidth[para[layer].sprite_slot]);
    para[layer].xpos[2] = 0.0;
    para[layer].xpos[3] = IntToFloat(Game.SpriteWidth[para[layer].sprite_slot]);

    para[layer].ypos[0] = IntToFloat(Screen.Height - Game.SpriteHeight[para[layer].sprite_slot]);
    para[layer].ypos[1] = para[layer].ypos[0];
    para[layer].ypos[2] = para[layer].ypos[0]-IntToFloat(Game.SpriteHeight[para[layer].sprite_slot]);
    para[layer].ypos[3] = para[layer].ypos[0]-IntToFloat(Game.SpriteHeight[para[layer].sprite_slot]);  
  }
  return layer;
}


static function PARALLAX::default_parallax()
{
  static_replacement = 701;
  para[0].active = true;
  para[0].sprite_slot = 645;
  para[0].xspeed         = 0.6;
  para[0].xscroll_repeat = true;
  para[0].autoscroll_x   = true;
  
  para[0].yspeed          = 0.5;
  para[0].yscroll_repeat  = false;
  para[0].autoscroll_y    = false;
  
  para[0].xpos[0] = 0.0;
	para[0].xpos[1] = IntToFloat(Game.SpriteWidth[para[0].sprite_slot]);
	para[0].xpos[2] = 0.0;
	para[0].xpos[3] = IntToFloat(Game.SpriteWidth[para[0].sprite_slot]);

  para[0].ypos[0] = IntToFloat(Screen.Height - Game.SpriteHeight[para[0].sprite_slot]);
  para[0].ypos[1] = para[0].ypos[0];
  para[0].ypos[2] = para[0].ypos[0]-IntToFloat(Game.SpriteHeight[para[0].sprite_slot]);
  para[0].ypos[3] = para[0].ypos[0]-IntToFloat(Game.SpriteHeight[para[0].sprite_slot]);
  
  para[1].active = true;
  para[1].sprite_slot = 644;
  para[1].xspeed         = 1.2;
  para[1].xscroll_repeat = true;
  para[1].autoscroll_x   = false; 
  
  para[1].yspeed         = 1.0;
  para[1].yscroll_repeat = false;
  para[1].autoscroll_y   = false;  

  
  para[1].xpos[0] = 0.0;
	para[1].xpos[1] = IntToFloat(Game.SpriteWidth[para[1].sprite_slot]);
	para[1].xpos[2] = 0.0;
	para[1].xpos[3] = IntToFloat(Game.SpriteWidth[para[1].sprite_slot]);

  para[1].ypos[0] = IntToFloat(Screen.Height - Game.SpriteHeight[para[1].sprite_slot]);
  para[1].ypos[1] = para[1].ypos[0];
  para[1].ypos[2] = para[1].ypos[0]-IntToFloat(Game.SpriteHeight[para[1].sprite_slot]);
  para[1].ypos[3] = para[1].ypos[0]-IntToFloat(Game.SpriteHeight[para[1].sprite_slot]);  
}


//*******************************************************************************
//* handle_parallax
//* updates the positions of the parallax backgrounds
//*
//*******************************************************************************
static function PARALLAX::handle_parallax() 
{
  if (!disable_parallax &&!pause_parallax) {
    if (frame_drop) current_basetile_y = TILES.getTileIndexYFromIndex(ego_stats.current_tile);

    int i = 0;
    while (i < MAX_PARALLAX) {
      if (para[i].active) {
        
        if (para[i].do_fadein) {
          if (para[i].transparency > 2) para[i].transparency -=2;
          else para[i].do_fadein = false;
        }
        else if (para[i].do_fadeout) {
          if (para[i].transparency < 98) para[i].transparency +=2;
          else para[i].do_fadeout = false;        
        }
          
        if (para[i].xscroll_repeat) {
          if (para[i].autoscroll_x) {
            if (para[i].xspeed >0.0) {
              para[i].xpos[0] += para[i].xspeed +(para[i].xspeed * -IntToFloat(cam_scroll_x));
              para[i].xpos[1] += para[i].xspeed +(para[i].xspeed * -IntToFloat(cam_scroll_x));
            }
            else  {
              para[i].xpos[0] += para[i].xspeed +(para[i].xspeed * IntToFloat(cam_scroll_x));
              para[i].xpos[1] += para[i].xspeed +(para[i].xspeed * IntToFloat(cam_scroll_x));              
            }
          }
          else if (cam_scroll_x !=0) {
            para[i].xpos[0] +=  para[i].xspeed * -IntToFloat(cam_scroll_x);
            para[i].xpos[1] +=  para[i].xspeed * -IntToFloat(cam_scroll_x);
          }
        }
        else if (cam_scroll_x !=0 && 
          (FloatToInt(para[i].xpos[0], eRoundNearest) <=0 )
          && FloatToInt(para[i].xpos[0], eRoundNearest) + Game.SpriteWidth[para[i].sprite_slot]>=Screen.Width) {
            
            para[i].xpos[0] -=  para[i].xspeed * IntToFloat(cam_scroll_x);
            
            if (FloatToInt(para[i].xpos[0], eRoundNearest) + Game.SpriteWidth[para[i].sprite_slot] <Screen.Width)
              para[i].xpos[0] = IntToFloat(Screen.Width-Game.SpriteWidth[para[i].sprite_slot]);
              
            else if (FloatToInt(para[i].xpos[0], eRoundNearest) >0) 
              para[i].xpos[0] = 0.0;
        }
        
        if (para[i].yscroll_repeat) {
          if (para[i].autoscroll_y) {
            if (para[i].yspeed > 0.0) {
              para[i].ypos[0] += para[i].yspeed-(para[i].yspeed * -IntToFloat(cam_scroll_y));
              para[i].ypos[2] += para[i].yspeed-(para[i].yspeed * -IntToFloat(cam_scroll_y));              
            }
            else {
              para[i].ypos[0] += para[i].yspeed-(para[i].yspeed * IntToFloat(cam_scroll_y));
              para[i].ypos[2] += para[i].yspeed-(para[i].yspeed * IntToFloat(cam_scroll_y));                
            }

          }
          else if (cam_scroll_y !=0) {
              para[i].ypos[0] -= para[i].yspeed * IntToFloat(cam_scroll_y);
              para[i].ypos[2] -= para[i].yspeed * IntToFloat(cam_scroll_y);
          }
        }
        else if (cam_scroll_y !=0 && 
                (FloatToInt(para[i].ypos[0], eRoundNearest)+Game.SpriteHeight[para[i].sprite_slot]>= Screen.Height 
                && FloatToInt(para[i].ypos[0], eRoundNearest) - Screen.Height  <=0) ) {
          
          if (para[i].basetile_y == 0 || para[i].basetile_y > current_basetile_y || cam_scroll_y > 0) {
            
            para[i].ypos[0] -=  para[i].yspeed * IntToFloat(cam_scroll_y);
            
            if (FloatToInt(para[i].ypos[0], eRoundNearest)+Game.SpriteHeight[para[i].sprite_slot]< Screen.Height) {
              para[i].ypos[0] = IntToFloat(Screen.Height - Game.SpriteHeight[para[i].sprite_slot]);
            }   
            else if (FloatToInt(para[i].ypos[0], eRoundNearest) > 0 ) {    
              para[i].ypos[0] = 0.0;
            }          
          }

        }    
        
        
        if (para[i].xscroll_repeat && ((para[i].autoscroll_x && para[i].xspeed > 0.0) || cam_scroll_x < 0)) {
          if ( FloatToInt(para[i].xpos[0], eRoundNearest) > Screen.Width ) para[i].xpos[0] =  para[i].xpos[1] - IntToFloat(Game.SpriteWidth[para[i].sprite_slot]);  
          if ( FloatToInt(para[i].xpos[1], eRoundNearest) > Screen.Width ) para[i].xpos[1] =  para[i].xpos[0] - IntToFloat(Game.SpriteWidth[para[i].sprite_slot]);
          
          if ( FloatToInt(para[i].xpos[0], eRoundNearest) < 0 && FloatToInt(para[i].xpos[1], eRoundNearest) <0 ) para[i].xpos[1] =  para[i].xpos[0] + IntToFloat(Game.SpriteWidth[para[i].sprite_slot]);  
          if ( FloatToInt(para[i].xpos[1], eRoundNearest) < 0 && FloatToInt(para[i].xpos[0], eRoundNearest) <0 ) para[i].xpos[0] =  para[i].xpos[1] + IntToFloat(Game.SpriteWidth[para[i].sprite_slot]);  

        }      
        else if (para[i].xscroll_repeat && ((para[i].autoscroll_x && para[i].xspeed < 0.0) || cam_scroll_x > 0)){
          if ( FloatToInt(para[i].xpos[0], eRoundNearest) + Game.SpriteWidth[para[i].sprite_slot] < 0 ) para[i].xpos[0] = para[i].xpos[1] + IntToFloat(Game.SpriteWidth[para[i].sprite_slot]);
          if ( FloatToInt(para[i].xpos[1], eRoundNearest) + Game.SpriteWidth[para[i].sprite_slot] < 0 ) para[i].xpos[1] = para[i].xpos[0] + IntToFloat(Game.SpriteWidth[para[i].sprite_slot]);

        }
        
        if (para[i].yscroll_repeat && ((para[i].autoscroll_y && para[i].yspeed > 0.0) || cam_scroll_y < 0) ) {
          if ( FloatToInt(para[i].ypos[0], eRoundNearest) > Screen.Height ) para[i].ypos[0] = para[i].ypos[2] - IntToFloat(Game.SpriteHeight[para[i].sprite_slot]);
          if ( FloatToInt(para[i].ypos[2], eRoundNearest) > Screen.Height ) para[i].ypos[2] = para[i].ypos[0] - IntToFloat(Game.SpriteHeight[para[i].sprite_slot]);
          
          if ( FloatToInt(para[i].ypos[0], eRoundNearest) < 0 && FloatToInt(para[i].ypos[2], eRoundNearest) <0 ) para[i].ypos[2] =  para[i].ypos[0] + IntToFloat(Game.SpriteHeight[para[i].sprite_slot]);  
          if ( FloatToInt(para[i].ypos[2], eRoundNearest) < 0 && FloatToInt(para[i].ypos[0], eRoundNearest) <0 ) para[i].ypos[0] =  para[i].ypos[2] + IntToFloat(Game.SpriteHeight[para[i].sprite_slot]);            

        }
        else if (para[i].yscroll_repeat && ((para[i].autoscroll_y && para[i].yspeed < 0.0) || cam_scroll_y > 0)) {
          if ( FloatToInt(para[i].ypos[0], eRoundNearest) + Game.SpriteHeight[para[i].sprite_slot] < 0  ) para[i].ypos[0] = para[i].ypos[2] + IntToFloat(Game.SpriteHeight[para[i].sprite_slot]);
          if ( FloatToInt(para[i].ypos[2], eRoundNearest) + Game.SpriteHeight[para[i].sprite_slot] < 0  ) para[i].ypos[2] = para[i].ypos[0] + IntToFloat(Game.SpriteHeight[para[i].sprite_slot]);

        }
        
        para[i].xpos[2] = para[i].xpos[0];
        para[i].xpos[3] = para[i].xpos[1];
        para[i].ypos[1] = para[i].ypos[0];
        para[i].ypos[3] = para[i].ypos[2];
      }
      i++;
      
    }
  }
}

//*******************************************************************************
//* set_parallax_sprite
//* draws the parallax
//*
//*******************************************************************************
static function PARALLAX::set_sprite(short layer, short sprite_slot) {
  para[layer].sprite_slot = sprite_slot;
}


//*******************************************************************************
//* set_xspeed
//*
//*******************************************************************************
static function PARALLAX::set_xspeed(short layer, float speed) {
  para[layer].xspeed = speed;
}


//*******************************************************************************
//* set_yspeed
//*
//*******************************************************************************
static function PARALLAX::set_yspeed(short layer, float speed) {
  para[layer].yspeed = speed;
}

//*******************************************************************************
//* set_baseline_y
//*
//*******************************************************************************
static function PARALLAX::set_basetile_y(short layer, short basetile) {
  para[layer].basetile_y = basetile;
  current_basetile_y = TILES.getTileIndexYFromIndex(ego_stats.current_tile);
}

//*******************************************************************************
//* set_autoscroll
//*
//*******************************************************************************
static function PARALLAX::set_autoscroll(short layer, bool autoscroll_x, bool autoscroll_y) {
  para[layer].autoscroll_x = autoscroll_x;
  para[layer].autoscroll_y = autoscroll_y;
}


//*******************************************************************************
//* set_scroll_repeat
//*
//*******************************************************************************
static function PARALLAX::set_scroll_repeat(short layer, bool xscroll_repeat, bool yscroll_repeat) {
  para[layer].xscroll_repeat = xscroll_repeat;
  para[layer].yscroll_repeat = yscroll_repeat;
}


//*******************************************************************************
//* draw_parallax
//* draws the parallax
//*
//*******************************************************************************
static function PARALLAX::draw_parallax(bool do_foreground) 
{
  if (!disable_parallax && !pause_parallax) {

    int i;

    if (do_foreground) {
      DrawingSurface *foregroundSurface = Foreground.GetDrawingSurface();
      while (i < MAX_PARALLAX) {
        if (para[i].active && para[i].foreground) {
          ppos[0] =FloatToInt ( para[i].xpos[0], eRoundNearest);
          ppos[1] =FloatToInt ( para[i].ypos[0], eRoundNearest);
          ppos[2] =FloatToInt ( para[i].xpos[1], eRoundNearest);
          ppos[3] =FloatToInt ( para[i].ypos[1], eRoundNearest);
          ppos[4] =FloatToInt ( para[i].xpos[2], eRoundNearest);
          ppos[5] =FloatToInt ( para[i].ypos[2], eRoundNearest);
          ppos[6] =FloatToInt ( para[i].xpos[3], eRoundNearest);
          ppos[7] =FloatToInt ( para[i].ypos[3], eRoundNearest);
          foregroundSurface.DrawImage (ppos[0], ppos[1], para[i].sprite_slot, para[i].transparency);
          foregroundSurface.DrawImage (ppos[2], ppos[3], para[i].sprite_slot, para[i].transparency);
          foregroundSurface.DrawImage (ppos[4], ppos[5], para[i].sprite_slot, para[i].transparency);
          foregroundSurface.DrawImage (ppos[6], ppos[7], para[i].sprite_slot, para[i].transparency);          
        }
        i++;
      }
      foregroundSurface.Release();
    }
    else {
      DrawingSurface *roomSurface = Room.GetDrawingSurfaceForBackground();
      while (i < MAX_PARALLAX) {
        if (para[i].active && !para[i].foreground) {
          ppos[0] =FloatToInt ( para[i].xpos[0], eRoundNearest);
          ppos[1] =FloatToInt ( para[i].ypos[0], eRoundNearest);
          ppos[2] =FloatToInt ( para[i].xpos[1], eRoundNearest);
          ppos[3] =FloatToInt ( para[i].ypos[1], eRoundNearest);
          ppos[4] =FloatToInt ( para[i].xpos[2], eRoundNearest);
          ppos[5] =FloatToInt ( para[i].ypos[2], eRoundNearest);
          ppos[6] =FloatToInt ( para[i].xpos[3], eRoundNearest);
          ppos[7] =FloatToInt ( para[i].ypos[3], eRoundNearest);        
          roomSurface.DrawImage (ppos[0], ppos[1], para[i].sprite_slot, para[i].transparency);
          roomSurface.DrawImage (ppos[2], ppos[3], para[i].sprite_slot, para[i].transparency);
          roomSurface.DrawImage (ppos[4], ppos[5], para[i].sprite_slot, para[i].transparency);
          roomSurface.DrawImage (ppos[6], ppos[7], para[i].sprite_slot, para[i].transparency);
        }
        i++;
      }
      roomSurface.Release();    
    }
  }
  else if (!do_foreground) {
    DrawingSurface *roomSurface = Room.GetDrawingSurfaceForBackground();
    roomSurface.DrawImage(0, 0, static_replacement);
    roomSurface.Release(); 
  }

}

 static function PARALLAX::fade_in(int layer) {
   //para[layer].transparency = 98;
   para[layer].do_fadein = true;
 }
  static function PARALLAX::fade_out(int layer) {
   //para[layer].transparency = 2;
   para[layer].do_fadeout = true;
 }