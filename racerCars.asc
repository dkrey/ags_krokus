cCars thecars[RACR_MAX_CARS];
int max_car_idx;

//*******************************************************************************
//* CARS::clear
//* 
//*******************************************************************************
static void CARS::clear(int idx) 
{
  thecars[idx].active = false;
  thecars[idx].sprite_slot = 0;
  thecars[idx].offset  = 0.0;
  thecars[idx].z       = 0.0;
  thecars[idx].speed   = 0.0;
  thecars[idx].percent = 0.0;
  thecars[idx].destX   = 0;
  thecars[idx].destY   = 0;
  thecars[idx].destW   = 0;
  thecars[idx].destH   = 0;
  thecars[idx].view    = 0;
  thecars[idx].loop    = 0;
  thecars[idx].vf      = null;
  thecars[idx].frame       = 0;
  thecars[idx].frame_cnt   = 0;
  thecars[idx].frame_delay = 0;
  thecars[idx].is_destructible = false;
  thecars[idx].is_solid = false;
  thecars[idx].is_dying = false;
  thecars[idx].is_dead = false;

}


//*******************************************************************************
//* CARS::clear_all
//* 
//*******************************************************************************
static void CARS::clear_all()
{
  int i=0;
  while (i < max_car_idx ) {
    CARS.clear(i);
    i++;
  }
  max_car_idx = 0;
}


//*******************************************************************************
//* CARS::get_free
//* 
//*******************************************************************************
static int CARS::get_free() 
{
  int i=0;
  while (i<RACR_MAX_CARS) {
    if (!thecars[i].active) return i;
    i++;
  }
  return -1;
}

//*******************************************************************************
//* CARS::get_sprite_slot
//* 
//*******************************************************************************
static int CARS::get_sprite_slot(int idx) 
{
  return thecars[idx].sprite_slot;
}

//*******************************************************************************
//* CARS::get_sprite_slot
//* 
//*******************************************************************************
static int CARS::get_loop(int idx) 
{
  return thecars[idx].loop;
}

//*******************************************************************************
//* CARS::set_sprite_slot
//* 
//*******************************************************************************
static void CARS::set_loop(int idx,  int loop) 
{
  thecars[idx].loop = loop;
}

//*******************************************************************************
//* CARS::get_sprite_slot
//* 
//*******************************************************************************
static int CARS::get_view(int idx) 
{
  return thecars[idx].view;
}

//*******************************************************************************
//* CARS::set_view
//* 
//*******************************************************************************
static void CARS::set_view(int idx,  int view) 
{
  thecars[idx].view = view;
}

//*******************************************************************************
//* CARS::get_frame
//* 
//*******************************************************************************
static int CARS::get_frame(int idx) 
{
  return thecars[idx].frame;
}

//*******************************************************************************
//* CARS::set_frame
//* 
//*******************************************************************************
static void CARS::set_frame(int idx,  int frame) 
{
  thecars[idx].frame = frame;
}

//*******************************************************************************
//* CARS::is_dying
//* 
//*******************************************************************************
static bool CARS::is_dying(int idx) 
{
  return thecars[idx].is_dying;
}

//*******************************************************************************
//* CARS::get_death_status
//* 
//*******************************************************************************
static bool CARS::is_dead(int idx) 
{
  return thecars[idx].is_dead;
}

//*******************************************************************************
//* CARS::set_dying
//* 
//*******************************************************************************
static void CARS::set_dying(int idx) 
{
  thecars[idx].frame_cnt = 0;
  thecars[idx].frame = 0;
  thecars[idx].loop = 3;
  thecars[idx].is_dying = true;
}
//*******************************************************************************
//* CARS::get_offset
//* 
//*******************************************************************************
static float CARS::get_offset(int idx) 
{
  return thecars[idx].offset;
}

//*******************************************************************************
//* CARS::set_offset
//* 
//*******************************************************************************
static void CARS::set_offset(int idx,  float val) 
{
  thecars[idx].offset = val;
}


//*******************************************************************************
//* CARS::get_speed
//* 
//*******************************************************************************
static float CARS::get_speed(int idx) 
{
  return thecars[idx].speed;
}

//*******************************************************************************
//* CARS::get_speed
//* 
//*******************************************************************************
static void CARS::set_speed(int idx, float val) 
{
  thecars[idx].speed = val;
}

//*******************************************************************************
//* CARS::get_z
//* 
//*******************************************************************************
static float CARS::get_z(int idx) 
{
  return thecars[idx].z;
}
//*******************************************************************************
//* CARS::get_z
//* 
//*******************************************************************************
static void CARS::set_z(int idx, float val) 
{
  thecars[idx].z = val;
}

//*******************************************************************************
//* CARS::get_percent
//* 
//*******************************************************************************
static float CARS::get_percent(int idx) 
{
  return thecars[idx].percent;
}
//*******************************************************************************
//* CARS::set_percent
//* 
//*******************************************************************************
static void CARS::set_percent(int idx, float val) 
{
  thecars[idx].percent = val;
}

//*******************************************************************************
//* CARS::get_segment
//* 
//*******************************************************************************
static int CARS::get_segment(int idx) 
{
  return thecars[idx].seg_idx;
}
//*******************************************************************************
//* CARS::set_segment
//* 
//*******************************************************************************
static void CARS::set_segment(int idx, int val) 
{
  thecars[idx].seg_idx = val;
}

//*******************************************************************************
//* CARS::get_percent
//* 
//*******************************************************************************
static int CARS::get_car_count() 
{
  return max_car_idx;
}


//*******************************************************************************
//* CARS::animate
//* 
//*******************************************************************************
static void CARS::animate(int idx)
{
  int frmcount = Game.GetFrameCountForLoop(thecars[idx].view,  thecars[idx].loop);

  if (frmcount > 1 && !thecars[idx].is_dying) {
    
    // Animation delay
    if (thecars[idx].frame_delay > 0 && thecars[idx].frame_cnt > thecars[idx].frame_delay) 
    { 
      //Frame progression
      if (thecars[idx].frame >= frmcount-1) thecars[idx].frame = 0;
      else thecars[idx].frame ++;

      thecars[idx].vf = Game.GetViewFrame(thecars[idx].view, thecars[idx].loop, thecars[idx].frame);
      thecars[idx].sprite_slot  = thecars[idx].vf.Graphic; 

      thecars[idx].frame_cnt  = 0;
    }
    else {
      thecars[idx].frame_cnt++;
    }
  }

  // Animate last sequence once
  else if (frmcount > 1  && thecars[idx].is_dying && !thecars[idx].is_dead) {
    // Animation delay
    if (thecars[idx].frame_delay > 0 && thecars[idx].frame_cnt > thecars[idx].frame_delay) 
    { 
      // last frame - car is "dead"
      if (thecars[idx].frame >= frmcount-1) {
        thecars[idx].is_dead = true;
        thecars[idx].frame = 0;
      }
      
      else {
        thecars[idx].frame ++;
        thecars[idx].vf = Game.GetViewFrame(thecars[idx].view, thecars[idx].loop, thecars[idx].frame);
        thecars[idx].sprite_slot  = thecars[idx].vf.Graphic;
        thecars[idx].frame_cnt  = 0;
        
      }

    }
    else {
      thecars[idx].frame_cnt++;
    }    
  }
  else if (!thecars[idx].is_dead && !thecars[idx].is_dying){
    thecars[idx].vf = Game.GetViewFrame(thecars[idx].view, thecars[idx].loop, thecars[idx].frame);
    thecars[idx].sprite_slot  = thecars[idx].vf.Graphic;    
  }  
}

//*******************************************************************************
//* CARS::add
//* 
//*******************************************************************************
static int CARS::add(eCarType cartype, float offset, float z, float speed)
{
  int idx = CARS.get_free();
  max_car_idx = Util.max_i(idx, max_car_idx);
  
  if (cartype == eCarMine) {
    
    thecars[idx].view = 27;
    thecars[idx].speed = 0.3;
    thecars[idx].is_destructible = true;
    thecars[idx].is_solid = true;    
  }
  else if (cartype == eCarWave) {
    thecars[idx].view = 28;
    thecars[idx].speed = 0.0;
    thecars[idx].is_destructible = false;
    thecars[idx].is_solid = false;    
  }
  else {
    thecars[idx].speed        = speed;
    thecars[idx].is_solid        = true;  
    thecars[idx].is_destructible = false;      
  }
  
  thecars[idx].loop = 0;
  thecars[idx].frame = 0;
  thecars[idx].frame_cnt = 0;
  thecars[idx].frame_delay = GetGameSpeed()/6;
  
  thecars[idx].vf = Game.GetViewFrame(thecars[idx].view, thecars[idx].loop, thecars[idx].frame);
  thecars[idx].sprite_slot  = thecars[idx].vf.Graphic;
  
  thecars[idx].active       = true;
  thecars[idx].offset       = offset;
  
  thecars[idx].z            = z;
  thecars[idx].destX   = 0;
  thecars[idx].destY   = 0;
  thecars[idx].destW   = 0;
  thecars[idx].destH   = 0;  
  thecars[idx].is_dying = false;  
  thecars[idx].is_dead = false;  
  
  return idx;
}

static bool CARS::is_active(int n)
{
  return thecars[n].active;
}


//*******************************************************************************
//* CARS::prepare
//* 
//*******************************************************************************
static void CARS::prepare(int idx, int roadWidth, int width, float scale, float sprite_scale,  int sprite_slot, int destX, int destY,  float offsetX, float offsetY)
{
  int spriteW = Game.SpriteWidth[sprite_slot];
  int spriteH = Game.SpriteHeight[sprite_slot];

  int destW  = FloatToInt((IntToFloat(spriteW) * scale * IntToFloat(width) / 2.0) * (sprite_scale * IntToFloat(roadWidth)));
  int destH  = FloatToInt((IntToFloat(spriteH) * scale * IntToFloat(width) / 2.0) * (sprite_scale * IntToFloat(roadWidth)));
  

  destX = destX + FloatToInt((IntToFloat(destW) * (offsetX)));
  destY = destY + FloatToInt((IntToFloat(destH) * (offsetY)));
  
  thecars[idx].destX = destX;
  thecars[idx].destY = destY;
  thecars[idx].destW = destW;
  thecars[idx].destH = destH;
  
  
}

//*******************************************************************************
//* CARS::get_destX
//* 
//*******************************************************************************
static int CARS::get_destX(int idx) 
{
  return thecars[idx].destX;
}
//*******************************************************************************
//* CARS::get_destY
//* 
//*******************************************************************************
static int CARS::get_destY(int idx) 
{
  return thecars[idx].destY;
}
//*******************************************************************************
//* CARS::get_destW
//* 
//*******************************************************************************
static int CARS::get_destW(int idx) 
{
  return thecars[idx].destW;
}
//*******************************************************************************
//* CARS::get_destH
//* 
//*******************************************************************************
static int CARS::get_destH(int idx) 
{
  return thecars[idx].destH;
}

//*******************************************************************************
//* CARS::is_solid
//* 
//*******************************************************************************
static bool CARS::is_solid(int idx) 
{
  return thecars[idx].is_solid;
}
//*******************************************************************************
//* CARS::is_solid
//* 
//*******************************************************************************
static bool CARS::is_destructible(int idx) 
{
  return thecars[idx].is_destructible;
}