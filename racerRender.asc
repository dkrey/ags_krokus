import cColors colors[RACR_MAX_COLOR_TYPES];
import cRacerVars rv;
//*******************************************************************************
//* DrawingSurface.DrawPolygon
//* 
//*******************************************************************************
void DrawPolygon(this DrawingSurface*, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4)
{
  /*
  this.DrawLine(x1, y1, x2, y2);
  this.DrawLine(x2, y2, x3, y3);
  this.DrawLine(x3, y3, x4, y4);
  this.DrawLine(x4, y4, x1, y1);  
  */
   
  this.DrawTriangle(x1, y1, x2, y2, x4, y4);
  this.DrawTriangle(x4, y4, x2, y2, x3, y3);
  /*
  
  int dist1 = Util.distance(x1, y1, x3, y3);
  int dist2 = Util.distance(x2, y2, x4, y4);
  
  if (dist1 < dist2) {
    this.DrawTriangle(x1, y1, x2, y2, x3, y3);
    this.DrawTriangle(x1, y1, x3, y3, x4, y4);    
  }
 
  else {
    this.DrawTriangle(x1, y1, x2, y2, x4, y4);
    this.DrawTriangle(x4, y4, x2, y2, x3, y3);
  }
  */
}


//*******************************************************************************
//* Render static funcions
//* 
//*******************************************************************************
//*******************************************************************************
//* Render::_rumbleWidth
//* 
//*******************************************************************************
static int Render::_rumbleWidth (int projectedRoadWidth, int lanes)
{
  //int result =  FloatToInt(IntToFloat(projectedRoadWidth) / IntToFloat(Util.max_i(6,  2*lanes)));
  int result =  projectedRoadWidth/ Util.max_i(6,  2*lanes);
  return result;
}

//*******************************************************************************
//* Render::_laneMarkerWidth
//* 
//*******************************************************************************
static int Render::_laneMarkerWidth (int projectedRoadWidth, int lanes)
{
  //int result =  FloatToInt(IntToFloat(projectedRoadWidth) / IntToFloat(Util.max_i(32,  8*lanes)));
  int result =  (projectedRoadWidth) / Util.max_i(32,  8*lanes);
  return result;
}

//*******************************************************************************
//* Render::fog  bogus
//* 
//*******************************************************************************
static void Render::fog(DynamicSprite *ds,int x, int y, int width,int height,int amount)
{
  int fogsprite = 13;
  DrawingSurface *surf = ds.GetDrawingSurface();
  surf.DrawImage(x, y, fogsprite, 100-amount, width, height);
  surf.Release();
}

//*******************************************************************************
//* Render::polygon
//* 
//*******************************************************************************
static void Render::polygon(DynamicSprite *ds, int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4, int color)
{
  DrawingSurface *surf = ds.GetDrawingSurface();
  surf.DrawingColor = color;
  surf.DrawPolygon(x1, y1, x2, y2, x3, y3, x4, y4);
  surf.Release();
}

//*******************************************************************************
//* Render::segment
//* 
//*******************************************************************************
static void Render::segment(DynamicSprite *ds, int width, int lanes, int x1, int y1, int w1, int x2, int y2, int w2, int fog, eColorType color_type, int n)
{

  int r1 = Render._rumbleWidth(w1, lanes);
  int r2 = Render._rumbleWidth(w2, lanes);
  int l1 = Render._laneMarkerWidth(w1, lanes);
  int l2 = Render._laneMarkerWidth(w2, lanes);
  int lanew1, lanew2, lanex1, lanex2, lane;
  
  DrawingSurface *surf = ds.GetDrawingSurface();
  
  cColors current_col;
  
  if (fog > 0) {
    float fog_factor = rv.fogDensity * (IntToFloat(fog) / 100.0);

    int r = Util.colorToRGB( colors[color_type].grass, 0);
    int g = Util.colorToRGB( colors[color_type].grass, 1);
    int b = Util.colorToRGB( colors[color_type].grass, 2);
   
    int r_2 = Util.clampInt(FloatToInt( (IntToFloat(r) * (1.0- fog_factor))), 0, 255);
    int g_2 = Util.clampInt(FloatToInt( (IntToFloat(g) * (1.0- fog_factor))), 0, 255);
    int b_2 = Util.clampInt(FloatToInt( (IntToFloat(b) * (1.0- fog_factor))), 0, 255);

    current_col.grass = Game.GetColorFromRGB(r_2, g_2, b);
  }
  else {   
    current_col.grass  = colors[color_type].grass;

  }
  current_col.rumble = colors[color_type].rumble;
  current_col.road   = colors[color_type].road;
  current_col.lane   = colors[color_type].lane;
  
  //Draw Lines instead of Polygons if segment width is 1px
  if (y1 -y2 <2) {

    
    surf.DrawingColor = current_col.grass;
    surf.DrawLine(0,y1, width, y1);
    
    surf.DrawingColor = current_col.rumble;
    surf.DrawLine(x1-w1-r1, y1, x1+w1+r2, y1);
    
    surf.DrawingColor = current_col.road;
    surf.DrawLine(x1-w1, y1, x1+w1, y1);    
    
  }
  //Draw Rectangles instead of Polygons if segment width is 2px
  else if (y1 -y2 <3 ) {
    surf.DrawingColor = current_col.grass;
    surf.DrawRectangle(0, y1, width, y2);
    surf.DrawingColor = current_col.rumble;
    surf.DrawRectangle(x1-w1-r1,y1, x2+w2+r2, y2 );
    surf.DrawingColor = current_col.road;
    surf.DrawRectangle(x1-w1, y1, x2+w2, y2); 
    
  }
  // else draw Polygons
  else {
    surf.DrawingColor = current_col.grass;
    surf.DrawRectangle(0, y1, width, y2);
    
    surf.DrawingColor = current_col.rumble;
    surf.DrawPolygon(x1-w1-r1, y1, x1+w1+r2, y1,x2+w2+r2, y2, x2-w2-r1, y2);
    surf.DrawingColor = current_col.road;
    surf.DrawPolygon(x1-w1, y1, x1+w1, y1, x2+w2, y2, x2-w2, y2);    
  }
  
  if (colors[color_type].lane > -1) {
    lanew1 = w1*2/lanes;
    lanew2 = w2*2/lanes;
    lanex1 = x1 - w1 + lanew1;
    lanex2 = x2 - w2 + lanew2;
    
    lane = 1;
    while (lane < lanes) {
      surf.DrawingColor = current_col.lane;
      if (y1 -y2 <3) {
        surf.DrawRectangle(lanex1 - l1/2, y1,  lanex2 + l2/2, y2);
      }
      else {
        surf.DrawPolygon(lanex1 - l1/2, y1, lanex1 + l1/2, y1, lanex2 + l2/2, y2, lanex2 - l2/2, y2);
      }
      lanex1 += lanew1;
      lanex2 += lanew2;       
      lane++;
    }

  }
  //if (fog > 0) Render.fog(ds, 0, y1, width, y2-y1, fog);   
  
  surf.Release();
}



//*******************************************************************************
//* Render::sprite
//* 
//*******************************************************************************
static void Render::simple_sprite(DynamicSprite *ds, int sprite_slot, int destX, int destY, int destW, int destH, int clipY )
{
  int spriteW = Game.SpriteWidth[sprite_slot];
  int spriteH = Game.SpriteHeight[sprite_slot];
  
  int clipH;
  if (clipY != 0) clipH =  Util.max_i(0, destY + destH - clipY);
  else clipH = 0;
  
  if (clipH < destH) {
    DynamicSprite *spr = DynamicSprite.CreateFromExistingSprite(sprite_slot);
    spr.Crop(0, 0, spriteW, spriteH -(spriteH * clipH/destH));    
    DrawingSurface *surf = ds.GetDrawingSurface();
    
    surf.DrawImage(destX, destY, spr.Graphic, 0, destW, destH-clipH);
    
    surf.Release();
    spr.Delete();
  }
  
}

//*******************************************************************************
//* Render::sprite
//* 
//*******************************************************************************
static void Render::sprite(DynamicSprite *ds, int width, int height, int resolution, int roadWidth, float sprite_scale, int sprite_slot,  float scale, int destX, int destY, float offsetX, float offsetY, int clipY, String text)
{
  int spriteW = Game.SpriteWidth[sprite_slot];
  int spriteH = Game.SpriteHeight[sprite_slot];

  int destW  = FloatToInt((IntToFloat(spriteW) * scale * IntToFloat(width) / 2.0) * (sprite_scale * IntToFloat(roadWidth)));
  int destH  = FloatToInt((IntToFloat(spriteH) * scale * IntToFloat(width) / 2.0) * (sprite_scale * IntToFloat(roadWidth)));
  

  destX = destX + FloatToInt((IntToFloat(destW) * (offsetX)));
  destY = destY + FloatToInt((IntToFloat(destH) * (offsetY)));
  
  
  int clipH;
  if (clipY != 0) clipH =  Util.max_i(0, destY + destH - clipY);
  else clipH = 0;
  
  if (clipH < destH) {
    DynamicSprite *spr = DynamicSprite.CreateFromExistingSprite(sprite_slot);
    spr.Crop(0, 0, spriteW, spriteH -(spriteH * clipH/destH));    
    DrawingSurface *surf = ds.GetDrawingSurface();
    
    surf.DrawingColor=15;
    surf.DrawImage(destX, destY, spr.Graphic, 0, destW, destH-clipH);
    surf.DrawString(destX+3, destY, eFontTinyOut, text);
    
    surf.Release();
    spr.Delete();
  }
  
}



//*******************************************************************************
//* Render::draw_horizont_line
//* 
//*******************************************************************************
static void Render::draw_horizont_line(DynamicSprite *ds, int width,  int y, eColorType color_type)
{
  DrawingSurface *surf = ds.GetDrawingSurface();
  surf.DrawingColor = colors[color_type].road;
  surf.DrawLine(0, y, width, y);
  surf.Release();
}





