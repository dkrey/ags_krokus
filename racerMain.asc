import cColors colors_dark;
import cColors colors_light;
import cRacerVars rv;
import cRoad road;
import cSegment segments[RACR_MAX_SEGMENTS];
import cSegment_point p1[RACR_MAX_SEGMENTS];
import cSegment_point p2[RACR_MAX_SEGMENTS];

import bool is_racer_engine_running, is_game_paused;

import int segment_cnt;
import int seg_point_cnt;

AudioChannel *sfx;
int items_collected;
import DrawingSurface *BackupSurface;
import cSpritePlayer player_sprites;

import int cam_scroll_x;

import bool block_controls;
import bool reset_player;

bool permanent_block_controls;

//*******************************************************************************
//* RACR::block_controls
//* 
//*******************************************************************************
static void RACR::turnoff_controls(bool block_enabled)
{
  permanent_block_controls = block_enabled;

}

//*******************************************************************************
//* RACR::get_lifes
//* 
//*******************************************************************************
static int RACR::get_lifes() {
  return rv.lifes;
}

//*******************************************************************************
//* RACR::set_lifes
//* 
//*******************************************************************************
static void RACR::set_lifes(int amount)
{
  rv.lifes = amount;
}

//*******************************************************************************
//* RACR::decrease_life
//* 
//*******************************************************************************
static void RACR::decrease_life()
{
  rv.lifes --;
}
//*******************************************************************************
//* RACR::increase_life
//* 
//*******************************************************************************
static void RACR::increase_life()
{
  rv.lifes ++;
}


//*******************************************************************************
//* RACR::render_road
//* 
//*******************************************************************************
static void RACR::render_road(int baseSegment_idx) 
{
  float basePercent   = Util.percentRemaining(IntToFloat(rv.position), IntToFloat(rv.segmentLength));
  int playerSegment   = TRACK.find_segment_index(rv.position+rv.playerZ);
  float playerPercent = Util.percentRemaining(IntToFloat(rv.position+rv.playerZ), IntToFloat(rv.segmentLength));
  
  float x  = 0.0;
  float dx = -(segments[baseSegment_idx].curve * basePercent);
 
  int maxy = rv.height;
  
  int i, n, segment, seg_loop_pos, seg_idx, seg_idx2;
  int fog;
  eColorType current_color;
  
  rv.playerY = Util.interpolate(p1[playerSegment].world_y, p2[playerSegment].world_y, playerPercent);
  
  float cam_x, cam_y, cam_z;
    
  // Draw Road
  n = 0;
  while (n < rv.drawDistance) 
  {
    seg_idx = (baseSegment_idx + n) % rv.segment_cnt;
    seg_idx2 = (baseSegment_idx + 1+ n) % rv.segment_cnt;
    
    segments[seg_idx].clip = maxy;
    fog = 0;
    
    if (seg_idx < baseSegment_idx) seg_loop_pos = (rv.trackLength);
    else  seg_loop_pos = 0;
  
    cam_x = rv.playerX * IntToFloat( rv.roadWidth)- x;
    cam_y = rv.playerY + IntToFloat(rv.cameraHeight);
    cam_z = IntToFloat(rv.position - seg_loop_pos);
    
    p2[seg_idx].project( cam_x - dx, cam_y, cam_z, rv.cameraDepth, rv.width, rv.height, rv.roadWidth);
    
    if (n==0) p1[seg_idx].project( cam_x, cam_y, cam_z, rv.cameraDepth, rv.width, rv.height, rv.roadWidth);
    else {
      p1[seg_idx2].copy(p2[seg_idx].camera_x, p2[seg_idx].camera_y, p2[seg_idx].camera_z, p2[seg_idx].screen_scale, 
                        p2[seg_idx].screen_x,
                        p2[seg_idx].screen_y, 
                        p2[seg_idx].screen_w);
    
    }
    
    
    x  += dx;
    dx += segments[seg_idx].curve;
    
    // if behind us or clip by (already rendered) segment -> continue
    if ((p1[seg_idx].camera_z > rv.cameraDepth  && (p2[seg_idx].screen_y < maxy) )) {

    
      //Darken colors in the last segment
      /*
      if (n > rv.drawDistance-rv.drawDistance / 6) {
        fog = n-(rv.drawDistance-rv.drawDistance / 6);
      }
      
      */
      fog = n-(rv.drawDistance-rv.drawDistance / 4);
      current_color = segments[seg_idx].color_type;
      
      Render.segment(rv.ds, rv.width, rv.lanes, 
        p1[seg_idx].screen_x, p1[seg_idx].screen_y, p1[seg_idx].screen_w, 
        p2[seg_idx].screen_x, p2[seg_idx].screen_y, p2[seg_idx].screen_w,
        fog,  
        current_color, seg_idx);
        
      maxy = p2[seg_idx].screen_y;
    }
    n++;
  }

  
  Render.draw_horizont_line(rv.ds, rv.width, maxy, eColorAllDarkBlue);
  
}

//*******************************************************************************
//* RACR::render_sprites
//* 
//*******************************************************************************
static void RACR::render_sprites(int baseSegment_idx)
{
  // Draw Sprites
  int n = rv.drawDistance-1;
  int seg_idx;
  int i;
  float spriteScale;
  
  while (n > 0) 
  {
    seg_idx = (baseSegment_idx + n) % rv.segment_cnt;
    spriteScale = p1[seg_idx].screen_scale;
    
    // render roadside sprites
    i = 0;
    while (i < segments[seg_idx].sprite_cnt) {
      int sprite_idx    = segments[seg_idx].sprites_idx[i];
      int sprite_slot   = SPRITES.get_sprite_slot(sprite_idx);
      
      if (sprite_slot > 0) {
        float sprite_offsetX = SPRITES.get_offset(sprite_idx);
        float sprite_offsetY = -1.0;        
        int spriteX = p1[seg_idx].screen_x + FloatToInt(spriteScale * sprite_offsetX * IntToFloat(rv.roadWidth * rv.width / 2));
        int spriteY = p1[seg_idx].screen_y;
        
        SPRITES.prepare(sprite_idx, rv.roadWidth, rv.width, spriteScale, rv.sprite_scale, sprite_slot, spriteX, spriteY, sprite_offsetX, sprite_offsetY);
        Render.simple_sprite(rv.ds, sprite_slot, SPRITES.get_destX(sprite_idx), SPRITES.get_destY(sprite_idx), SPRITES.get_destW(sprite_idx), SPRITES.get_destH(sprite_idx), segments[seg_idx].clip);      
          
      }
      i++;
    }
    
    // render items
    if (segments[seg_idx].item_sprite > 0) {
      float item_offset = segments[seg_idx].item_offset;
      int itemX = p1[seg_idx].screen_x + FloatToInt(spriteScale * item_offset * IntToFloat(rv.roadWidth * rv.width / 2));
      int itemY = p1[seg_idx].screen_y;
      
      segments[seg_idx].prepare_item(rv.roadWidth, rv.width, spriteScale, rv.sprite_scale, itemX, itemY, item_offset, -1.0);
      Render.simple_sprite(rv.ds, segments[seg_idx].item_sprite, segments[seg_idx].item_destX, segments[seg_idx].item_destY, segments[seg_idx].item_destW, segments[seg_idx].item_destH, segments[seg_idx].clip);      
      //Render.sprite(rv.ds, rv.width, rv.height, rv.resolution, rv.roadWidth, spriteScale, segments[seg_idx].item_sprite, rv.sprite_scale, itemX, itemY, item_offet, -1.0, segments[seg_idx].clip, "");      
    }
    // render other cars
    i = 0;

    while (i < segments[seg_idx].car_cnt) 
    {
      int car_idx    = segments[seg_idx].cars_idx[i];
      if (car_idx > 0 && CARS.is_active(car_idx)) {
        
        CARS.animate(car_idx);
        int sprite_slot   = CARS.get_sprite_slot(car_idx);
        float sprite_offsetX = CARS.get_offset(car_idx);
        float sprite_offsetY = -1.0;
        
        spriteScale = Util.interpolate(p1[seg_idx].screen_scale, p2[seg_idx].screen_scale, CARS.get_percent(car_idx));
        int spriteX = FloatToInt( Util.interpolate(IntToFloat(p1[seg_idx].screen_x), IntToFloat(p2[seg_idx].screen_x), CARS.get_percent(car_idx)) + (spriteScale * CARS.get_offset(car_idx) * IntToFloat(rv.roadWidth * rv.width / 2)), eRoundNearest);
        int spriteY = FloatToInt(Util.interpolate(IntToFloat(p1[seg_idx].screen_y), IntToFloat(p2[seg_idx].screen_y), CARS.get_percent(car_idx)), eRoundNearest); 
        
        CARS.prepare(car_idx, rv.roadWidth, rv.width, spriteScale, rv.sprite_scale, sprite_slot, spriteX, spriteY, sprite_offsetX, sprite_offsetY);
        Render.simple_sprite(rv.ds, sprite_slot, CARS.get_destX(car_idx), CARS.get_destY(car_idx), CARS.get_destW(car_idx), CARS.get_destH(car_idx), segments[seg_idx].clip);
        
        //Render.sprite(rv.ds, rv.width, rv.height, rv.resolution, rv.roadWidth, spriteScale, sprite_slot, rv.sprite_scale, spriteX, spriteY, sprite_offsetX, sprite_offsetY, segments[seg_idx].clip, String.Format("i%d s%d",car_idx, seg_idx));
      }      
      
      i++;
    }
    
    
    n--;
  }
}

//*******************************************************************************
//* RACR::render_sprites_behind
//* 
//*******************************************************************************
static void RACR::render_sprites_behind(int baseSegment_idx)
{
  int test = TRACK.find_segment_index(rv.position);  
  int n = rv.playerSegment - baseSegment_idx;
  
  while (n > 0) 
  {
    int seg_idx = (baseSegment_idx + n) % rv.segment_cnt;
    // render other cars
    int i = 0;

    while (i < segments[seg_idx].car_cnt) 
    {
      int car_idx    = segments[seg_idx].cars_idx[i];
      int car_seg = CARS.get_segment(car_idx);
      
      if (car_idx > 0 && CARS.is_active(car_idx) && car_seg < rv.playerSegment) {
        
        Render.simple_sprite(rv.ds, CARS.get_sprite_slot(car_idx), CARS.get_destX(car_idx), CARS.get_destY(car_idx), CARS.get_destW(car_idx), CARS.get_destH(car_idx), segments[seg_idx].clip);
      }        
      i++;
    }
    n--;
  }
  
 
}


//*******************************************************************************
//* RACR::render_road
//* 
//*******************************************************************************
static void RACR::render()
{
  DrawingSurface *surf = rv.ds.GetDrawingSurface();
  surf.Clear();
  surf.Release();
  int base_segment = TRACK.find_segment_index(rv.position);
  RACR.render_road(base_segment);
  RACR.render_sprites(base_segment);
  PLAYR.render();
  RACR.render_sprites_behind(base_segment);
  
  DrawingSurface*roomsurf = Room.GetDrawingSurfaceForBackground();
  roomsurf.DrawImage(0, 0, rv.ds.Graphic);
  roomsurf.Release();  
}

//*******************************************************************************
//* RACR::handle_controls
//* 
//*******************************************************************************
static void RACR::update()
{

  int playerSegment = TRACK.find_segment_index(rv.position + rv.playerZ);
  rv.playerSegment = playerSegment;
  float dt = rv.step * 1.2;
  float speedPercent  = rv.speed / rv.maxSpeed;
  int n;
  int startPosition = rv.position;
  // at top speed, should be able to cross from left to right (-1 to 1) in 1 second
  float delta_x = dt * 0.5* speedPercent;
  
  rv.playerSegment = playerSegment;
  
  //TRACK.update_cars(dt, playerSegment);
  TRACK.update_cars(dt, playerSegment);
  
  rv.pos_delta = Util.increase(IntToFloat(rv.position), dt * rv.speed, IntToFloat(rv.trackLength));
  rv.pos_delta += rv.pos_remain;
  rv.pos_remain = rv.pos_delta - IntToFloat(FloatToInt(rv.pos_delta, eRoundDown));
  rv.position = FloatToInt(rv.pos_delta, eRoundDown);
  
  // Set Background Scrolling
  rv.scroll_delta = segments[playerSegment].curve * speedPercent * 100.0;
  
  if (!block_controls && !permanent_block_controls) {
    // Apply centrifugal force
    rv.playerX -= 100.0*(delta_x * speedPercent * segments[playerSegment].curve * rv.centrifugal);

    if (CTRL.isControlLeft()) {
      rv.playerX -= delta_x;
      player_sprites.dir = eDirectionLeft;
    }
    else if (CTRL.isControlRight()) {
      rv.playerX += delta_x;
      player_sprites.dir = eDirectionRight;
    }
    else player_sprites.dir = eDirectionNone;

    if (CTRL.isControlUp()) rv.speed = Util.accelerate(rv.speed, rv.accel, dt);
    else if (CTRL.isControlDown()) rv.speed = Util.accelerate(rv.speed, rv.breaking, dt);
    else rv.speed = Util.accelerate(rv.speed, rv.decel, dt);
  } 
  else rv.speed = Util.accelerate(rv.speed, rv.decel, dt);
  
  int idx, sprite_slot, spriteW, spriteX;
  float car_speed;
  
  playerSegment += 4; // Check collision slightly ahead;

  // Offroad
  if ((rv.playerX < -0.65) || (rv.playerX > 0.65)) {
  
    // slow offroad movement
    if (rv.speed > rv.offRoadLimit) rv.speed = Util.accelerate(rv.speed, rv.offRoadDecel, dt);
    
    // Collision with off-road objects
    n = 0;
    while (n < segments[playerSegment].sprite_cnt) {
      idx = segments[playerSegment].sprites_idx[n];
      sprite_slot  = SPRITES.get_sprite_slot(idx);
      if (sprite_slot > 0) {
        spriteX = SPRITES.get_destX(idx);
        spriteW = SPRITES.get_destW(idx);
        // On collision, put player on road
        if (Util.overlap2(rv.destX, rv.destW, spriteX, spriteW, 1)) {      
          rv.speed = 0.0;
          reset_player = true;
          PLAYR.set_invincible();
          RACR.decrease_life();
          n = segments[playerSegment].sprite_cnt;
          
        }
      }
      n++;
    }
 
  }
  else {
    // Collision with Items
    sprite_slot  = segments[playerSegment].item_sprite;
    if (sprite_slot > 0) {
      spriteX = segments[playerSegment].item_destX;
      spriteW = segments[playerSegment].item_destW;//FloatToInt(IntToFloat(Game.SpriteWidth[sprite_slot]) * sprite_scale); 
      //sprite_offset = segments[playerSegment].item_offset;  
      
      if (Util.overlap2(rv.destX, rv.destW, spriteX, spriteW, -1)) {      
        items_collected ++;
        segments[playerSegment].item_sprite = 0;
        segments[playerSegment].item_offset = 0.0;
      }    
    }
    
    // Collision with Cars
    n = 0;
    
    while (n < segments[playerSegment].car_cnt) {

      idx = segments[playerSegment].cars_idx[n];
        if (idx > 0) {
          sprite_slot  = CARS.get_sprite_slot(idx);
          
          if (sprite_slot > 0 && !CARS.is_dying(idx) && !CARS.is_dead(idx)) {
            car_speed = CARS.get_speed(idx);
            
            if (rv.speed > car_speed) {
                           
              int car_x = CARS.get_destX(idx);
              int car_w = CARS.get_destW(idx);
              float car_o = CARS.get_offset(idx);
            
              //if (Util.overlap(IntToFloat(rv.destX), IntToFloat(rv.destW), IntToFloat(car_x), IntToFloat(car_w),0.8)) {
              if (Util.overlap2(rv.destX, rv.destW, car_x, car_w, 1)) {
                
                
                if (CARS.is_solid(idx)) {
                  rv.speed = car_speed * (car_speed /rv.speed);
                }
                if (CARS.is_destructible(idx)) {
                  CARS.set_dying(idx);
                  PLAYR.set_invincible();
                  RACR.decrease_life();
                }

                n = segments[playerSegment].car_cnt;
              }
            }           
          }
        }
      n++;
    }

  }
  // dont ever let player go too far out of bounds
  rv.playerX = Util.clampFloat(rv.playerX, -1.5, 1.5);
  // or exceed maxSpeed 
  rv.speed   = Util.clampFloat(rv.speed, rv.minSpeed, rv.maxSpeed); 
  
  
  //Gui updates
  //lblSpeed.Text = String.Format("Speed: %d KM/h",6 * FloatToInt(rv.speed/600.0, eRoundNearest));
  //lblLaps.Text = String.Format("Laps: %d/%d",rv.laps_cnt, rv.laps_max);
  //if (items_collected == 1) lblGifts.Text = String.Format("%d Present",items_collected);
  //else lblGifts.Text = String.Format("%d Presents",items_collected);
  
  //Lap counter
  if ((rv.position > rv.playerZ)&& (startPosition < rv.playerZ)) rv.laps_cnt++;
  
}


//*******************************************************************************
//* clear_all_segments
//* 
//*******************************************************************************
static void RACR::clear_all_segments()
{
  int i;
  while (i<segment_cnt) {
    segments[i].clear();
    i++;
  }
  segment_cnt = 0;
}

//*******************************************************************************
//* clear_all_seg_points
//* 
//*******************************************************************************
static void RACR::clear_all_seg_points()
{
  int i;
  
  while (i <= seg_point_cnt / 2 ) {
    p1[i].clear();
    p2[i].clear();
    i++;
  }
  seg_point_cnt = 0;
}

//*******************************************************************************
//* Cleanup
//* 
//*******************************************************************************
static void RACR::cleanup()
{
  is_racer_engine_running = false;
  permanent_block_controls = false;
  if (rv.ds) rv.ds.Delete();
  if (player_sprites.overlay) player_sprites.overlay.Delete();
  rv.init();
  items_collected = 0;
 
  RACR.clear_all_segments();
  RACR.clear_all_seg_points();
  PARALLAX.clear_all();
  CARS.clear_all();
  SPRITES.clear_all();
}

//*******************************************************************************
//* Init RACR Vars
//* 
//*******************************************************************************
static void RACR::init() 
{
  CTRL.init_controls();
}

//*******************************************************************************
//* pause
//* 
//*******************************************************************************
static void RACR::pause()
{
  is_game_paused = true;
}
//*******************************************************************************
//* unpause
//* 
//*******************************************************************************
static void RACR::unpause()
{
  is_game_paused = false;
}
//*******************************************************************************
//* is_paused
//* 
//*******************************************************************************
static bool RACR::is_paused()
{
  return is_game_paused;
}
//*******************************************************************************
//* stop
//* 
//*******************************************************************************
static void RACR::stop()
{
  gRacing.Visible = false;
  is_racer_engine_running = false;
}
//*******************************************************************************
//* stop
//* 
//*******************************************************************************
static void RACR::start()
{
  gRacing.Visible = true;
  is_racer_engine_running = true;
}

//*******************************************************************************
//* get_max_labs
//* 
//*******************************************************************************
static int RACR::get_max_laps() {
  return rv.laps_max;
}
//*******************************************************************************
//* get_lab_cnt
//* 
//*******************************************************************************
static int  RACR::get_lap_cnt() {
  return rv.laps_cnt;
}
//*******************************************************************************
//* set_max_labs
//* 
//*******************************************************************************
static void RACR::set_max_laps(int cnt) {
  rv.laps_max = cnt;
}
//*******************************************************************************
//* get_collected_items
//* 
//*******************************************************************************
static int RACR::get_collected_items() {
  return items_collected;
}


static void RACR::handle_GUI()
{
  int life_meter_width = 50;//Game.SpriteWidth(117);
  int life_pill_width = 8;
  int max_lifes = 6; //life_meter_height / life_pill_height;
  
  if (rv.lifes > 0) {
    int bar_width = rv.lifes * life_pill_width +2;
    int bar_pos = (320 / 2 )- (bar_width /2);
    btnRacrEnergy.Width = bar_width;
    btnRacrEnergy.X = bar_pos;
  }
  else {
    btnRacrEnergy.Width = 0;
  }
  
}

//*******************************************************************************
//* repeatedly_execute_always
//* 
//*******************************************************************************
void repeatedly_execute_always() 
{
  if (is_racer_engine_running && !IsGamePaused())  {
    DrawingSurface *mainBackground = Room.GetDrawingSurfaceForBackground();
    mainBackground.Clear(COLOR_TRANSPARENT);
    mainBackground.Release();
    cam_scroll_x = FloatToInt(rv.scroll_delta, eRoundDown);
    PARALLAX.handle_parallax();
    PARALLAX.draw_parallax(false);
    RACR.handle_GUI();
    RACR.render();
    
    if (!is_game_paused) RACR.update();
    if (reset_player) PLAYR.reset();

  }
 
}


//*******************************************************************************
//* game_start()
//* 
//*******************************************************************************
void game_start() 
{
  RACR.init();
  items_collected = 0;

}
