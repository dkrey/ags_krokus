// new module script
#define inventoryGridWidth 5
#define inventoryGridHeight 4

#define inventoryItemWidth 20
#define inventoryItemHeight 20
#define inventoryAreaWidth 102
#define inventoryAreaHight 75
#define inventoryGap 14

//import cControls controls;
import cWeapons weapon[eWLastWeapon];
import bool inv_lock;
import bool use_lock;
bool init_inv_gui = false;
int inv_idx_x, inv_idx_y;
bool isDownKeyDown, isUpKeyDown, isLeftKeyDown, isRightKeyDown, IsInteractKeyDown, IsCloseKeyDown, IsInvKeyDown;
String inv_desc[50];

InventoryItem *SelectedItem;
DynamicSprite *inventoryItemsGraphic;

struct sInventory {
  int Y[inventoryGridHeight];
};
sInventory inventoryX[inventoryGridWidth];


function closeInventoryGui() 
{
  init_inv_gui = false;
  gInv.Visible = false;
  TENG.start();
}

function set_inv_description() {
 inv_desc[1] = String.Format("A flare gun[Ammo: %d ",weapon[eWPistol].ammo);
 inv_desc[2] = "A shiny Key";
 inv_desc[3] = "That mousegun that needs to leave";
 inv_desc[4] = "My bare fists";
 inv_desc[5] = "A tracking chip";
 inv_desc[6] = "Tasty apple +5hp";
 inv_desc[7] = "Bandages";
}


function inventory_action(InventoryItem *item) {
  if (item == iArmGun) {
    player.Speak("Weapon selected.",0, Normal, 0, false, true);
    ego_stats.anicounter_attack = -1;
    ego_stats.frame_attack = 0;
    ego_stats.ShotTimer = 0;    
    ego_stats.s_has_gun = true;
    ego_stats.active_weapon = eWPistol;
    ego_stats.s_mouseaiming = false;    
  }
  else if (item == iKey) player.Speak("A shiny key",0, Normal, 0, false);
  else if (item == iArmFist) {
    ego_stats.s_has_gun = false;
    ego_stats.anicounter_attack = -1;
    ego_stats.frame_attack = 0;
    ego_stats.ShotTimer = 0;      
    ego_stats.active_weapon = eWCloseCombat;
    player.Speak("Bare hands selected.",0, Normal, 0, false, true);
  }
  else if (item == iChip) player.Speak("A tracking chip for leaving the security zone.",0, Normal, 0, false);
  else if (item == iAid) player.Speak("I don't need them, they are for Harry.",0, Normal, 0, false);
  else if (item == iApple) {
    if (ego_stats.health == ego_stats.max_health) player.Speak("I'm not hungry yet.",0, Normal, 0, false);
    else {
      ego_stats.health+=5;
      if (ego_stats.health > ego_stats.max_health) ego_stats.health = ego_stats.max_health;
      player.Speak("5 health points recovered.",0, Normal, 0, false, true);
      
    }
  }
  
}



function drawInventoryItems()
{ 
  
  DrawingSurface *surface = inventoryItemsGraphic.GetDrawingSurface();
  surface.Clear(COLOR_TRANSPARENT);
  
  
  int yoffset;
  int y;
  while (y < inventoryGridHeight) {
    if (y >0) yoffset = inventoryGap;
    int x;
    while (x < inventoryGridWidth) {
      if (inventoryX[x].Y[y] > 0) {
        surface.DrawImage(inventoryItemWidth * x, yoffset+ inventoryItemHeight * y, inventory[inventoryX[x].Y[y]].Graphic);
        if (ego_stats.active_inv!= null && inventory[inventoryX[x].Y[y]].ID == ego_stats.active_inv.ID) {
          surface.DrawImage(inventoryItemWidth * x+inventoryItemWidth/2-Game.SpriteWidth[400]/2 -1, yoffset+ inventoryItemHeight * y+inventoryItemHeight-6, 400);        
        }
      }
      x++;
    }
    y++;
  }
  
  surface.Release();
  btnInvItems.NormalGraphic = inventoryItemsGraphic.Graphic;
}


function addInventory(InventoryItem *Item)
{
  int y;
  String checkname = Item.Name.Substring(0, 1);
  if (checkname!="!") y = 1;
  
  while (y < inventoryGridHeight)
  {
    int x;
    while (x < inventoryGridWidth)
    {
      //finds the first empty slot and quits the while loop
      if (inventoryX[x].Y[y] == 0) 
      {
        inventoryX[x].Y[y] = Item.ID;
        drawInventoryItems();
        return;
      }
      x++;
    }
    y++;
  }
}

function removeInventory(InventoryItem *Item)
{
  //check if the player is using the item first
  if (ego_stats.active_inv == Item)
  {
    ego_stats.active_inv = null;
    return;
  }
  
  //now check if it's in the grid
  int y;
  while (y < inventoryGridHeight)
  {
    int x;
    while (x < inventoryGridWidth)
    {
      //finds the first item in the inventory that matches the removed inventory item
      if (inventoryX[x].Y[y] == Item.ID) 
      {
        inventoryX[x].Y[y] = 0;
        drawInventoryItems();
        return;
      }
      x++;
    }
    y++;
  }
}

//Import for touch-controls
function bInventoryItems_OnClick(GUIControl *control, MouseButton button)
{
  int clickX = (mouse.x - btnInvItems.X) / inventoryItemWidth;
  int clickY = (mouse.y - btnInvItems.Y) / inventoryItemHeight;
  int yoffset;
  if (mouse.y >70) {
    clickY = (mouse.y -inventoryGap - btnInvItems.Y) / inventoryItemHeight;
    yoffset = inventoryGap;
  }
  
  if ( clickX < inventoryGridWidth && clickY < inventoryGridHeight) {
    if (inventoryX[clickX].Y[clickY] == 0)
    {
      if (button == eMouseRight) closeInventoryGui();
    }
    else if (inventoryX[clickX].Y[clickY] > 0)
    {
      if (button == eMouseLeft)
      {
        if (inv_desc[inventory[inventoryX[clickX].Y[clickY]].ID] != null) {
          lblInvDesc.Text = inv_desc[inventory[inventoryX[clickX].Y[clickY]].ID];
          lblInvDesc2.Text = inv_desc[inventory[inventoryX[clickX].Y[clickY]].ID];
        }
        SelectedItem = inventory[inventoryX[clickX].Y[clickY]];
        inv_idx_x = clickX;
        inv_idx_y = clickY;
        
        //select weapon
        if (clickY < 1) ego_stats.active_inv = inventory[inventoryX[clickX].Y[clickY]];
        btnInvSelect.X = btnInvItems.X + inventoryItemWidth * clickX;
        btnInvSelect.Y = btnInvItems.Y + inventoryItemHeight * clickY + yoffset;
        //inventoryX[clickX].Y[clickY] = 0;
        drawInventoryItems();
        mouse.Mode = eModeUseinv;

      }
      else if (button == eMouseRight)
      {
        //close Inventory GUI if inventory is selected and Right click
        //if (ego_stats.active_inv != null) gInv.Visible = false;
        //else 
        inventory[inventoryX[clickX].Y[clickY]].RunInteraction(eModeLookat);
        //look at inventory item
      }
    }
  }
}


function update_selector(int x, int y, bool exitbutton)
{
  int yoffset;
  if (!exitbutton) {
    if (!btnInvSelect.Visible) {
      btnInvSelect.Visible= true;
      btnInvClose.NormalGraphic = 398;
    }
    if (y > 0) yoffset = inventoryGap;
    btnInvSelect.X = btnInvItems.X + inventoryItemWidth * x;
    btnInvSelect.Y = btnInvItems.Y + inventoryItemHeight * y + yoffset;            
    SelectedItem = inventory[inventoryX[x].Y[y]];

    
    if (inv_desc[SelectedItem.ID] != null) {
      int qty = player.InventoryQuantity[SelectedItem.ID];
      if (qty > 1) lblInvDesc.Text = String.Format("%dx %s",qty, inv_desc[SelectedItem.ID]);
      else lblInvDesc.Text = inv_desc[SelectedItem.ID];
      lblInvDesc2.Text = lblInvDesc.Text;
    }
    else {
      lblInvDesc.Text ="";
      lblInvDesc2.Text ="";
    }
    
  }
  else {
    btnInvSelect.Visible= false;
    btnInvClose.NormalGraphic= 399;
    btnInvClose.Animate(13, 3, 1, eRepeat);
    lblInvDesc.Text = "Close Inventory";
    lblInvDesc2.Text = lblInvDesc.Text;   
  }
}

function handle_keys() 
{ 
  if (!isRightKeyDown && CTRL.isControlRight()) {
    isRightKeyDown = true;
    if (inv_idx_x < inventoryGridWidth-1) { 
      inv_idx_x++;
      update_selector(inv_idx_x, inv_idx_y, false);
    }
    else if (inv_idx_x == inventoryGridWidth-1) {
      update_selector(inv_idx_x, inv_idx_y, true);
    }
  }
  
  else if (!isLeftKeyDown && CTRL.isControlLeft()) {
    isLeftKeyDown = true;
    if (inv_idx_x > 0) {
      if (btnInvSelect.Visible)inv_idx_x --;
      update_selector(inv_idx_x, inv_idx_y, false);
    }
  }
  else if (!isDownKeyDown && CTRL.isControlDown()) {
    isDownKeyDown = true;
    if (inv_idx_y < inventoryGridHeight-1) inv_idx_y++;
    update_selector(inv_idx_x, inv_idx_y, false);
  }
  else if (!isUpKeyDown && CTRL.isControlUp()) {
    isUpKeyDown = true;
    if (inv_idx_y > 0) inv_idx_y--;
    update_selector(inv_idx_x, inv_idx_y, false);    
  }
  else if (!IsInteractKeyDown && CTRL.isControlInteract()) {
    IsInteractKeyDown = true;
    use_lock = true;
    if (!btnInvSelect.Visible) closeInventoryGui();
    else if (SelectedItem!= null && btnInvSelect.Visible) {
      if (inv_idx_y < 1 && SelectedItem.ID >0) ego_stats.active_inv = SelectedItem;
      drawInventoryItems();
      inventory_action(SelectedItem);
    }
  }
  else if (!IsCloseKeyDown && IsKeyPressed(eKeyEscape)) {
    IsCloseKeyDown = true;
    closeInventoryGui();
  }
  else if (!IsInvKeyDown && CTRL.isControlInv() &&!inv_lock) {
    IsInvKeyDown = true;
    inv_lock = true;
    closeInventoryGui();
  }
  
}

function handle_invgui() 
{
  int yoffset;
  InventoryItem *checkItem;
  
  if (init_inv_gui== false) {
    set_inv_description();
    btnInvSelect.Animate(13, 2, 1, eRepeat);
    
    lblInvHealth.Text = String.Format("%d / %d", ego_stats.health, ego_stats.max_health);
    lblInvVigor.Text = String.Format("%d",ego_stats.rpg_vigor);
    lblInvArmor.Text = String.Format("%d",ego_stats.rpg_armor);
    lblInvArc.Text   = String.Format("%d",ego_stats.arcanium);
    lblInvEnergy.Text= String.Format("%d",ego_stats.energycells);
    lblInvLevel.Text = String.Format("%d",ego_stats.rpg_level);
    lblInvExp.Text   = String.Format("%d",ego_stats.exp);
    lblInvNext.Text  = String.Format("%d",RPGLevel.get_next_exp());
    
    init_inv_gui = true;
    if (SelectedItem != null) checkItem = SelectedItem;
    else if (ego_stats.active_inv!= null) checkItem = ego_stats.active_inv;
    else checkItem = null;
    
    if (checkItem!= null) {

      int y;
    
      while (y < inventoryGridHeight) {
        int x;
        if (y>0) yoffset = inventoryGap;
        
        while (x < inventoryGridWidth)
        {
          
          if (inventoryX[x].Y[y] == checkItem.ID) 
          {
            inv_idx_x = x;
            inv_idx_y = y;
            btnInvSelect.X = btnInvItems.X + inventoryItemWidth * x;
            btnInvSelect.Y = btnInvItems.Y + inventoryItemHeight * y + yoffset;            
            
            if (inv_desc[checkItem.ID] != null) {
              int qty = player.InventoryQuantity[checkItem.ID];
              if (qty > 1) lblInvDesc.Text = String.Format("%dx %s",qty, inv_desc[checkItem.ID]);
              else lblInvDesc.Text = inv_desc[checkItem.ID];
              lblInvDesc2.Text = lblInvDesc.Text;
            }            
            return;
          }
          x++;
        }
        y++;
      }    
    }
  }
}

function on_key_press(eKeyCode keycode) {
  if (gInv.Visible==true) {
    handle_keys();
  }
}

function on_event (EventType event, int data) 
{
  if (event == eEventAddInventory)
  {
    //whenever an inventory item is added, it needs to place it on the grid and change the button graphic
    if (player.InventoryQuantity[data] > 1) {
      init_inv_gui = false;
    }
    else {
      addInventory(inventory[data]);
      init_inv_gui = false;
    }
    
  }
  else if (event == eEventLoseInventory)
  {
    removeInventory(inventory[data]);
    init_inv_gui = false;
  }
}


// called when the game starts, before the first room is loaded

function game_start() 
{
  inventoryItemsGraphic = DynamicSprite.Create(inventoryAreaWidth, inventoryAreaHight);
  btnInvItems.NormalGraphic = inventoryItemsGraphic.Graphic;
}


function repeatedly_execute() {
  if (gInv.Visible==true) {
    handle_invgui();
    if (isLeftKeyDown && !CTRL.isControlLeft())              isLeftKeyDown = false;
    else if (isRightKeyDown && !CTRL.isControlRight())       isRightKeyDown = false;
    else if (isUpKeyDown && !CTRL.isControlUp())             isUpKeyDown = false;
    else if (isDownKeyDown && !CTRL.isControlDown())         isDownKeyDown = false;
    else if (IsCloseKeyDown && !IsKeyPressed(eKeyEscape))    isRightKeyDown = false;
    else if (IsInteractKeyDown && !CTRL.isControlInteract()) IsInteractKeyDown = false;
    else if (IsInvKeyDown && !CTRL.isControlInv())           IsInvKeyDown = false;
  }
}