int KSGUIBtn = -1;
int KSselectedItem = -1;

cKeyMap keyMap[eMKLastKey];
export keyMap;

bool lock_403;
bool lock_404;
bool lock_405;
bool lock_406;
bool lock_407;
  
static function KeySwap::GetKey(GUIControl *control) 
{
  gKSPopup.Visible=true;
  KSGUIBtn = control.ID;
}

static function KeySwap::GetKeyMenu(int selectedItem)
{
  KSGUIBtn = -1;
  KSselectedItem = selectedItem;
  gKSPopup.Visible=true;
}

static function KeySwap::Refresh() 
{
  if (!String.IsNullOrEmpty(keyMap[eMKUp].desc))        lblKSUp.Text    = keyMap[eMKUp].desc;
  if (!String.IsNullOrEmpty(keyMap[eMKDown].desc))      lblKSDown.Text  = keyMap[eMKDown].desc;
  if (!String.IsNullOrEmpty(keyMap[eMKLeft].desc))      lblKSLeft.Text  = keyMap[eMKLeft].desc;
  if (!String.IsNullOrEmpty(keyMap[eMKRight].desc))     lblKSRight.Text = keyMap[eMKRight].desc;
  if (!String.IsNullOrEmpty(keyMap[eMKInteract].desc))  lblKSInteract.Text = keyMap[eMKInteract].desc;
  if (!String.IsNullOrEmpty(keyMap[eMKShoot].desc))     lblKSShoot.Text = keyMap[eMKShoot].desc;
  if (!String.IsNullOrEmpty(keyMap[eMKInv].desc))       lblKSInv.Text   = keyMap[eMKInv].desc;
  if (!String.IsNullOrEmpty(keyMap[eMKPause].desc))     lblKSPause.Text = keyMap[eMKPause].desc;
  if (!String.IsNullOrEmpty(keyMap[eMKJump].desc))      lblKSJump.Text = keyMap[eMKJump].desc;
}

static String KeySwap::GetKeyDesc(eMapKeys theKey)
{
  String result;
  if (!String.IsNullOrEmpty(keyMap[theKey].desc)) result= keyMap[theKey].desc;
  return result;
}

static bool KeySwap::Save()
{
  int i;
  File* fhandle;
  String temp;
  fhandle = File.Open ("$SAVEGAMEDIR$/keys.map", eFileWrite);
  
  if (fhandle == null) return false;
  
  while ( i < eMKLastKey-1) {
    temp = String.Format("%d",keyMap[i+1].keycode);
    temp = temp.Append("|");
    if (!String.IsNullOrEmpty(keyMap[i+1].desc)) temp = temp.Append(keyMap[i+1].desc);
    fhandle.WriteString(temp);
    i++;
  }
  fhandle.Close();
  return true;
}

static bool KeySwap::Load(bool default_value) 
{
  int i, k;
  int separator;
  
  File* fhandle;
  String temp;
  String value;
  
  if (default_value) fhandle = File.Open ("keys.map", eFileRead);
  else {
    if (File.Exists("$SAVEGAMEDIR$/keys.map")) fhandle = File.Open ("$SAVEGAMEDIR$/keys.map", eFileRead);
    else  fhandle = File.Open ("keys.map", eFileRead);
  }
  
  if (fhandle == null) return false;
  
  while ( i < eMKLastKey-1) {
    temp = fhandle.ReadStringBack();

    if (!String.IsNullOrEmpty(temp)) {

      separator = temp.IndexOf("|");
      
      value = temp.Substring(0, separator);
      keyMap[i+1].keycode = value.AsInt;
      
      if (keyMap[i+1].keycode > 0) {
        temp = temp.Substring(separator +1, temp.Length);
        keyMap[i+1].desc = temp;
        temp = "";
      }
      else keyMap[i+1].desc = "";

    }
    else {
      keyMap[i+1].keycode = 0;
      keyMap[i+1].desc = "";
    }
    
    i++;
  }
  fhandle.Close();
  return true;
}

function on_key_press(int keycode) 
{
  if (gKSPopup.Visible == true) {
    
    String temp_name;
    bool check = false;
    int keypos;
    
    if (KSselectedItem >-1) {
           if (KSselectedItem == 0)  keypos = eMKLeft;
      else if (KSselectedItem == 1)  keypos = eMKRight;
      else if (KSselectedItem == 2)  keypos = eMKUp;
      else if (KSselectedItem == 3)  keypos = eMKDown;
      else if (KSselectedItem == 4)  keypos = eMKJump;
      else if (KSselectedItem == 5)  keypos = eMKShoot;      
      else if (KSselectedItem == 6)  keypos = eMKInteract;
      else if (KSselectedItem == 7)  keypos = eMKInv;
      else if (KSselectedItem == 8)  keypos = eMKPause;    
 
    }
    else {
           if (KSGUIBtn == 0)  keypos = eMKUp;
      else if (KSGUIBtn == 1)  keypos = eMKDown;
      else if (KSGUIBtn == 4)  keypos = eMKLeft;
      else if (KSGUIBtn == 5)  keypos = eMKRight;
      else if (KSGUIBtn == 6)  keypos = eMKInteract;
      else if (KSGUIBtn == 7)  keypos = eMKShoot;
      else if (KSGUIBtn == 15) keypos = eMKInv;
      else if (KSGUIBtn == 16) keypos = eMKPause;    
      else if (KSGUIBtn == 19) keypos = eMKJump;    
    }
    
    if ((keycode >= 48 && keycode <= 57) || (keycode >= 65 && keycode <= 90) ) { 
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = String.Format("%c",keycode);
    }
    // Backslash
    else if (keycode == 8 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "Backslash";
    }
    // Return
    else if (keycode == 13 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "Return";
    }
    // ESC = cancel
    else if (keycode == 27 ) {
      //keyMap[keypos].keycode = keycode;
      //keyMap[keypos].desc = "ESC";
      gKSPopup.Visible = false;
      KSselectedItem = -1;
      KeySwap.Refresh();      
    }
    // Space
    else if (keycode == 32 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "Space";
    }
    // Hash and stuff
    else if (keycode == 35 || (keycode >= 39 && keycode <=47) ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = String.Format("%c",keycode);
    } 
    // Brackets and Backslash
    else if (keycode >= 91 && keycode <= 93 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = String.Format("%c",keycode);
    }
    // Home
    else if (keycode == 371 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "Home";
    }
    // UpArrow
    else if (keycode == 372 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "UpArrow";
    }
    // PG Up
    else if (keycode == 373 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "PGUp";
    }
    // LeftArrow
    else if (keycode == 375 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "LeftArrow";
    }
    // Num5
    else if (keycode == 376 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "Numpad 5";
    }
    // RightArrow
    else if (keycode == 377 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "RightArrow";
    }     
    // End
    else if (keycode == 379 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "End";
    }  
    // DownArrow
    else if (keycode == 380 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "DownArrow";
    }     
    // PG Down
    else if (keycode == 381 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "PGDown";
    }
    // Ins
    else if (keycode == 382 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "Ins";
    }
    // Del
    else if (keycode == 383 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "Del";
    }    
    // LShift
    else if (keycode == 403 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "LShift";
    }
    // RShift
    else if (keycode == 404 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "RShift";
    }
    // LCTRL
    else if (keycode == 405 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "LCTRL";
    }
    // RCTRL
    else if (keycode == 406 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "RCTRL";
    }
    // ALT
    else if (keycode == 407 ) {
      keyMap[keypos].keycode = keycode;
      keyMap[keypos].desc = "ALT";
    }     
    else Display ("Sorry, this key isn't supported.");  
    gKSPopup.Visible = false;   
    KeySwap.Refresh();
  }

}

function repeatedly_execute() {

  if (gKSPopup.Visible == true) {
    if (!IsKeyPressed(403)) lock_403 = false;
    if (!IsKeyPressed(404)) lock_404 = false;
    if (!IsKeyPressed(405)) lock_405 = false;
    if (!IsKeyPressed(406)) lock_406 = false;
    if (!IsKeyPressed(407)) lock_407 = false;
    
    if (IsKeyPressed(403) && ! lock_403) {
      lock_403 = true;
      on_key_press(403); 
    }
    else if (IsKeyPressed(404) && ! lock_404) {
      lock_404 = true;
      on_key_press(404); 
    }
    else if (IsKeyPressed(405) && ! lock_405) {
      lock_405 = true;
      on_key_press(405); 
    }
    else if (IsKeyPressed(406) && ! lock_406) {
      lock_406 = true;
      on_key_press(406); 
    }
    else if (IsKeyPressed(407) && ! lock_407) {
      lock_407 = true;
      on_key_press(407); 
    }      
  }
}